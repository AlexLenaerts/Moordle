<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Developpez.Dotnet</name>
    </assembly>
    <members>
        <member name="T:Developpez.Dotnet.Algorithms.RIB">
            <summary>
            Vérification d'un numéro RIB
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.RIB.Check(System.String)">
            <summary>
            Vérifie la validité d'un RIB
            </summary>
            <param name="number">Le RIB à vérifier</param>
            <returns>true si le RIB est valide, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.RIB.FromIBAN(System.String)">
            <summary>
            Renvoie un numéro RIB à partir d'un numéro IBAN
            </summary>
            <param name="iban">Numéro IBAN à convertir en RIB</param>
            <returns>Le numéro RIB correspondant au IBAN spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.RIB.RibLetterToDigit(System.Char)">
            <summary>
            Convertit une lettre d'un RIB en un chiffre selon la table suivante :
            1 2 3 4 5 6 7 8 9
            A B C D E F G H I
            J K L M N O P Q R
            _ S T U V W X Y Z
            </summary>
            <param name="letter">La lettre à convertir</param>
            <returns>Le chiffre de remplacement</returns>
        </member>
        <member name="T:Developpez.Dotnet.BigMath">
            <summary>
            Cette classe fournit des outils pour effectuer des calculs sur des grands nombres,
            au delà de la limite des 64 bits d'un Int64
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.BigMath.Modulo(System.String,System.UInt64)">
            <summary>
            Calcule le modulo (reste de la division entière) d'un grand nombre par
            un nombre
            </summary>
            <param name="number">Le grand nombre à diviser</param>
            <param name="k">Le diviseur</param>
            <returns>le modulo de la division</returns>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.IBAN">
            <summary>
            Vérification d'un numéro IBAN
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.IBAN.Check(System.String)">
            <summary>
            Vérifie la validité d'un numéro IBAN
            </summary>
            <param name="number">Numéro IBAN à vérifier</param>
            <returns>true si le numéro est valide, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.IBAN.FromRIB(System.String,System.String)">
            <summary>
            Obtient un numéro IBAN à partir d'un numéro RIB et d'un code de pays
            </summary>
            <param name="rib">Le numéro RIB</param>
            <param name="countryCode">Le code du pays (par exemple "FR" pour la France)</param>
            <returns>Le numéro IBAN correspondant au RIB et au code pays spécifiés</returns>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.LuhnCheckType">
            <summary>
            Type de vérification par l'algorithme de Luhn.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Algorithms.LuhnCheckType.None">
            <summary>
            Aucun.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Algorithms.LuhnCheckType.CreditCard">
            <summary>
            Carte de crédit.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Algorithms.LuhnCheckType.Siren">
            <summary>
            Siren.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Algorithms.LuhnCheckType.Siret">
            <summary>
            Siret.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.Luhn">
            <summary>
            Algorithme de Luhn.
            </summary>
            <remarks>L'algorithme de Luhn est décrit ici :
            http://en.wikipedia.org/wiki/Luhn_algorithm.
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Luhn.Check(System.Int64)">
            <summary>
            Utilise l'algorithme de Luhn pour vérifier la validité d'un nombre donné.
            </summary>
            <param name="number">Nombre à vérifier.</param>
            <returns>Vrai si le nombre est valide selon l'algorithme de Luhn, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Luhn.Check(System.String)">
            <summary>
            Utilise l'algorithme de Luhn pour vérifier la validité d'un nombre donné.
            </summary>
            <param name="number">Nombre à vérifier.</param>
            <returns>Vrai si le nombre est valide selon l'algorithme de Luhn, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Luhn.Check(System.String,System.Int32)">
            <summary>
            Utilise l'algorithme de Luhn pour vérifier la validité d'un nombre donné.
            </summary>
            <param name="number">Nombre à vérifier.</param>
            <param name="length">Longueur de la chaîne.</param>
            <returns>Vrai si le nombre est valide selon l'algorithme de Luhn, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Luhn.Check(System.Int64,Developpez.Dotnet.Algorithms.LuhnCheckType)">
            <summary>
            Utilise l'algorithme de Luhn pour vérifier la validité d'un nombre donné.
            </summary>
            <param name="number">Nombre à vérifier.</param>
            <param name="checkType">Type de vérification.</param>
            <returns>Vrai si le nombre est valide selon l'algorithme de Luhn, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Luhn.Check(System.String,Developpez.Dotnet.Algorithms.LuhnCheckType)">
            <summary>
            Utilise l'algorithme de Luhn pour vérifier la validité d'un nombre donné.
            </summary>
            <param name="number">Nombre à vérifier.</param>
            <param name="checkType">Type de vérification.</param>
            <returns>Vrai si le nombre est valide selon l'algorithme de Luhn, faux sinon.</returns>
        </member>
        <member name="T:Developpez.Dotnet.ByteSizeFormatter">
            <summary>
            Permet de formater une taille en octets de façon lisible pour l'utilisateur
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ByteSizeFormatter.#ctor">
            <summary>
            Crée une nouvelle instance de ByteSizeFormatter
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ByteSizeFormatter.Format(System.Int64)">
            <summary>
            Formate la taille spécifiée.
            </summary>
            <param name="size">La taille à formater</param>
            <returns>La taille formatée avec les options de ce ByteSizeFormatter</returns>
        </member>
        <member name="P:Developpez.Dotnet.ByteSizeFormatter.Convention">
            <summary>
            Obtient ou définit la convention utilisée pour les unités de taille.
            </summary>
            <value>La convention utilisée pour les unités de taille. La valeur par défaut est ByteSizeConvention.Customary, qui correspond à l'usage courant.</value>
        </member>
        <member name="P:Developpez.Dotnet.ByteSizeFormatter.Culture">
            <summary>
             Obtient ou définit la culture à utiliser pour le formatage du nombre.
            </summary>
             <value>La culture à utiliser, ou null pour utiliser la culture courante. La valeur par défaut est null.</value>
        </member>
        <member name="P:Developpez.Dotnet.ByteSizeFormatter.DecimalPlaces">
            <summary>
            Obtient ou définit le nombre de chiffres après la virgule à afficher.
            </summary>
            <value>Le nombre de chiffres après la virgule à afficher. La valeur par défaut est 0.</value>
        </member>
        <member name="P:Developpez.Dotnet.ByteSizeFormatter.NumberFormat">
            <summary>
            Obtient ou définit le format d'affichage de la valeur.
            </summary>
            <value>Le format d'affichage de la valeur. La valeur par défaut est "#,##0.###".</value>
        </member>
        <member name="P:Developpez.Dotnet.ByteSizeFormatter.MinUnit">
            <summary>
            Obtient ou définit l'unité la plus petite à utiliser.
            </summary>
            <value>L'unité la plus petite à utiliser. La valeur par défaut est ByteSizeUnit.Byte.</value>
        </member>
        <member name="P:Developpez.Dotnet.ByteSizeFormatter.MaxUnit">
            <summary>
            Obtient ou définit l'unité la plus grande à utiliser.
            </summary>
            <value>L'unité la plus grande à utiliser. La valeur par défaut est ByteSizeUnit.ExaByte.</value>
        </member>
        <member name="P:Developpez.Dotnet.ByteSizeFormatter.RoundingRule">
            <summary>
            Obtient ou définit la règle d'arrondi à utiliser.
            </summary>
            <value>La règle d'arrondi à utiliser. La valeur par défaut est ByteSizeRounding.Closest (arrondi au plus proche).</value>
        </member>
        <member name="P:Developpez.Dotnet.ByteSizeFormatter.UseFullWordForBytes">
            <summary>
             Obtient ou définit une valeur indiquant si les tailles inférieures à 1 Ko
             sont affichées avec le mot "octet" non abrégé.
            </summary>
             <value>true pour afficher le mot "octet" non abrégé pour les tailles inférieures à 1 Ko,
             false pour afficher l'abréviation. La valeur par défaut est true.</value>
        </member>
        <member name="T:Developpez.Dotnet.ByteSizeConvention">
            <summary>
            Définit la convention utilisée pour les unités de taille en octets.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeConvention.Customary">
            <summary>
            Convention d'usage courant : multiples binaires (1024), préfixes décimaux (K/M/G...).
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeConvention.Binary">
            <summary>
            Convention binaire : multiples binaires (1024), préfixes binaires (Ki/Mi/Gi...).
            Equivalent à IEC.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeConvention.Decimal">
            <summary>
            Convention décimale : multiples décimaux (1000), préfixes décimaux (K/M/G...).
            Equivalent à SI.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeConvention.IEC">
            <summary>
            Convention IEC 60027 : multiples binaires (1024), préfixes binaires (Ki/Mi/Gi...).
            Equivalent à Binary.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeConvention.SI">
            <summary>
            Convention du système international : multiples décimaux (1000), préfixes décimaux (K/M/G...).
            Equivalent à Decimal.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.ByteSizeUnit">
            <summary>
            Définit les unités de taille en octets.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeUnit.Byte">
            <summary>
            Octet
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeUnit.Kilobyte">
            <summary>
            kilooctet, ou kibioctet en convention binaire
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeUnit.Megabyte">
            <summary>
            mégaoctet, ou mébioctet en convention binaire
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeUnit.Gigabyte">
            <summary>
            gigaoctet, ou gibioctet en convention binaire
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeUnit.Terabyte">
            <summary>
            téraoctet, ou tébioctet en convention binaire
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeUnit.Petabyte">
            <summary>
            pétaoctet, ou pébioctet en convention binaire
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeUnit.Exabyte">
            <summary>
            exaoctet, ou exbioctet en convention binaire
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.ByteSizeRounding">
            <summary>
            Définit les règles d'arrondi pour les tailles en octets.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeRounding.Closest">
            <summary>
            Arrondi à la valeur la plus proche
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeRounding.Down">
            <summary>
            Arrondi à la valeur inférieure
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.ByteSizeRounding.Up">
            <summary>
            Arrondi à la valeur supérieure
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.ArrayExtensions">
            <summary>
            Fournit des méthodes d'extension pour la manipulation de tableaux
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.GetRows``1(``0[0:,0:])">
            <summary>
            Renvoie une séquence contenant les lignes d'un tableau bidimensionnel.
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau bidimensionnel dont on veut obtenir les lignes.</param>
            <returns>Une séquence contenant les lignes du tableau</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.ToJaggedArray``1(``0[0:,0:])">
            <summary>
            Renvoie un tableau en escalier avec le même contenu que le tableau bidimensionnel spécifié.
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau bidimensionnel à convertir</param>
            <returns>Un tableau en escalier avec le même contenu que le tableau bidimensionnel spécifié.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.ToBidimensionalArray``1(``0[][])">
            <summary>
            Renvoie un tableau bidimensionnel avec le même contenu que le tableau en escalier spécifié.
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="jaggedArray">Tableau en escalier à convertir.</param>
            <returns>Un tableau bidimensionnel avec le même contenu que le tableau en escalier spécifié.</returns>
            <remarks>Le nombre de colonnes est déterminé en recherchant la plus longue ligne du tableau en escalier.
            Pour de meilleures performances, si vous savez que toutes les lignes ont la même longueur, utilisez la
            surcharge prenant un paramètre <c>bool useFirstLineLength</c>.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.ToBidimensionalArray``1(``0[][],System.Boolean)">
            <summary>
            Renvoie un tableau bidimensionnel avec le même contenu que le tableau en escalier spécifié.
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="jaggedArray">Tableau en escalier à convertir.</param>
            <param name="useFirstLineLength">true pour utiliser la longueur de la première ligne comme nombre de colonnes, false pour rechercher la ligne la plus longue.</param>
            <returns>Un tableau bidimensionnel avec le même contenu que le tableau en escalier spécifié.</returns>
            <remarks>Si <c>useFirstLineLength</c> vaut false, le nombre de colonnes est déterminé en recherchant la plus longue ligne
            du tableau en escalier. Pour de meilleures performances, si vous savez que toutes les lignes ont la même longueur, passez true
            pour le paramètre <c>useFirstLineLength</c> (une exception sera alors levée si une ligne est plus longue que la première).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.GetSegment``1(``0[],System.Int32,System.Int32)">
            <summary>
            Renvoie le segment demandé d'un tableau
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau dont on veut obtenir un segment</param>
            <param name="from">Index de début du segment</param>
            <param name="count">Nombre d'éléments dans le segment</param>
            <returns>Le segment demandé du tableau</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.GetSegment``1(``0[],System.Int32)">
            <summary>
            Renvoie un segment d'un tableau à partir de la position spécifiée
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau dont on veut obtenir un segment</param>
            <param name="from">Index de début du segment</param>
            <returns>Le segment de tableau qui commence à la position spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.GetSegment``1(``0[])">
            <summary>
            Renvoie un segment de tableau représentant la totalité du tableau
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau dont on veut obtenir un segment</param>
            <returns>Un segment représentant la totalité du tableau</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.AsEnumerable``1(System.ArraySegment{``0})">
            <summary>
            Renvoie une séquence qui énumère les éléments d'un segment de tableau
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="arraySegment">Segment de tableau à énumérer</param>
            <returns>Une séquence correspondant aux éléments du segment de tableau</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.ToArray``1(System.ArraySegment{``0})">
            <summary>
            Renvoie un nouveau tableau à partir d'un segment de tableau
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="arraySegment">Segment de tableau à partir duquel est créé le nouveau tableau</param>
            <returns>Un tableau contenant tous les éléments du segment d'origine</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.ShiftLeft``1(``0[])">
            <summary>
            Décale les éléments d'un tableau d'une position vers la gauche,
            en remplaçant le dernier élément par la valeur par défaut du type
            des éléments du tableau. Cette méthode ne modifie pas le tableau d'origine
            mais renvoie un nouveau tableau.
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau à décaler</param>
            <returns>Une copie décalée du tableau d'origine</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.ShiftLeft``1(``0[],``0)">
            <summary>
            Décale les éléments d'un tableau d'une position vers la gauche,
            en remplaçant le dernier élément par la valeur spécifiée.
            Cette méthode ne modifie pas le tableau d'origine mais renvoie un
            nouveau tableau.
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau à décaler</param>
            <param name="value">Valeur à insérer à la fin du tableau</param>
            <returns>Une copie décalée du tableau d'origine</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.ShiftRight``1(``0[])">
            <summary>
            Décale les éléments d'un tableau d'une position vers la droite,
            en remplaçant le premier élément par la valeur par défaut du type
            des éléments du tableau. Cette méthode ne modifie pas le tableau d'origine
            mais renvoie un nouveau tableau.
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau à décaler</param>
            <returns>Une copie décalée du tableau d'origine</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.ShiftRight``1(``0[],``0)">
            <summary>
            Décale les éléments d'un tableau d'une position vers la droite,
            en remplaçant le premier élément par la valeur spécifiée.
            Cette méthode ne modifie pas le tableau d'origine mais renvoie un
            nouveau tableau.
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau à décaler</param>
            <param name="value">Valeur à insérer au début du tableau</param>
            <returns>Une copie décalée du tableau d'origine</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.RotateLeft``1(``0[])">
            <summary>
            Effectue une rotation d'un tableau d'une position vers la gauche.
            Cette méthode ne modifie pas le tableau d'origine mais renvoie un
            nouveau tableau.
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau sur lequel effectuer une rotation</param>
            <returns>Une copie du tableau d'origine sur laquelle une rotation a été effectuée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ArrayExtensions.RotateRight``1(``0[])">
            <summary>
            Effectue une rotation d'un tableau d'une position vers la droite.
            Cette méthode ne modifie pas le tableau d'origine mais renvoie un
            nouveau tableau.
            </summary>
            <typeparam name="T">Type des éléments du tableau</typeparam>
            <param name="array">Tableau sur lequel effectuer une rotation</param>
            <returns>Une copie du tableau d'origine sur laquelle une rotation a été effectuée</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.CollectionFactory">
            <summary>
            Fournit des méthodes pour faciliter la création de collections génériques avec des types anonymes,
            grâce à l'inférence de type générique.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CollectionFactory.Stack``1(``0)">
            <summary>
            Crée une pile (Stack&lt;T&gt;) en utilisant le paramètre pour déterminer le type des éléments
            </summary>
            <typeparam name="T">Type des éléments (déterminé implicitement par inférence)</typeparam>
            <param name="dummy">Objet modèle pour déterminer le type des éléments</param>
            <returns>Une pile (Stack&lt;T&gt;) vide</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CollectionFactory.Queue``1(``0)">
            <summary>
            Crée une queue (Queue&lt;T&gt;) en utilisant le paramètre pour déterminer le type des éléments
            </summary>
            <typeparam name="T">Type des éléments (déterminé implicitement par inférence)</typeparam>
            <param name="dummy">Objet modèle pour déterminer le type des éléments</param>
            <returns>Une queue (Queue&lt;T&gt;) vide</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CollectionFactory.List``1(``0)">
            <summary>
            Crée une liste (List&lt;T&gt;) en utilisant le paramètre pour déterminer le type des éléments
            </summary>
            <typeparam name="T">Type des éléments (déterminé implicitement par inférence)</typeparam>
            <param name="dummy">Objet modèle pour déterminer le type des éléments</param>
            <returns>Une liste (List&lt;T&gt;) vide</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CollectionFactory.HashSet``1(``0)">
            <summary>
            Crée un ensemble (HashSet&lt;T&gt;) en utilisant le paramètre pour déterminer le type des éléments
            </summary>
            <typeparam name="T">Type des éléments (déterminé implicitement par inférence)</typeparam>
            <param name="dummy">Objet modèle pour déterminer le type des éléments</param>
            <returns>Un ensemble (HashSet&lt;T&gt;) vide</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CollectionFactory.Dictionary``2(``0,``1)">
            <summary>
            Crée un dictionnaire (Dictionary&lt;TKey, TValue&gt;) en utilisant les paramètres pour déterminer le type de clé et le type de valeur
            </summary>
            <typeparam name="TKey">Type de clé (déterminé implicitement par inférence)</typeparam>
            <typeparam name="TValue">Type de valeur (déterminé implicitement par inférence)</typeparam>
            <param name="dummyKey">Objet modèle pour déterminer le type de clé</param>
            <param name="dummyValue">Objet modèle pour déterminer le type de valeur</param>
            <returns>Un dictionnaire (Dictionary&lt;TKey, TValue&gt;) vide</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.CompareExtensions">
            <summary>
            Fournit des méthodes d'extension pour travailler avec des IComparer&lt;T&gt; et des Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CompareExtensions.ToComparer``1(System.Comparison{``0})">
            <summary>
            Obtient un IComparer&lt;T&gt; à partir de la comparaison spécifiée
            </summary>
            <typeparam name="T">Type des éléments à comparer</typeparam>
            <param name="comparison">La comparaison à utiliser</param>
            <returns>Un IComparer&lt;T&gt; qui utilise la comparaison spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CompareExtensions.ToComparison``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Obtient une Comparison&lt;T&gt; à partir du IComparer&lt;T&gt; spécifié
            </summary>
            <typeparam name="T">Type des éléments à comparer</typeparam>
            <param name="comparer">Comparateur à utiliser</param>
            <returns>La comparaison équivalente au IComparer&lt;T&gt; spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CompareExtensions.Reverse``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Inverse le IComparer&lt;T&gt; spécifié
            </summary>
            <typeparam name="T">Le type des éléments à comparer</typeparam>
            <param name="comparer">Le comparateur à inverser</param>
            <returns>Un comparateur avec une logique inversée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CompareExtensions.Reverse``1(System.Comparison{``0})">
            <summary>
            Inverse la Comparison&lt;T&gt; spécifiée
            </summary>
            <typeparam name="T">Le type des éléments à comparer</typeparam>
            <param name="comparison">La comparaison à inverser</param>
            <returns>Une comparaison avec une logique inversée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CompareExtensions.Max``1(System.Collections.Generic.IComparer{``0},``0,``0)">
            <summary>
            Renvoie le maximum des deux arguments
            </summary>
            <typeparam name="T">Type des objets à comparer</typeparam>
            <param name="comparer">Comparateur à utiliser</param>
            <param name="x">Premier objet à comparer</param>
            <param name="y">Second objet à comparer</param>
            <returns>x si x &gt;= y selon le comparateur spécifié, sinon y</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.CompareExtensions.Min``1(System.Collections.Generic.IComparer{``0},``0,``0)">
            <summary>
            Renvoie le minimum des deux arguments
            </summary>
            <typeparam name="T">Type des objets à comparer</typeparam>
            <param name="comparer">Comparateur à utiliser</param>
            <param name="x">Premier objet à comparer</param>
            <param name="y">Second objet à comparer</param>
            <returns>x si x &lt;= y selon le comparateur spécifié, sinon y</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.DefaultDictionary`2">
            <summary>
            Représente un dictionnaire dont toutes les clés sont supposées définies. Si la clé demandée
            n'existe pas dans le dictionnaire, une valeur par défaut est renvoyée. Cette valeur par défaut
            est automatiquement ajoutée au dictionnaire avec la clé associée, sauf indication contraire.
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="T:Developpez.Dotnet.Collections.DictionaryBase`2">
            <summary>
            Classe de base pour implémenter des dictionnaires personnalisés, sans avoir à implémenter
            chaque méthode de IDictionary&lt;K, V&gt;. Toutes les méthodes et propriétés sont virtuelles,
            et délèguent leur implémentation à un IDictionary&lt;K, V&gt; passé en paramètre du constructeur
            protégé.
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initialise une nouvelle instance de DictionaryBase&lt;TKey, TValue&gt; qui délègue son implémentation
            au dictionaire passé en paramètre
            </summary>
            <param name="dictionary">Le dictionnaire auquel déléguer l'implémentation</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean)">
            <summary>
            Initialise une nouvelle instance de DictionaryBase&lt;TKey, TValue&gt; qui délègue son implémentation
            au dictionaire passé en paramètre, ou a une copie de ce dictionnaire
            </summary>
            <param name="dictionary">Le dictionnaire auquel déléguer l'implémentation</param>
            <param name="copy">true pour réaliser une copie du dictionnaire original ; false pour simplement l'encapsuler</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Add(`0,`1)">
            <summary>
            Ajoute la clé et la valeur spécifiées au dictionnaire. 
            </summary>
            <param name="key">Clé de l'élément à ajouter. </param>
            <param name="value">Valeur de l'élément à ajouter. La valeur peut être null pour les types référence.</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.ContainsKey(`0)">
            <summary>
            Détermine si le dictionnaire contient la clé spécifiée. 
            </summary>
            <param name="key">Clé à rechercher</param>
            <returns>true si le dictionnaire contient un élément correspondant à la clé spécifiée ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Remove(`0)">
            <summary>
            Supprime du dictionnaire la valeur ayant la clé spécifiée. 
            </summary>
            <param name="key">Clé de l'élément à supprimer.</param>
            <returns>true si la recherche et la suppression de l'élément réussissent ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            Obtient la valeur associée à la clé spécifiée. 
            </summary>
            <param name="key">Clé de la valeur à obtenir.</param>
            <param name="value">Paramètre de sortie auquel est affecté la valeur trouvée</param>
            <returns>true si le dictionnaire contient un élément correspondant à la clé spécifiée ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Ajoute la paire clé/valeur spécifiée au dictionnaire 
            </summary>
            <param name="item">Paire clé/valeur à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Clear">
            <summary>
            Supprime toutes les clés et les valeurs du dictionnaire.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Détermine si le dictionnaire contient la paire clé/valeur spécifiée.
            </summary>
            <param name="item">Paire clé/valeur recherchée</param>
            <returns>true si le dictionnaire contient la paire clé/valeur, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copie les éléments du dictionnaire dans un tableau, à partir de la position spécifiée
            </summary>
            <param name="array">Tableau de destination</param>
            <param name="arrayIndex">Index du tableau où commencer la copie</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Supprime du dictionnaire la paire clé/valeur spécifiée.
            </summary>
            <param name="item">Paire clé/valeur</param>
            <returns>true si la recherche et la suppression de l'élément réussissent ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.GetEnumerator">
            <summary>
            Retourne un énumérateur qui parcourt le dictionnaire
            </summary>
            <returns>Un énumerateur pour parcourir le dictionnaire</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retourne un énumérateur qui parcourt le dictionnaire
            </summary>
            <returns>Un énumerateur pour parcourir le dictionnaire</returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DictionaryBase`2.Keys">
            <summary>
            Obtient une collection contenant les clés du dictionnaire.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DictionaryBase`2.Values">
            <summary>
            Obtient une collection contenant les valeurs du dictionnaire.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DictionaryBase`2.Item(`0)">
            <summary>
            Obtient ou définit la valeur associée à la clé spécifiée.
            </summary>
            <param name="key">Clé de l'élément à obtenir ou à définir</param>
            <value>Valeur associée à la clé spécifiée. Si la clé spécifiée est introuvable, une opération Get retourne KeyNotFoundException et une opération Set crée un nouvel élément avec la clé spécifiée.</value>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DictionaryBase`2.Count">
            <summary>
            Obtient le nombre de paires clé/valeur contenues dans le dictionnaire.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DictionaryBase`2.IsReadOnly">
            <summary>
            Obtient une valeur indiquant si le dictionnaire est en lecture seule.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.#ctor">
            <summary>
            Initialise une nouvelle instance de DefaultDictionary&lt;T&gt;. Si la clé demandée est absente,
            la valeur par défaut du type <c>V</c> est renvoyée.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.#ctor(System.Boolean)">
            <summary>
            Initialise une nouvelle instance de DefaultDictionary&lt;T&gt;. Si la clé demandée est absente,
            la valeur par défaut du type <c>V</c> est renvoyée. Si <c>addMissingKeys</c> vaut true, la valeur
            par défaut est ajoutée au dictionnaire avec la clé associée.
            </summary>
            <param name="addMissingKeys">true pour ajouter automatiquement au dictionnaire les clés manquantes et leur valeur associée ; sinon, false</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.#ctor(`1)">
            <summary>
            Initialise une nouvelle instance de DefaultDictionary&lt;T&gt;. Si la clé demandée est absente,
            la valeur par défaut spécifiée est renvoyée.
            </summary>
            <param name="defaultValue">La valeur par défaut à utiliser pour les clés absentes</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.#ctor(`1,System.Boolean)">
            <summary>
            Initialise une nouvelle instance de DefaultDictionary&lt;T&gt;. Si la clé demandée est absente,
            la valeur par défaut spécifiée est renvoyée. Si <c>addMissingKeys</c> vaut true, la valeur
            par défaut est ajoutée au dictionnaire avec la clé associée.
            </summary>
            <param name="defaultValue">La valeur par défaut à utiliser pour les clés absentes</param>
            <param name="addMissingKeys">true pour ajouter automatiquement au dictionnaire les clés manquantes et leur valeur associée ; sinon, false</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initialise une nouvelle instance de DefaultDictionary&lt;T&gt;. Si la clé demandée est absente,
            la valeur générée par le delegate fourni en paramètre est renvoyée.
            </summary>
            <param name="defaultValueGenerator">Une fonction qui renvoie une valeur initiale pour une clé absente</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.#ctor(System.Func{`0,`1},System.Boolean)">
            <summary>
            Initialise une nouvelle instance de DefaultDictionary&lt;T&gt;. Si la clé demandée est absente,
            la valeur générée par le delegate fourni en paramètre est renvoyée. Si <c>addMissingKeys</c> vaut true, la valeur
            par défaut est ajoutée au dictionnaire avec la clé associée.
            </summary>
            <param name="defaultValueGenerator">Une fonction qui renvoie une valeur initiale pour une clé absente</param>
            <param name="addMissingKeys">true pour ajouter automatiquement au dictionnaire les clés manquantes et leur valeur associée ; sinon, false</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DefaultDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Obtient la valeur associée à la clé spécifiée. Si la clé n'existe pas, une valeur par défaut est renvoyée.
            </summary>
            <param name="key">La clé recherchée</param>
            <param name="value">Paramètre de sortie auquel la valeur trouvée est affectée</param>
            <returns>Toujours true</returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DefaultDictionary`2.AddMissingKeys">
            <summary>
            Renvoie une valeur indiquant si ce dictionnaire ajoute automatiquement
            les clés manquantes et leur valeur associée lorsqu'elles sont demandées
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.DefaultDictionary`2.Item(`0)">
            <summary>
            Obtient la valeur associée à la clé spécifiée. Si la clé n'existe pas, une valeur par défaut est renvoyée
            </summary>
            <param name="key">La clé pour laquelle retourner une valeur</param>
            <returns>La valeur correspondant à la clé</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.DictionaryExtensions">
            <summary>
            Fournit des méthodes d'extension pour manipuler des dictionnaires
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Renvoie la valeur correspondant à la clé spécifiée si celle-ci est présente dans le dictionnaire,
            ou la valeur par défaut spécifiée si la clé est absente.
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
            <param name="dictionary">Le dictionnaire à partir duquel renvoyer la valeur</param>
            <param name="key">La clé recherchée</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si la clé est absente du dictionnaire</param>
            <returns>Si la clé est présente, renvoie la valeur correspondante. Sinon, renvoie la valeur par défaut</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Renvoie la valeur correspondant à la clé spécifiée si celle-ci est présente dans le dictionnaire,
            ou la valeur par défaut du type de la valeur si la clé est absente.
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
            <param name="dictionary">Le dictionnaire à partir duquel renvoyer la valeur</param>
            <param name="key">La clé recherchée</param>
            <returns>Si la clé est présente, renvoie la valeur correspondante. Sinon, renvoie la valeur par défaut</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Renvoie la valeur correspondant à la clé spécifiée si celle-ci est présente dans le dictionnaire.
            Sinon, utilise la fonction fournie pour générer la valeur, l'ajoute au dictionnaire, et renvoie cette valeur.
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
            <param name="dictionary">Le dictionnaire à partir duquel renvoyer la valeur</param>
            <param name="key">La clé recherchée</param>
            <param name="valueFactory">La fonction utilisée pour générer la valeur si la clé est absente.</param>
            <returns>La valeur correspondant à la clé. Si la clé demandée n'existe pas dans le dictionnaire, la valeur est générée par la fonction fournie et ajoutée au dictionnaire avant d'être renvoyée.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryExtensions.GetOrCreate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Renvoie la valeur correspondant à la clé spécifiée si celle-ci est présente dans le dictionnaire.
            Sinon, utilise la fonction fournie pour générer la valeur et renvoie cette valeur. La valeur générée
            n'est pas ajoutée au dictionnaire.
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
            <param name="dictionary">Le dictionnaire à partir duquel renvoyer la valeur</param>
            <param name="key">La clé recherchée</param>
            <param name="valueFactory">La fonction utilisée pour générer la valeur si la clé est absente.</param>
            <returns>La valeur correspondant à la clé. Si la clé demandée n'existe pas dans le dictionnaire, la valeur est générée par la fonction fournie.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Renvoie un wrapper en lecture seule pour un dictionnaire
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
            <param name="dictionary">Le dictionnaire pour lequel renvoyer un wrapper</param>
            <returns>Un wrapper en lecture seule du dictionnaire</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
            <summary>
            Renvoie un wrapper ou une copie en lecture seule pour un dictionnaire
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
            <param name="dictionary">Le dictionnaire pour lequel renvoyer un wrapper</param>
            <param name="copy">true pour renvoyer une copie en lecture seule du dictionnaire ; false pour renvoyer simplement un wrapper du dictionnaire existant</param>
            <returns>Un wrapper ou une copie en lecture seule du dictionnaire</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.DictionaryExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Reconstruit un dictionnaire à partir d'une séquence de paires clé/valeur
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
            <param name="source">Séquence de paires clé/valeur</param>
            <returns>Un dictionnaire qui contient les paires clé/valeur de la séquence d'origine</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.EnumerableExtensions">
            <summary>
            Fournit des méthodes d'extension pour les types enumérables
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FormatAll(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Renvoie une chaine contenant chaque élément de l'énumération formaté avec
            le format spécifié
            </summary>
            <param name="enumerable">L'énumération à formater</param>
            <param name="format">Le format à appliquer à chaque élément, par exemple "x2" ou "{0:x2}"</param>
            <param name="separator">Le séparateur à insérer entre chaque élément</param>
            <returns>La chaine contenant tous les éléments formatés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FormatAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Renvoie une chaine contenant chaque élément de l'énumération formaté avec
            le delegate spécifié
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="enumerable">L'énumération à formater</param>
            <param name="formatter">Le delegate à appliquer à chaque élément pour le convertir en chaine de caractères</param>
            <param name="separator">Le séparateur à insérer entre chaque élément</param>
            <returns>La chaine contenant tous les éléments formatés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ToCsvString(System.Collections.IEnumerable,System.String)">
            <summary>
            Convertit une liste en une chaîne CSV avec le séparateur spécifié
            </summary>
            <param name="list">Liste à convertir</param>
            <param name="separator">Séparateur à utiliser</param>
            <returns>Une chaine CSV représentant les éléments de la liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ListFromCsv``1(System.String,System.String)">
            <summary>
            Convertit une chaine CSV en une liste d'objets du type spécifié
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="source">Chaîne CSV à convertir</param>
            <param name="separator">Séparateur à utiliser</param>
            <returns>Une liste contenant les éléments de la chaîne CSV</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ToHierarchy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,System.Boolean})">
            <summary>
            Renvoie une collection de noeuds représentant les objets de la collection source sous forme hiérarchique,
            selon la relation spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la collection source</typeparam>
            <param name="source">Collection d'objets à hiérarchiser</param>
            <param name="startWith">Prédicat pour identifier les éléments racines</param>
            <param name="connectBy">Relation qui lie un objet parent à ses enfants</param>
            <returns>Une collection de noeuds représentant les objets de la collection source sous forme hiérarchique</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DumpHierarchy``1(System.Collections.Generic.IEnumerable{Developpez.Dotnet.Collections.EnumerableExtensions.Node{``0}},System.IO.TextWriter,System.String,System.Func{``0,System.String})">
            <summary>
            Ecrit une hiérarchie d'objets dans le TextWriter spécifié
            </summary>
            <typeparam name="T">Type des objets de la hiérarchie</typeparam>
            <param name="nodes">Collection de noeuds à afficher</param>
            <param name="writer">TextWriter dans lequel écrire la hiérarchie</param>
            <param name="indent">Chaine d'indentation à utiliser</param>
            <param name="display">Fonction qui sélectionne le membre à afficher</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DumpHierarchy``1(System.Collections.Generic.IEnumerable{Developpez.Dotnet.Collections.EnumerableExtensions.Node{``0}},System.IO.TextWriter,System.Func{``0,System.String})">
            <summary>
            Ecrit une hiérarchie d'objets dans le TextWriter spécifié
            </summary>
            <typeparam name="T">Type des objets de la hiérarchie</typeparam>
            <param name="nodes">Collection de noeuds à afficher</param>
            <param name="writer">TextWriter dans lequel écrire la hiérarchie</param>
            <param name="display">Fonction qui sélectionne le membre à afficher</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DumpHierarchy``1(System.Collections.Generic.IEnumerable{Developpez.Dotnet.Collections.EnumerableExtensions.Node{``0}},System.IO.TextWriter,System.String)">
            <summary>
            Ecrit une hiérarchie d'objets dans le TextWriter spécifié
            </summary>
            <typeparam name="T">Type des objets de la hiérarchie</typeparam>
            <param name="nodes">Collection de noeuds à afficher</param>
            <param name="writer">TextWriter dans lequel écrire la hiérarchie</param>
            <param name="indent">Chaine d'indentation à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DumpHierarchy``1(System.Collections.Generic.IEnumerable{Developpez.Dotnet.Collections.EnumerableExtensions.Node{``0}},System.IO.TextWriter)">
            <summary>
            Ecrit une hiérarchie d'objets dans le TextWriter spécifié
            </summary>
            <typeparam name="T">Type des objets de la hiérarchie</typeparam>
            <param name="nodes">Collection de noeuds à afficher</param>
            <param name="writer">TextWriter dans lequel écrire la hiérarchie</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DumpHierarchy``1(System.Collections.Generic.IEnumerable{Developpez.Dotnet.Collections.EnumerableExtensions.Node{``0}},System.String,System.Func{``0,System.String})">
            <summary>
            Ecrit une hiérarchie d'objets dans la console
            </summary>
            <typeparam name="T">Type des objets de la hiérarchie</typeparam>
            <param name="nodes">Collection de noeuds à afficher</param>
            <param name="indent">Chaine d'indentation à utiliser</param>
            <param name="display">Fonction qui sélectionne le membre à afficher</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DumpHierarchy``1(System.Collections.Generic.IEnumerable{Developpez.Dotnet.Collections.EnumerableExtensions.Node{``0}},System.Func{``0,System.String})">
            <summary>
            Ecrit une hiérarchie d'objets dans la console
            </summary>
            <typeparam name="T">Type des objets de la hiérarchie</typeparam>
            <param name="nodes">Collection de noeuds à afficher</param>
            <param name="display">Fonction qui sélectionne le membre à afficher</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DumpHierarchy``1(System.Collections.Generic.IEnumerable{Developpez.Dotnet.Collections.EnumerableExtensions.Node{``0}},System.String)">
            <summary>
            Ecrit une hiérarchie d'objets dans la console
            </summary>
            <typeparam name="T">Type des objets de la hiérarchie</typeparam>
            <param name="nodes">Collection de noeuds à afficher</param>
            <param name="indent">Chaine d'indentation à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DumpHierarchy``1(System.Collections.Generic.IEnumerable{Developpez.Dotnet.Collections.EnumerableExtensions.Node{``0}})">
            <summary>
            Ecrit une hiérarchie d'objets dans la console
            </summary>
            <typeparam name="T">Type des objets de la hiérarchie</typeparam>
            <param name="nodes">Collection de noeuds à afficher</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Flatten``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},Developpez.Dotnet.Collections.TreeTraversalMode,System.Func{``0,System.Int32,``1})">
            <summary>
            Aplanit une hiérarchie d'objets de même type en énumérant tous les noeuds de la hiérarchie, dans l'ordre de parcours indiqué.
            Les éléments renvoyés sont créés à partir d'un noeud et de son niveau dans la hiérarchie.
            </summary>
            <typeparam name="TNode">Type des éléments de la hiérarchie</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence de résultat</typeparam>
            <param name="source">Collection des éléments racines de la hiérarchie</param>
            <param name="childrenSelector">Fonction qui renvoie les enfants d'un noeud de la hiérarchie</param>
            <param name="traversalMode">Mode de parcours de la hiérarchie</param>
            <param name="resultSelector">Fonction qui permet de renvoyer un résultat à partir d'un noeud et de son niveau dans la hiérarchie.</param>
            <returns>Une séquence contenant tous les noeuds de la hiérarchie</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},Developpez.Dotnet.Collections.TreeTraversalMode)">
            <summary>
            Aplanit une hiérarchie d'objets de même type en énumérant tous les noeuds de la hiérarchie, dans l'ordre de parcours indiqué.
            </summary>
            <typeparam name="TNode">Type des éléments de la hiérarchie</typeparam>
            <param name="source">Collection des éléments racines de la hiérarchie</param>
            <param name="childrenSelector">Fonction qui renvoie les enfants d'un noeud de la hiérarchie</param>
            <param name="traversalMode">Mode de parcours de la hiérarchie</param>
            <returns>Une séquence contenant tous les noeuds de la hiérarchie</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indique si une collection est nulle ou vide
            </summary>
            <typeparam name="TSource">Le type des éléments de la collection</typeparam>
            <param name="collection">La collection à tester</param>
            <returns>true si la collection est nulle ou vide, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Indique si une collection est nulle ou vide
            </summary>
            <param name="collection">La collection à tester</param>
            <returns>true si la collection est nulle ou vide, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Fusionne 2 séquences selon la fonction de projection spécifiée, en faisant correspondre
            chaque élément de la première séquence à l'élément de même index dans la deuxième séquence.
            </summary>
            <typeparam name="TFirst">Type des éléments de la première séquence</typeparam>
            <typeparam name="TSecond">Type des éléments de la deuxième séquence</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence fusionnée</typeparam>
            <param name="first">première séquence</param>
            <param name="second">deuxième séquence</param>
            <param name="selector">fonction de projection pour fusionner des éléments des 2 séquences</param>
            <returns>Une séquence d'éléments fusionnée</returns>
            <remarks>
            <para>Si les 2 séquences ne sont pas de même longueur, les éléments surnuméraires de la séquence la plus longue sont ignorés.</para>
            <note>Cette méthode est absente de la version compilée pour .NET 4, car elle est déjà définie dans le framework 4.0 (Enumerable.Zip)</note>
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Ajoute un élément à la suite de la séquence spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'origine</param>
            <param name="item">Elément à ajouter</param>
            <returns>La séquence d'origine suivie de l'élément spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Insère un élément au début de la séquence spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'origine</param>
            <param name="item">Elément à insérer</param>
            <returns>La séquence d'origine précédée de l'élément spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrdered``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Vérifie que la liste est triée, en utilisant le comparateur spécifié
            </summary>
            <typeparam name="TSource">Le type des éléments de la liste</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="comparer">Le comparateur à utiliser</param>
            <returns>true si la liste est triée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrdered``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Vérifie que la liste est triée, en utilisant la comparaison spécifiée
            </summary>
            <typeparam name="TSource">Le type des éléments de la liste</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="comparison">La comparaison à utiliser</param>
            <returns>true si la liste est triée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrdered``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Vérifie que la liste est triée, en utilisant le comparateur par défaut
            </summary>
            <typeparam name="TSource">Le type des éléments de la liste</typeparam>
            <param name="list">La liste à vérifier</param>
            <returns>true si la liste est triée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Vérifie que la liste est triée en ordre descendant, en utilisant le comparateur spécifié
            </summary>
            <typeparam name="TSource">Le type des éléments de la liste</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="comparer">Le comparateur à utiliser</param>
            <returns>true si la liste est triée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedDescending``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Vérifie que la liste est triée en ordre descendant, en utilisant le comparateur par défaut
            </summary>
            <typeparam name="TSource">Le type des éléments de la liste</typeparam>
            <param name="list">La liste à vérifier</param>
            <returns>true si la liste est triée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Vérifie que la liste est triée selon la clé de tri spécifiée, en utilisant le comparateur spécifié
            </summary>
            <typeparam name="TSource">Le type des éléments de la liste</typeparam>
            <typeparam name="TKey">Le type de la clé de tri</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="comparer">Le comparateur à utiliser</param>
            <param name="keySelector">Une fonction pour extraire la clé de tri de l'élément</param>
            <returns>true si la liste est triée selon le critère spécifié, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Vérifie que la liste est triée selon la clé de tri spécifiée, en utilisant le comparateur par défaut
            </summary>
            <typeparam name="TSource">Le type des éléments de la liste</typeparam>
            <typeparam name="TKey">Le type de la clé de tri</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="keySelector">Une fonction pour extraire la clé de tri de l'élément</param>
            <returns>true si la liste est triée selon le critère spécifié, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Vérifie que la liste est triée en ordre descendant selon la clé de tri spécifiée, en utilisant le comparateur spécifié
            </summary>
            <typeparam name="TSource">Le type des éléments de la liste</typeparam>
            <typeparam name="TKey">Le type de la clé de tri</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="comparer">Le comparateur à utiliser</param>
            <param name="keySelector">Une fonction pour extraire la clé de tri de l'élément</param>
            <returns>true si la liste est triée selon le critère spécifié, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IsOrderedByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Vérifie que la liste est triée en ordre descendant selon la clé de tri spécifiée, en utilisant le comparateur par défaut
            </summary>
            <typeparam name="TSource">Le type des éléments de la liste</typeparam>
            <typeparam name="TKey">Le type de la clé de tri</typeparam>
            <param name="list">La liste à vérifier</param>
            <param name="keySelector">Une fonction pour extraire la clé de tri de l'élément</param>
            <returns>true si la liste est triée selon le critère spécifié, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.AggregateByPairs``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``0,``1})">
            <summary>
            Applique une fonction d'accumulation sur une séquence, en prenant les
            éléments consécutifs 2 par 2. La valeur spécifiée pour <c>seed</c> est
            utilisée comme valeur initiale de l'accumulateur.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TAccumulate">Type de l'accumulateur</typeparam>
            <param name="source">Séquence sur laquelle appliquer l'accumulation</param>
            <param name="seed">Valeur initiale de l'accumulateur</param>
            <param name="func">Fonction d'accumulation</param>
            <returns>La valeur finale de l'accumulateur</returns>
            <remarks>La fonction d'accumulation prend en paramètres, dans cet ordre:
            la valeur courante de l'accumulateur, l'élément courant et l'élément précédent.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.AggregateByPairs``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``0,``1},System.Func{``1,``2})">
            <summary>
            Applique une fonction d'accumulation sur une séquence, en prenant les
            éléments consécutifs 2 par 2. La valeur spécifiée pour <c>seed</c> est
            utilisée comme valeur initiale de l'accumulateur, et la fonction spécifiée
            est utilisée pour sélectionner le résultat final
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TAccumulate">Type de l'accumulateur</typeparam>
            <typeparam name="TResult">Type du résultat final</typeparam>
            <param name="source">Séquence sur laquelle appliquer l'accumulation</param>
            <param name="seed">Valeur initiale de l'accumulateur</param>
            <param name="func">Fonction d'accumulation</param>
            <param name="resultSelector">Fonction qui transforme la valeur finale de l'accumulateur en le résultat final</param>
            <returns>La valeur finale de l'accumulateur transformée par <c>resultSelector</c></returns>
            <remarks>La fonction d'accumulation prend en paramètres, dans cet ordre:
            la valeur courante de l'accumulateur, l'élément courant et l'élément précédent.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SelectAggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applique une fonction d'accumulation sur une séquence, en renvoyant la valeur
            de l'accumulateur à chaque étape.
            </summary>
            <typeparam name="TSource">Type des éléments de <c>source</c></typeparam>
            <typeparam name="TAccumulate">Type de l'accumulateur</typeparam>
            <param name="source">Séquence sur laquelle appliquer l'accumulation</param>
            <param name="seed">Valeur initiale de l'accumulateur</param>
            <param name="func">Fonction d'accumulation à appeler sur chaque élément</param>
            <returns>Séquence des valeurs de l'accumulateur à chaque étape.</returns>
            <remarks>Cette méthode est similaire à Enumerable.Aggregate, mais cette dernière ne renvoie que le résultat
            final, alors que SelectAggregate renvoie le résultat de chaque étape.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SelectAggregate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,``1})">
            <summary>
            Applique une fonction d'accumulation sur une séquence, en renvoyant
            la valeur de l'accumulateur à chaque étape.
            </summary>
            <typeparam name="TSource">Type des éléments de <c>source</c></typeparam>
            <typeparam name="TAccumulate">Type de l'accumulateur</typeparam>
            <param name="source">Séquence sur laquelle appliquer l'accumulation</param>
            <param name="func">Fonction d'accumulation à appeler sur chaque élément</param>
            <returns>Séquence des valeurs de l'accumulateur à chaque étape.</returns>
            <remarks>Cette méthode est similaire à Enumerable.Aggregate, mais cette dernière ne renvoie que le résultat
            final, alors que SelectAggregate renvoie le résultat de chaque étape.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SelectAggregate``2(System.Collections.Generic.IEnumerable{``0},``1,``1,System.Func{``1,``1,``0,``1})">
            <summary>
            Applique une fonction d'accumulation sur une séquence, en renvoyant
            la valeur de l'accumulateur à chaque étape. La fonction d'accumulation
            prend en paramètre les 2 valeurs précédentes de l'accumulateur.
            </summary>
            <typeparam name="TSource">Type des éléments de <c>source</c></typeparam>
            <typeparam name="TAccumulate">Type de l'accumulateur</typeparam>
            <param name="source">Séquence sur laquelle appliquer l'accumulation</param>
            <param name="seed1">Valeur initiale de l'accumulateur (itération n-1)</param>
            <param name="seed2">Valeur initiale de l'accumulateur (itération n-2)</param>
            <param name="func">Fonction d'accumulation à appeler sur chaque élément</param>
            <returns>Séquence des valeurs de l'accumulateur à chaque étape.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SelectAggregate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``1,``0,``1})">
            <summary>
            Applique une fonction d'accumulation sur une séquence, en renvoyant
            la valeur de l'accumulateur à chaque étape. La fonction d'accumulation
            prend en paramètre les 2 valeurs précédentes de l'accumulateur.
            </summary>
            <typeparam name="TSource">Type des éléments de <c>source</c></typeparam>
            <typeparam name="TAccumulate">Type de l'accumulateur</typeparam>
            <param name="source">Séquence sur laquelle appliquer l'accumulation</param>
            <param name="func">Fonction d'accumulation à appeler sur chaque élément</param>
            <returns>Séquence des valeurs de l'accumulateur à chaque étape.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Retourne le premier élément d'une séquence, ou la valeur par défaut spécifiée si la séquence ne contient aucun élément.
            </summary>
            <typeparam name="TSource">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner le premier élément</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si la séquence est vide</param>
            <returns>Le premier élément de source s'il existe, sinon la valeur par défaut spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Retourne le premier élément de la séquence à satisfaire à une condition, ou la valeur par défaut spécifiée
            si aucun élément correspondant n'est trouvé.
            </summary>
            <typeparam name="TSource">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner un élément</param>
            <param name="predicate">Condition à vérifier</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si aucun élément ne satisfait la condition</param>
            <returns>Le premier élément de source à satisfaire la condition, ou la valeur par défaut spécifiée si aucun
            élément ne satisfait la condition</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Retourne le dernier élément d'une séquence, ou la valeur par défaut spécifiée si la séquence ne contient aucun élément.
            </summary>
            <typeparam name="TSource">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner le dernier élément</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si la séquence est vide</param>
            <returns>Le dernier élément de source s'il existe, sinon la valeur par défaut spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Retourne le dernier élément de la séquence à satisfaire à une condition, ou la valeur par défaut spécifiée
            si aucun élément correspondant n'est trouvé.
            </summary>
            <typeparam name="TSource">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner un élément</param>
            <param name="predicate">Condition à vérifier</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si aucun élément ne satisfait la condition</param>
            <returns>Le dernier élément de source à satisfaire la condition, ou la valeur par défaut spécifiée si aucun
            élément ne satisfait la condition</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Retourne l'élément situé à un index spécifié dans une séquence, ou la valeur par défaut spécifiée si l'index est hors limites.
            </summary>
            <typeparam name="TSource">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner un élément</param>
            <param name="index">Index de l'élément à récupérer</param>
            <param name="defaultValue">Valeur par défaut à renvoyer si l'index est hors-limite</param>
            <returns>L'élément à l'index spécifié s'il existe ; sinon, la valeur par défaut spécifiée.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Retourne l'unique élément d'une séquence, ou la valeur par défaut spécifiée si la séquence n'a aucun élément.
            Lève une exception si la séquence contient plus d'un élément
            </summary>
            <typeparam name="TSource">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner un élément</param>
            <param name="defaultValue">Valeur par défaut à retourner si la séquence est vide</param>
            <returns>L'unique élément de la séquence, ou la valeur par défaut spécifiée si la séquence est vide</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Retourne l'unique élément d'une séquence qui satisfait une condition, ou la valeur par défaut
            spécifiée si aucun élément ne satisfait la condition.
            Lève une exception si plusieurs éléments satisfont la condition.
            </summary>
            <typeparam name="TSource">Type des éléments de source</typeparam>
            <param name="source">Séquence à partir de laquelle retourner un élément</param>
            <param name="predicate">La condition à vérifier</param>
            <param name="defaultValue">Valeur par défaut à retourner si aucun élément ne satisfait la condition</param>
            <returns>L'unique élément de la séquence, ou la valeur par défaut spécifiée si aucun élément ne satisfait la condition</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Renvoie l'élément de la séquence ayant la plus grande valeur pour la fonction spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de retour de la fonction à évaluer</typeparam>
            <param name="source">Séquence d'éléments</param>
            <param name="selector">Fonction évaluée pour chaque élément</param>
            <returns>L'élément ayant la plus grande valeur pour la fonction spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Renvoie l'élément de la séquence ayant la plus grande valeur pour la fonction spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de retour de la fonction à évaluer</typeparam>
            <param name="source">Séquence d'éléments</param>
            <param name="selector">Fonction évaluée pour chaque élément</param>
            <param name="comparer">Comparateur à utiliser pour le résultat du sélecteur. Si null, le comparateur par défaut sera utilisé</param>
            <returns>L'élément ayant la plus grande valeur pour la fonction spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Renvoie l'élément de la séquence ayant la plus petite valeur pour la fonction spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de retour de la fonction à évaluer</typeparam>
            <param name="source">Séquence d'éléments</param>
            <param name="selector">Fonction évaluée pour chaque élément</param>
            <returns>L'élément ayant la plus petite valeur pour la fonction spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Renvoie l'élément de la séquence ayant la plus petite valeur pour la fonction spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de retour de la fonction à évaluer</typeparam>
            <param name="source">Séquence d'éléments</param>
            <param name="selector">Fonction évaluée pour chaque élément</param>
            <param name="comparer">Comparateur à utiliser pour le résultat du sélecteur. Si null, le comparateur par défaut sera utilisé</param>
            <returns>L'élément ayant la plus petite valeur pour la fonction spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.AllMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Renvoie tous les éléments de la séquence ayant la plus grande valeur pour la fonction spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de retour de la fonction à évaluer</typeparam>
            <param name="source">Séquence d'éléments</param>
            <param name="selector">Fonction évaluée pour chaque élément</param>
            <returns>Collection des éléments ayant la plus grande valeur pour la fonction spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.AllMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Renvoie tous les éléments de la séquence ayant la plus grande valeur pour la fonction spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de retour de la fonction à évaluer</typeparam>
            <param name="source">Séquence d'éléments</param>
            <param name="selector">Fonction évaluée pour chaque élément</param>
            <param name="comparer">Comparateur à utiliser pour le résultat du sélecteur. Si null, le comparateur par défaut sera utilisé</param>
            <returns>Collection des éléments ayant la plus grande valeur pour la fonction spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.AllMinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Renvoie tous les éléments de la séquence ayant la plus petite valeur pour la fonction spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de retour de la fonction à évaluer</typeparam>
            <param name="source">Séquence d'éléments</param>
            <param name="selector">Fonction évaluée pour chaque élément</param>
            <returns>Collection des éléments ayant la plus petite valeur pour la fonction spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.AllMinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Renvoie tous les éléments de la séquence ayant la plus petite valeur pour la fonction spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de retour de la fonction à évaluer</typeparam>
            <param name="source">Séquence d'éléments</param>
            <param name="selector">Fonction évaluée pour chaque élément</param>
            <param name="comparer">Comparateur à utiliser pour le résultat du sélecteur. Si null, le comparateur par défaut sera utilisé</param>
            <returns>Collection des éléments la plus petite valeur pour la fonction spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Renvoie la valeur maximale de la séquence selon le comparateur spécifié
            </summary>
            <typeparam name="TSource">Type des éléments de la liste</typeparam>
            <param name="source">Séquence d'éléments</param>
            <param name="comparer">Comparateur à utiliser</param>
            <returns>La valeur maximale de la séquence selon le comparateur spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Renvoie la valeur minimale de la séquence selon le comparateur spécifié
            </summary>
            <typeparam name="TSource">Type des éléments de la liste</typeparam>
            <param name="source">Séquence d'éléments</param>
            <param name="comparer">Comparateur à utiliser</param>
            <returns>La valeur minimale de la séquence selon le comparateur spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.AsIndexed``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Associe à chaque élément de la séquence son index dans la séquence
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'éléments à indexer</param>
            <returns>Une séquence projetée où chaque élément est associé à son index</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Unindex``1(System.Collections.Generic.IEnumerable{Developpez.Dotnet.Collections.EnumerableExtensions.IndexedItem{``0}})">
            <summary>
            Dissocie chaque élément de la séquence de son index. Cette méthode effectue l'opération inverse de AsIndexed.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'éléments à dissocier de leur index</param>
            <returns>Une séquence d'éléments sans leur index</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Extrait un élément sur <c>frequency</c> à partir de la séquence d'entrée, à partir du premier élément.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="frequency">Fréquence des éléments à extraire</param>
            <returns>Une séquence contenant un élément sur <c>frequency</c> de la séquence d'entrée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Extrait un élément sur <c>frequency</c> à partir de la séquence d'entrée, à partir de la position spécifiée.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="frequency">Fréquence des éléments à extraire</param>
            <param name="start">Position du premier élément à extraire</param>
            <returns>Une séquence contenant un élément sur <c>frequency</c> de la séquence d'entrée à partir de la position spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SkipEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Renvoie les éléments de la séquence d'entrée, en sautant un élément sur <c>frequency</c> à partir de la position spécifiée.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="frequency">Fréquence des éléments à sauter</param>
            <returns>Une séquence les éléments de la séquence d'entrée, en en sautant un sur <c>frequency</c> à partir de la position spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SkipEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Renvoie les éléments de la séquence d'entrée, en sautant un élément sur <c>frequency</c> à partir du premier élément.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="frequency">Fréquence des éléments à sauter</param>
            <param name="start">Position du premier élément à sauter</param>
            <returns>Une séquence les éléments de la séquence d'entrée, en en sautant un sur <c>frequency</c> à partir du premier.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.GroupEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Renvoie les éléments de la séquence d'entrée par groupes de <c>groupLength</c> éléments.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'éléments à grouper</param>
            <param name="groupLength">Longueur des groupes</param>
            <returns>Une séquence de groupes de <c>groupLength</c> éléments</returns>
            <remarks>Si le nombre total d'éléments dans la séquence n'est pas un multiple de <c>groupLength</c>, le dernier groupe renvoyé contiendra moins de <c>groupLength</c> éléments.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SkipFirst``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Renvoie les éléments de la séquence d'entrée en sautant le premier.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <returns>La séquence d'entrée sans le premier élément</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SkipFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Renvoie les éléments de la séquence d'entrée en sautant le premier élément qui vérifie le prédicat spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="predicate">Prédicat à évaluer pour déterminer s'il faut sauter l'élément</param>
            <returns>La séquence d'entrée sans le premier élément qui vérifie le prédicat</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Renvoie les éléments de la séquence d'entrée en sautant le dernier élément qui vérifie le prédicat spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="predicate">Prédicat à évaluer pour déterminer s'il faut sauter l'élément</param>
            <returns>La séquence d'entrée sans le dernier élément qui vérifie le prédicat</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SkipAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Renvoie les éléments de la séquence d'entrée en sautant l'élément qui se trouve à la position spécifiée.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="index">Position de l'élément à sauter</param>
            <returns>La séquence d'entrée sans l'élément qui se trouvait à la position spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Renvoie le nombre spécifié d'éléments de la fin d'une séquence
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="count">Nombre maximum d'éléments à renvoyer</param>
            <returns>Les <c>count</c> derniers éléments de la séquence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
            Remplace toutes les occurrences de l'élément spécifié dans une séquence par un autre élément spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="oldItem">Elément à remplacer</param>
            <param name="newItem">Elément qui remplace l'ancien élément</param>
            <returns>Séquence dans laquelle l'ancien élément a été remplacé par le nouveau</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Remplace toutes les occurrences de l'élément spécifié dans une séquence par un autre élément spécifié,
            en utilisant le comparateur d'égalité spécifié
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="oldItem">Elément à remplacer</param>
            <param name="newItem">Elément qui remplace l'ancien élément</param>
            <param name="comparer">Comprateur d'égalité à utiliser</param>
            <returns>Séquence dans laquelle l'ancien élément a été remplacé par le nouveau</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ReplaceAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Remplace l'élément à la position spécifiée d'une séquence par un élément spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="index">Position à laquelle effectuer le remplacement</param>
            <param name="item">Elément qui remplace l'élément à la position spécifiée</param>
            <returns>Séquence dans laquelle un élément a été remplacé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.InsertAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Insère un élément à la position spécifiée d'une séquence.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="index">Position à laquelle insérer l'élément</param>
            <param name="item">Elément à insérer</param>
            <returns>Séquence dans laquelle un élément a été inséré</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.InsertBeforeFirst``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
             Insère un nouvel élément dans une séquence juste avant la première occurrence de l'élément de référence spécifié
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="refItem">Elément de référence avant lequel on insère le nouvel élément</param>
            <param name="newItem">Nouvel élément à insérer</param>
            <returns>Séquence avec le nouvel élément placé avant la première occurrence de l'élément de référence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.InsertBeforeFirst``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
             Insère un nouvel élément dans une séquence juste avant la première occurrence de l'élément de référence spécifié,
             en utilisant le comparateur d'égalité spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="refItem">Elément de référence avant lequel on insère le nouvel élément</param>
            <param name="newItem">Nouvel élément à insérer</param>
             <param name="comparer">Comparateur d'égalité à utiliser</param>
            <returns>Séquence avec le nouvel élément placé avant la première occurrence de l'élément de référence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.InsertAfterFirst``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
             Insère un nouvel élément dans une séquence juste après la première occurrence de l'élément de référence spécifié
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="refItem">Elément de référence après lequel on insère le nouvel élément</param>
            <param name="newItem">Nouvel élément à insérer</param>
            <returns>Séquence avec le nouvel élément placé après la première occurrence de l'élément de référence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.InsertAfterFirst``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
             Insère un nouvel élément dans une séquence juste après la première occurrence de l'élément de référence spécifié,
             en utilisant le comparateur d'égalité spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="refItem">Elément de référence après lequel on insère le nouvel élément</param>
            <param name="newItem">Nouvel élément à insérer</param>
            <param name="comparer">Comparateur d'égalité à utiliser</param>
            <returns>Séquence avec le nouvel élément placé après la première occurrence de l'élément de référence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.InsertBefore``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
             Insère un nouvel élément dans une séquence avant chaque occurrence de l'élément de référence spécifié
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="refItem">Elément de référence avant lequel on insère le nouvel élément</param>
            <param name="newItem">Nouvel élément à insérer</param>
            <returns>Séquence avec le nouvel élément placé avant chaque occurrence de l'élément de référence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.InsertBefore``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
             Insère un nouvel élément dans une séquence avant chaque occurrence de l'élément de référence spécifié,
             en utilisant le comparateur d'égalité spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="refItem">Elément de référence avant lequel on insère le nouvel élément</param>
            <param name="newItem">Nouvel élément à insérer</param>
             <param name="comparer">Comparateur d'égalité à utiliser</param>
            <returns>Séquence avec le nouvel élément placé avant chaque occurrence de l'élément de référence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.InsertAfter``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
             Insère un nouvel élément dans une séquence après chaque occurrence de l'élément de référence spécifié
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="refItem">Elément de référence après lequel on insère le nouvel élément</param>
            <param name="newItem">Nouvel élément à insérer</param>
            <returns>Séquence avec le nouvel élément placé après chaque occurrence de l'élément de référence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.InsertAfter``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
             Insère un nouvel élément dans une séquence après chaque occurrence de l'élément de référence spécifié,
             en utilisant le comparateur d'égalité spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="refItem">Elément de référence après lequel on insère le nouvel élément</param>
            <param name="newItem">Nouvel élément à insérer</param>
            <param name="comparer">Comparateur d'égalité à utiliser</param>
            <returns>Séquence avec le nouvel élément placé après chaque occurrence de l'élément de référence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indique si une séquence ne contient aucun élément
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence à vérifier</param>
            <returns>true si <c>source</c> ne contient aucun élément ; sinon, false</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Indique s'il n'existe dans la séquence aucun élément qui satisfait le prédicat
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence à vérifier</param>
            <param name="predicate">Prédicat à évaluer pour chaque élément de la séquence</param>
            <returns>true si la séquence ne contient aucun élément qui satisfait le prédicat ; sinon, false</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indique si une séquence contient au moins un des éléments spécifiés, en utilisant le comparateur par défaut
            </summary>
            <typeparam name="TSource">Type des élements de la séquence</typeparam>
            <param name="source">Séquence dans laquelle rechercher des éléments</param>
            <param name="items">Eléments à rechercher</param>
            <returns>true si <c>source</c> contient au moins un des éléments de <c>items</c>, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Indique si une séquence contient au moins un des éléments spécifiés, en utilisant le comparateur spécifié
            </summary>
            <typeparam name="TSource">Type des élements de la séquence</typeparam>
            <param name="source">Séquence dans laquelle rechercher des éléments</param>
            <param name="items">Eléments à rechercher</param>
            <param name="comparer">Comparateur à utiliser</param>
            <returns>true si <c>source</c> contient au moins un des éléments de <c>items</c>, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Renvoie l'index de la première occurence de l'élément spécifié dans la séquence
            </summary>
            <typeparam name="T">Le type des éléments de la séquence</typeparam>
            <param name="source">La séquence dans laquelle chercher l'élément</param>
            <param name="item">L'élément à rechercher</param>
            <returns>L'index de la première occurence de l'élément dans la séquence, ou -1 si l'élément ne s'y trouve pas.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Renvoie l'index de la première occurence de l'élément spécifié dans la séquence, en utilisant le comparateur spécifié.
            </summary>
            <typeparam name="T">Le type des éléments de la séquence</typeparam>
            <param name="source">La séquence dans laquelle chercher l'élément</param>
            <param name="item">L'élément à rechercher</param>
            <param name="comparer">Comparateur à utiliser pour tester l'égalité des éléments</param>
            <returns>L'index de la première occurence de l'élément dans la séquence, ou -1 si l'élément ne s'y trouve pas.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Renvoie l'index du premier élément pour lequel le prédicat spécifié est vérifié
            </summary>
            <typeparam name="T">Le type des éléments de la séquence</typeparam>
            <param name="source">La séquence dans laquelle chercher l'élément</param>
            <param name="predicate">Le prédicat à évaluer</param>
            <returns>L'index du premier élément pour lequel le prédicat est vérifié, ou -1 si aucun élément ne vérifie le prédicat.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Renvoie l'index de la dernière occurence de l'élément spécifié dans la séquence
            </summary>
            <typeparam name="T">Le type des éléments de la séquence</typeparam>
            <param name="source">La séquence dans laquelle chercher l'élément</param>
            <param name="item">L'élément à rechercher</param>
            <returns>L'index de la dernière occurence de l'élément dans la séquence, ou -1 si l'élément ne s'y trouve pas.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Renvoie l'index de la dernière occurence de l'élément spécifié dans la séquence, en utilisant le comparateur spécifié.
            </summary>
            <typeparam name="T">Le type des éléments de la séquence</typeparam>
            <param name="source">La séquence dans laquelle chercher l'élément</param>
            <param name="item">L'élément à rechercher</param>
            <param name="comparer">Comparateur à utiliser pour tester l'égalité des éléments</param>
            <returns>L'index de la dernière occurence de l'élément dans la séquence, ou -1 si l'élément ne s'y trouve pas.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Renvoie l'index du dernier élément pour lequel le prédicat spécifié est vérifié
            </summary>
            <typeparam name="T">Le type des éléments de la séquence</typeparam>
            <param name="source">La séquence dans laquelle chercher l'élément</param>
            <param name="predicate">Le prédicat à évaluer</param>
            <returns>L'index du dernier élément pour lequel le prédicat est vérifié, ou -1 si aucun élément ne vérifie le prédicat.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.CopyTo``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32)">
            <summary>
            Copie tous les éléments de la séquence vers le tableau spécifié
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence à partir de laquelle copier les éléments</param>
            <param name="array">Tableau vers lequel copier les éléments</param>
            <param name="arrayIndex">Position dans le tableau à partir de laquelle les éléments sont copiés</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applique l'action spécifiée "au passage" sur chaque élément de la séquence
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'origine</param>
            <param name="action">Action à effectuer sur chaque élément de la séquence</param>
            <returns>La séquence d'origine</returns>
            <remarks>Cette méthode s'utilise uniquement avec des types référence. Pour les types valeur,
            le paramètre de l'action doit être passé par référence.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Apply``1(System.Collections.Generic.IEnumerable{``0},Developpez.Dotnet.Collections.EnumerableExtensions.ByRefAction{``0})">
            <summary>
            Applique l'action spécifiée "au passage" sur chaque élément de la séquence
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'origine</param>
            <param name="action">Action à effectuer sur chaque élément de la séquence</param>
            <returns>La séquence d'origine</returns>
            <remarks>Cette méthode s'utilise uniquement avec des types valeur. Pour les types référence,
            le paramètre de l'action doit être passé par valeur.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IndexOfSequence``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Renvoie la position de début de la première occurence de la sous-séquence spécifiée dans la séquence source,
            en utilisant le comparateur par défaut.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence source dans laquelle on recherche une sous-séquence</param>
            <param name="sequence">Sous-séquence à rechercher</param>
            <returns>La position de la première occurence de <c>sequence</c> dans <c>source</c>, ou -1 si la sous-séquence n'est pas trouvée.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IndexOfSequence``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Renvoie la position de début de la première occurence de la sous-séquence spécifiée dans la séquence source,
            en utilisant le comparateur spécifié.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence source dans laquelle on recherche une sous-séquence</param>
            <param name="sequence">Sous-séquence à rechercher</param>
            <param name="comparer">Comparateur à utiliser</param>
            <returns>La position de la première occurence de <c>sequence</c> dans <c>source</c>, ou -1 si la sous-séquence n'est pas trouvée.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Divise une séquence d'éléments en plusieurs parties à chaque fois qu'un séparateur
            est rencontré.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'éléments à diviser</param>
            <param name="isSeparator">Prédicat qui détermine si un élément de la liste est un séparateur</param>
            <returns>Une séquence de parties de la séquence d'origine</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Retourne des éléments distincts d'une séquence, en les comparant selon la clé spécifiée
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="source">Séquence de laquelle supprimer les éléments en double</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <returns>Une séquence contenant des éléments distincts de la séquence d'origine</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Retourne des éléments distincts d'une séquence, en les comparant selon la clé spécifiée,
            et en comparant les clés avec le comparateur spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="source">Séquence de laquelle supprimer les éléments en double</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <param name="keyComparer">Comparateur à utiliser pour comparer les clés. Si null, le comparateur par défaut sera utilisé</param>
            <returns>Une séquence contenant des éléments distincts de la séquence d'origine</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Retourne des éléments de la première séquence qui n'appartiennent pas à la deuxième, en les comparant selon la clé spécifiée.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="source">Première séquence</param>
            <param name="other">Deuxième séquence</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <returns>Une séquence contenant les éléments de la première séquence qui n'appartiennent pas à la deuxième</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Retourne des éléments de la première séquence qui n'appartiennent pas à la deuxième, en les comparant selon la clé spécifiée,
            et en comparant les clés avec le comparateur spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="source">Première séquence</param>
            <param name="other">Deuxième séquence</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <param name="keyComparer">Comparateur à utiliser pour comparer les clés. Si null, le comparateur par défaut sera utilisé</param>
            <returns>Une séquence contenant les éléments de la première séquence qui n'appartiennent pas à la deuxième</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produit l'union de deux séquences en comparant les éléments selon la clé spécifiée.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="source">Première séquence</param>
            <param name="other">Deuxième séquence</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <returns>Séquence constituée des éléments des deux séquences d'entrée, sans les doublons</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produit l'union de deux séquences en comparant les éléments selon la clé spécifiée, et en comparant les clés à l'aide du comparateur d'égalité spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="source">Première séquence</param>
            <param name="other">Deuxième séquence</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <param name="keyComparer">Comparateur à utiliser pour comparer les clés. Si null, le comparateur par défaut sera utilisé</param>
            <returns>Séquence constituée des éléments des deux séquences d'entrée, sans les doublons</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produit l'intersection de deux séquences en comparant les éléments selon la clé spécifiée.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="source">Première séquence</param>
            <param name="other">Deuxième séquence</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <returns>Séquence constituée des éléments des deux séquences présents dans les deux séquences d'entrée, sans les doublons</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produit l'intersection de deux séquences en comparant les éléments selon la clé spécifiée, et en comparant les clés à l'aide du comparateur d'égalité spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="source">Première séquence</param>
            <param name="other">Deuxième séquence</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <param name="keyComparer">Comparateur à utiliser pour comparer les clés. Si null, le comparateur par défaut sera utilisé</param>
            <returns>Séquence constituée des éléments des deux séquences présents dans les deux séquences d'entrée, sans les doublons</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SequenceEqualBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Détermine si deux séquences sont égales en comparant les éléments selon la clé spécifiée.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="source">Première séquence</param>
            <param name="other">Deuxième séquence</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <returns>true si les deux séquences source sont de même longueur et si leurs éléments ont la même valeur pour la clé spécifiée ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.SequenceEqualBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Détermine si deux séquences sont égales en comparant les éléments selon la clé spécifiée, et en comparant les clés à l'aide du comparateur d'égalité spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="source">Première séquence</param>
            <param name="other">Deuxième séquence</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <param name="keyComparer">Comparateur à utiliser pour comparer les clés. Si null, le comparateur par défaut sera utilisé</param>
            <returns>true si les deux séquences source sont de même longueur et si leurs éléments ont la même valeur pour la clé spécifiée ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.GetElementType``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Renvoie le type des éléments d'une séquence
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence dont on veut obtenir le type des éléments</param>
            <returns>Le type des éléments de la séquence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ElementDefaultValue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Renvoie la valeur par défaut du type des éléments d'une séquence. Utile pour déclarer une variable d'un type anonyme.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence</param>
            <returns>La valeur par défaut du type des éléments de la séquence</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.CommonPrefix``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Renvoie le préfixe commun de deux séquences, en utilisant le comparateur par défaut
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Première séquence</param>
            <param name="other">Deuxième séquence</param>
            <returns>Une séquence contenant les premiers éléments de <c>source</c> tant qu'ils sont égaux à ceux de <c>other</c></returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.CommonPrefix``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Renvoie le préfixe commun de deux séquences, en utilisant le comparateur spécifié
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="source">Première séquence</param>
            <param name="other">Deuxième séquence</param>
            <param name="comparer">Comparateur à utiliser pour déterminer l'égalité de deux éléments</param>
            <returns>Une séquence contenant les premiers éléments de <c>source</c> tant qu'ils sont égaux à ceux de <c>other</c></returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.RankBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Int32,``2})">
            <summary>
            Associe à chaque élément d'une séquence son rang selon la clé spécifiée
            en ordre croissant.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence d'entrée</typeparam>
            <typeparam name="TKey">Type de la clé de tri</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence de sortie</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="keySelector">Fonction qui sélectionne la clé de tri</param>
            <param name="resultSelector">Fonction qui associe le rang à chaque élément</param>
            <returns>La séquence des éléments d'entrée associés à leur rang</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.RankBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Func{``0,System.Int32,``2})">
            <summary>
            Associe à chaque élément d'une séquence son rang selon la clé spécifiée
            en ordre croissant, en utilisant le comparateur spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence d'entrée</typeparam>
            <typeparam name="TKey">Type de la clé de tri</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence de sortie</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="keySelector">Fonction qui sélectionne la clé de tri</param>
            <param name="comparer">Comparateur utilisé pour comparer les valeurs de la clé de tri</param>
            <param name="resultSelector">Fonction qui associe le rang à chaque élément</param>
            <returns>La séquence des éléments d'entrée associés à leur rang</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.RankByDescending``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Func{``0,System.Int32,``2})">
            <summary>
            Associe à chaque élément d'une séquence son rang selon la clé spécifiée
            en ordre décroissant, en utilisant le comparateur spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence d'entrée</typeparam>
            <typeparam name="TKey">Type de la clé de tri</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence de sortie</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="keySelector">Fonction qui sélectionne la clé de tri</param>
            <param name="comparer">Comparateur utilisé pour comparer les valeurs de la clé de tri</param>
            <param name="resultSelector">Fonction qui associe le rang à chaque élément</param>
            <returns>La séquence des éléments d'entrée associés à leur rang</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.RankByDescending``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Int32,``2})">
            <summary>
            Associe à chaque élément d'une séquence son rang selon la clé spécifiée
            en ordre décroissant.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence d'entrée</typeparam>
            <typeparam name="TKey">Type de la clé de tri</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence de sortie</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="keySelector">Fonction qui sélectionne la clé de tri</param>
            <param name="resultSelector">Fonction qui associe le rang à chaque élément</param>
            <returns>La séquence des éléments d'entrée associés à leur rang</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DenseRankBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Int32,``2})">
            <summary>
            Associe à chaque élément d'une séquence son rang, sans vide dans le classement,
            selon la clé spécifiée en ordre croissant.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence d'entrée</typeparam>
            <typeparam name="TKey">Type de la clé de tri</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence de sortie</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="keySelector">Fonction qui sélectionne la clé de tri</param>
            <param name="resultSelector">Fonction qui associe le rang à chaque élément</param>
            <returns>La séquence des éléments d'entrée associés à leur rang</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DenseRankBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Func{``0,System.Int32,``2})">
            <summary>
            Associe à chaque élément d'une séquence son rang, sans vide dans le classement,
             selon la clé spécifiée en ordre croissant, en utilisant le comparateur spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence d'entrée</typeparam>
            <typeparam name="TKey">Type de la clé de tri</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence de sortie</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="keySelector">Fonction qui sélectionne la clé de tri</param>
            <param name="comparer">Comparateur utilisé pour comparer les valeurs de la clé de tri</param>
            <param name="resultSelector">Fonction qui associe le rang à chaque élément</param>
            <returns>La séquence des éléments d'entrée associés à leur rang</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DenseRankByDescending``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Func{``0,System.Int32,``2})">
            <summary>
            Associe à chaque élément d'une séquence son rang, sans vide dans le classement,
            selon la clé spécifiée en ordre décroissant, en utilisant le comparateur spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence d'entrée</typeparam>
            <typeparam name="TKey">Type de la clé de tri</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence de sortie</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="keySelector">Fonction qui sélectionne la clé de tri</param>
            <param name="comparer">Comparateur utilisé pour comparer les valeurs de la clé de tri</param>
            <param name="resultSelector">Fonction qui associe le rang à chaque élément</param>
            <returns>La séquence des éléments d'entrée associés à leur rang</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DenseRankByDescending``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Int32,``2})">
            <summary>
            Associe à chaque élément d'une séquence son rang, sans vide dans le classement,
            selon la clé spécifiée en ordre décroissant.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence d'entrée</typeparam>
            <typeparam name="TKey">Type de la clé de tri</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence de sortie</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="keySelector">Fonction qui sélectionne la clé de tri</param>
            <param name="resultSelector">Fonction qui associe le rang à chaque élément</param>
            <returns>La séquence des éléments d'entrée associés à leur rang</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LeftOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            Effectue la jointure externe gauche entre 2 séquences. Chaque élément de la première séquence est associé
            à chaque élément correspondant de la seconde, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans la seconde séquence.
            </summary>
            <typeparam name="TOuter">Type des éléments de la première séquence</typeparam>
            <typeparam name="TInner">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="outer">Première séquence à joindre</param>
            <param name="inner">Seconde séquence à joindre</param>
            <param name="outerKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="innerKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LeftOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},``1)">
            <summary>
            Effectue la jointure externe gauche entre 2 séquences. Chaque élément de la première séquence est associé
            à chaque élément correspondant de la seconde, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans la seconde séquence.
            </summary>
            <typeparam name="TOuter">Type des éléments de la première séquence</typeparam>
            <typeparam name="TInner">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="outer">Première séquence à joindre</param>
            <param name="inner">Seconde séquence à joindre</param>
            <param name="outerKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="innerKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <param name="defaultInner">Valeur par défaut quand aucun élément correspondant n'existe dans la seconde séquence</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LeftOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Effectue la jointure externe gauche entre 2 séquences. Chaque élément de la première séquence est associé
            à chaque élément correspondant de la seconde, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans la seconde séquence.
            </summary>
            <typeparam name="TOuter">Type des éléments de la première séquence</typeparam>
            <typeparam name="TInner">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="outer">Première séquence à joindre</param>
            <param name="inner">Seconde séquence à joindre</param>
            <param name="outerKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="innerKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <param name="comparer">Comparateur utilisé pour comparer les clés de jointure</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.LeftOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},``1,System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Effectue la jointure externe gauche entre 2 séquences. Chaque élément de la première séquence est associé
            à chaque élément correspondant de la seconde, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans la seconde séquence.
            </summary>
            <typeparam name="TOuter">Type des éléments de la première séquence</typeparam>
            <typeparam name="TInner">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="outer">Première séquence à joindre</param>
            <param name="inner">Seconde séquence à joindre</param>
            <param name="outerKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="innerKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <param name="defaultInner">Valeur par défaut quand aucun élément correspondant n'existe dans la seconde séquence</param>
            <param name="comparer">Comparateur utilisé pour comparer les clés de jointure</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.RightOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            Effectue la jointure externe droite entre 2 séquences. Chaque élément de la seconde séquence est associé
            à chaque élément correspondant de la première, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans la première séquence.
            </summary>
            <typeparam name="TOuter">Type des éléments de la première séquence</typeparam>
            <typeparam name="TInner">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="outer">Première séquence à joindre</param>
            <param name="inner">Seconde séquence à joindre</param>
            <param name="outerKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="innerKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.RightOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},``0)">
            <summary>
            Effectue la jointure externe droite entre 2 séquences. Chaque élément de la seconde séquence est associé
            à chaque élément correspondant de la première, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans la première séquence.
            </summary>
            <typeparam name="TOuter">Type des éléments de la première séquence</typeparam>
            <typeparam name="TInner">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="outer">Première séquence à joindre</param>
            <param name="inner">Seconde séquence à joindre</param>
            <param name="outerKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="innerKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <param name="defaultOuter">Valeur par défaut quand aucun élément correspondant n'existe dans la première séquence</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.RightOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Effectue la jointure externe droite entre 2 séquences. Chaque élément de la seconde séquence est associé
            à chaque élément correspondant de la première, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans la première séquence.
            </summary>
            <typeparam name="TOuter">Type des éléments de la première séquence</typeparam>
            <typeparam name="TInner">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="outer">Première séquence à joindre</param>
            <param name="inner">Seconde séquence à joindre</param>
            <param name="outerKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="innerKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <param name="comparer">Comparateur utilisé pour comparer les clés de jointure</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.RightOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},``0,System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Effectue la jointure externe droite entre 2 séquences. Chaque élément de la seconde séquence est associé
            à chaque élément correspondant de la première, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans la première séquence.
            </summary>
            <typeparam name="TOuter">Type des éléments de la première séquence</typeparam>
            <typeparam name="TInner">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="outer">Première séquence à joindre</param>
            <param name="inner">Seconde séquence à joindre</param>
            <param name="outerKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="innerKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <param name="defaultOuter">Valeur par défaut quand aucun élément correspondant n'existe dans la première séquence</param>
            <param name="comparer">Comparateur utilisé pour comparer les clés de jointure</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FullOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,``0,``1,``3})">
            <summary>
            Effectue la jointure externe totale entre 2 séquences. Chaque élément de la chaque séquence est associé
            à chaque élément correspondant de l'autre, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans l'autre séquence.
            </summary>
            <typeparam name="TLeft">Type des éléments de la première séquence</typeparam>
            <typeparam name="TRight">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="left">Première séquence à joindre</param>
            <param name="right">Seconde séquence à joindre</param>
            <param name="leftKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="rightKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FullOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,``0,``1,``3},``0,``1)">
            <summary>
            Effectue la jointure externe totale entre 2 séquences. Chaque élément de la chaque séquence est associé
            à chaque élément correspondant de l'autre, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans l'autre séquence.
            </summary>
            <typeparam name="TLeft">Type des éléments de la première séquence</typeparam>
            <typeparam name="TRight">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="left">Première séquence à joindre</param>
            <param name="right">Seconde séquence à joindre</param>
            <param name="leftKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="rightKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <param name="defaultLeft">Valeur par défaut quand aucun élément correspondant n'existe dans la première séquence</param>
            <param name="defaultRight">Valeur par défaut quand aucun élément correspondant n'existe dans la seconde séquence</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FullOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Effectue la jointure externe totale entre 2 séquences. Chaque élément de la chaque séquence est associé
            à chaque élément correspondant de l'autre, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans l'autre séquence.
            </summary>
            <typeparam name="TLeft">Type des éléments de la première séquence</typeparam>
            <typeparam name="TRight">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="left">Première séquence à joindre</param>
            <param name="right">Seconde séquence à joindre</param>
            <param name="leftKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="rightKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <param name="comparer">Comparateur utilisé pour comparer les clés de jointure</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.FullOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,``0,``1,``3},``0,``1,System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Effectue la jointure externe totale entre 2 séquences. Chaque élément de la chaque séquence est associé
            à chaque élément correspondant de l'autre, ou à une valeur par défaut s'il n'y a pas d'élément correspondant
            dans l'autre séquence.
            </summary>
            <typeparam name="TLeft">Type des éléments de la première séquence</typeparam>
            <typeparam name="TRight">Type des éléments de la seconde séquence</typeparam>
            <typeparam name="TKey">Type de la clé de jointure</typeparam>
            <typeparam name="TResult">Type des éléments de la séquence résultat</typeparam>
            <param name="left">Première séquence à joindre</param>
            <param name="right">Seconde séquence à joindre</param>
            <param name="leftKeySelector">Function de sélection de la clé de jointure pour la première séquence</param>
            <param name="rightKeySelector">Function de sélection de la clé de jointure pour la seconde séquence</param>
            <param name="resultSelector">Fonction de sélection du résultat à partir de deux éléments correspondants</param>
            <param name="defaultLeft">Valeur par défaut quand aucun élément correspondant n'existe dans la première séquence</param>
            <param name="defaultRight">Valeur par défaut quand aucun élément correspondant n'existe dans la seconde séquence</param>
            <param name="comparer">Comparateur utilisé pour comparer les clés de jointure</param>
            <returns>Le résultat de la jointure</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DistinctUntilChanged``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Renvoie une séquence qui contient seulement des valeurs contiguës distinctes.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <returns>Une séquence qui contient seulement des valeurs contiguës distinctes</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DistinctUntilChanged``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Renvoie une séquence qui contient seulement des valeurs contiguës distinctes selon le comparateur spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="comparer">Comparateur à utiliser pour comparer les éléments. Si null, le comparateur par défaut sera utilisé</param>
            <returns>Une séquence qui contient seulement des valeurs contiguës distinctes</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DistinctUntilChanged``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Renvoie une séquence qui contient seulement des valeurs contiguës distinctes selon le comparateur spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé de comparaison</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <returns>Une séquence qui contient seulement des valeurs contiguës distinctes</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.DistinctUntilChanged``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Renvoie une séquence qui contient seulement des valeurs contiguës distinctes selon le comparateur spécifié.
            </summary>
            <typeparam name="TSource">Type des éléments de la séquence</typeparam>
            <typeparam name="TKey">Type de la clé de comparaison</typeparam>
            <param name="source">Séquence d'entrée</param>
            <param name="keySelector">Fonction qui renvoie la clé à utiliser pour comparer les éléments</param>
            <param name="comparer">Comparateur à utiliser pour comparer les clés. Si null, le comparateur par défaut sera utilisé</param>
            <returns>Une séquence qui contient seulement des valeurs contiguës distinctes</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1)">
            <summary>
            Effectue une recherche binaire sur une liste triée pour trouver un élément selon
            la valeur d'une de ses propriétés. La liste doit être triée selon cette propriété.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <typeparam name="TKey">Type de la clé de recherche</typeparam>
            <param name="list">Liste dans laquelle rechercher l'élément</param>
            <param name="keySelector">Fonction permettant d'obtenir la clé de recherche</param>
            <param name="key">Valeur de la clé recherchée</param>
            <returns>Le premier élément correspondant, s'il existe. Sinon, lève une InvalidOperationException.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.BinarySearchOrDefault``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1)">
            <summary>
            Effectue une recherche binaire sur une liste triée pour trouver un élément selon
            la valeur d'une de ses propriétés. La liste doit être triée selon cette propriété.
            Si aucun élément correspondant n'est trouvé, une valeur par défaut est renvoyée.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <typeparam name="TKey">Type de la clé de recherche</typeparam>
            <param name="list">Liste dans laquelle rechercher l'élément</param>
            <param name="keySelector">Fonction permettant d'obtenir la clé de recherche</param>
            <param name="key">Valeur de la clé recherchée</param>
            <returns>Le premier élément correspondant, s'il existe. Sinon, la valeur par défaut du type T.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.BinarySearchOrDefault``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1,``0)">
            <summary>
            Effectue une recherche binaire sur une liste triée pour trouver un élément selon
            la valeur d'une de ses propriétés. La liste doit être triée selon cette propriété.
            Si aucun élément correspondant n'est trouvé, la valeur par défaut spécifiée est renvoyée.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <typeparam name="TKey">Type de la clé de recherche</typeparam>
            <param name="list">Liste dans laquelle rechercher l'élément</param>
            <param name="keySelector">Fonction permettant d'obtenir la clé de recherche</param>
            <param name="key">Valeur de la clé recherchée</param>
            <param name="defaultValue">La valeur par défaut à renvoyer si aucun élément correspondant n'est trouvé</param>
            <returns>Le premier élément correspondant, s'il existe. Sinon, la valeur par défaut spécifiée.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.TryBinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1,``0@)">
            <summary>
            Effectue une recherche binaire sur une liste triée pour tenter de trouver un élément
            selon la valeur d'une de ses propriétés. La liste doit être triée selon cette propriété.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <typeparam name="TKey">Type de la clé de recherche</typeparam>
            <param name="list">Liste dans laquelle rechercher l'élément</param>
            <param name="keySelector">Fonction permettant d'obtenir la clé de recherche</param>
            <param name="key">Valeur de la clé recherchée</param>
            <param name="result">Paramètre de sortie qui prend la valeur du premier élément trouvé.</param>
            <returns>true si un élément correspondant est trouvé. Sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.QuickSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Trie la liste en utilisant l'algorithme Quicksort
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="list">Liste à trier</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.QuickSortBy``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Trie la liste selon la clé spécifiée en utilisant l'algorithme Quicksort
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <typeparam name="TKey">Type de la clé de tri</typeparam>
            <param name="list">Liste à trier</param>
            <param name="keySelector">Fonction qui renvoie la clé de tri</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.QuickSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Trie la liste en utilisant l'algorithme Quicksort, avec le comparateur spécifié
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="list">Liste à trier</param>
            <param name="comparer">Comparateur à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.QuickSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Trie la liste en utilisant l'algorithme Quicksort, avec la fonction de comparaison spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="list">Liste à trier</param>
            <param name="comparison">Fonction de comparaison à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ajoute plusieurs éléments à une collection
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <param name="collection">Collection à laquelle ajouter des éléments</param>
            <param name="items">Eléments à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.RemoveRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Retire d'une liste le nombre d'éléments spécifié à partir de la position spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="list">Liste de laquelle on retire des éléments</param>
            <param name="index">Position à partir de laquelle on retire des éléments</param>
            <param name="count">Nombre d'éléments à retirer</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.InsertRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insère les éléments spécifiés dans une liste à partir de la position spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="list">Liste dans laquelle on insère les éléments</param>
            <param name="index">Position à partir de laquelle insérer les éléments</param>
            <param name="items">Éléments à insérer</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Retire d'une collection tous les éléments qui vérifient le prédicat spécifié
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="collection">Collection de laquelle on retire des éléments</param>
            <param name="predicate">Prédicat qui indique si un élément doit être retiré</param>
            <returns>Le nombre d'éléments retirés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Mélange une liste.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="list">La liste à mélanger</param>
            <remarks>Cette méthode utilise l'algorithme de Fisher–Yates (http://en.wikipedia.org/wiki/Fisher-Yates_shuffle)
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Mélange une liste en spécifiant le générateur de nombres aléatoires à utiliser.
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
            <param name="list">La liste à mélanger</param>
            <param name="rnd">Le générateur de nombres aléatoires à utiliser</param>
            <remarks>Cette méthode utilise l'algorithme de Fisher–Yates (http://en.wikipedia.org/wiki/Fisher-Yates_shuffle)
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Permute deux éléments d'une liste
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
            <param name="list">La liste contenant les éléments à permuter</param>
            <param name="index1">L'index du premier élément</param>
            <param name="index2">L'index du second élément</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.Synchronized``1(System.Collections.Generic.IList{``0})">
            <summary>
            Obtient une version synchronisée de la liste
            </summary>
            <typeparam name="T">Type générique de la liste</typeparam>
            <param name="list">liste</param>
            <returns>liste synchronisée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},Developpez.Dotnet.Threading.ThreadedWorker{``0}.CallBackMethod)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <typeparam name="T">Type de collection</typeparam>
            <param name="enumerable">Séquence d'éléments sur laquelle effectuer une action en parallèle</param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},Developpez.Dotnet.Threading.ThreadedWorker{``0}.CallBackMethod,System.Boolean)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <typeparam name="T">Type de collection</typeparam>
            <param name="enumerable">Séquence d'éléments sur laquelle effectuer une action en parallèle</param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
            <param name="waitForCompletion">True si l'opération doit être synchrone (attente de la fin de l'opération sur tous les éléments)
            ou non (aucune attente, l'exécution se poursuit)</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},Developpez.Dotnet.Threading.ThreadedWorker{``0}.CallBackMethod,System.Boolean,System.Int32)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <typeparam name="T">Type de collection</typeparam>
            <param name="enumerable">Séquence d'éléments sur laquelle effectuer une action en parallèle</param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
            <param name="waitForCompletion">True si l'opération doit être synchrone (attente de la fin de l'opération sur tous les éléments)
            ou non (aucune attente, l'exécution se poursuit)</param>
            <param name="maxWorkerThreads">Nombre maximum de thread de travail dédié à cette tâche. Toute valeure inférieure à 1 est ignorée</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel(System.Collections.IEnumerable,Developpez.Dotnet.Threading.ThreadedWorker{System.Object}.CallBackMethod)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <param name="enumerable">Séquence d'éléments sur laquelle effectuer une action en parallèle</param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel(System.Collections.IEnumerable,Developpez.Dotnet.Threading.ThreadedWorker{System.Object}.CallBackMethod,System.Boolean)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <param name="enumerable">Séquence d'éléments sur laquelle effectuer une action en parallèle</param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
            <param name="waitForCompletion">True si l'opération doit être synchrone (attente de la fin de l'opération sur tous les éléments)
            ou non (aucune attente, l'exécution se poursuit)</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.EnumerableExtensions.ForEachParallel(System.Collections.IEnumerable,Developpez.Dotnet.Threading.ThreadedWorker{System.Object}.CallBackMethod,System.Boolean,System.Int32)">
            <summary>
            Exécute la méthode callback de manière parallele sur tous les éléments
            de la collection
            </summary>
            <param name="enumerable">Séquence d'éléments sur laquelle effectuer une action en parallèle</param>
            <param name="callback">Méthode à rappeller sur chacun des éléments</param>
            <param name="waitForCompletion">True si l'opération doit être synchrone (attente de la fin de l'opération sur tous les éléments)
            ou non (aucune attente, l'exécution se poursuit)</param>
            <param name="maxWorkerThreads">Nombre maximum de thread de travail dédié à cette tâche. Toute valeure inférieure à 1 est ignorée</param>
        </member>
        <member name="T:Developpez.Dotnet.Collections.EnumerableExtensions.Node`1">
            <summary>
            Représente un noeud dans une hiérarchie d'objets
            </summary>
            <typeparam name="T">Type des objets de la hiérarchie</typeparam>
        </member>
        <member name="P:Developpez.Dotnet.Collections.EnumerableExtensions.Node`1.Item">
            <summary>
            Objet contenu par ce noeud
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.EnumerableExtensions.Node`1.Level">
            <summary>
            Niveau du noeud dans la hiérarchie (0 pour un noeud racine)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.EnumerableExtensions.Node`1.Parent">
            <summary>
            Noeud parent dans la hiérarchie (null pour un noeud racine)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.EnumerableExtensions.Node`1.Children">
            <summary>
            Noeuds enfants dans la hiérarchie
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.EnumerableExtensions.IndexedItem`1">
            <summary>
            Associe un index à un élément d'une séquence
            </summary>
            <typeparam name="T">Type des éléments de la séquence</typeparam>
        </member>
        <member name="P:Developpez.Dotnet.Collections.EnumerableExtensions.IndexedItem`1.Index">
            <summary>
            Index de l'élément
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.EnumerableExtensions.IndexedItem`1.Value">
            <summary>
            Valeur de l'élément
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.EnumerableExtensions.ByRefAction`1">
            <summary>
            Représente une action avec un paramètre passé par référence
            </summary>
            <typeparam name="T">Type du paramètre</typeparam>
            <param name="param">Paramètre de l'action</param>
        </member>
        <member name="T:Developpez.Dotnet.Collections.ImmutableList`1">
            <summary>
            Représente une liste immuable d'objets. Toutes les méthodes qui modifient la liste
            renvoient une copie modifiée.
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialise une nouvelle instance de ImmutableList&lt;T&gt;
            </summary>
            <param name="items">Les éléments de la liste</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.Add(`0)">
            <summary>
            Renvoie une copie de la liste en y ajoutant l'élément spécifié
            </summary>
            <param name="item">Elément à ajouter</param>
            <returns>La nouvelle liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.Remove(`0)">
            <summary>
            Renvoie une copie de la liste en en retirant l'élément spécifié
            </summary>
            <param name="item">Elément à retirer</param>
            <returns>La nouvelle liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.Insert(System.Int32,`0)">
            <summary>
            Renvoie une copie de la liste en y insérant l'élément spécifié à la position spécifiée
            </summary>
            <param name="index">Position à laquelle insérer l'élément</param>
            <param name="item">Elément à insérer</param>
            <returns>La nouvelle liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.RemoveAt(System.Int32)">
            <summary>
            Renvoie une copie de la liste en en retirant l'élément à la position spécifiée
            </summary>
            <param name="index">Position de l'élément à retirer</param>
            <returns>La nouvelle liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.Replace(System.Int32,`0)">
            <summary>
            Renvoie une copie de la liste en remplaçant l'élément à la position spécifiée
            </summary>
            <param name="index">Position à laquelle remplacer un élément</param>
            <param name="item">Elément qui remplace l'élément existant</param>
            <returns>La nouvelle liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.IndexOf(`0)">
            <summary>
            Renvoie la position de la première occurence de l'élément spécifié
            </summary>
            <param name="item">Elément recherché</param>
            <returns>La position de l'élément s'il est présent dans la liste, sinon -1</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.Contains(`0)">
            <summary>
            Indique si la liste contient l'élément spécifié
            </summary>
            <param name="item">Elément recherché</param>
            <returns>true si l'élément est présent dans la liste, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copie les éléments de la liste vers le tableau spécifié
            </summary>
            <param name="array">Tableau vers lequel les éléments sont copiés</param>
            <param name="arrayIndex">Position dans le tableau à laquelle la copie commence</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.GetEnumerator">
            <summary>
            Renvoie un énumérateur pour parcourir les éléments de la liste
            </summary>
            <returns>Un énumérateur pour parcourir les éléments de la liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.Equals(Developpez.Dotnet.Collections.ImmutableList{`0})">
            <summary>
            Détermine si cette liste est égale à la liste spécifiée. Deux listes immuables sont
            considérées égales si et seulement si elles comportent les mêmes éléments dans le
            même ordre.
            </summary>
            <param name="other">La liste avec laquelle on compare la liste courante</param>
            <returns>true si les deux listes sont égales, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Opération non valide.
            </summary>
            <param name="index">Position à laquelle insérer un élément</param>
            <param name="item">Elément à insérer</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            Opération non valide.
            </summary>
            <param name="index">Position à laquelle supprimer un élément</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Opération non valide.
            </summary>
            <param name="item">Elément à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            Opération non valide.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Opération non valide.
            </summary>
            <param name="item">Elément à retirer</param>
            <returns>true si l'élément a été retiré, sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Renvoie un énumérateur pour parcourir les éléments de la liste
            </summary>
            <returns>Un énumérateur pour parcourir les éléments de la liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.Equals(System.Object)">
            <summary>
            Détermine si cette instance est égale à l'objet spécifié. Deux listes immuables sont
            considérées égales si et seulement si elles comportent les mêmes éléments, dans le
            même ordre.
            </summary>
            <param name="obj">L'objet avec lequel on compare cette instance</param>
            <returns>true si <c>obj</c> est égal à cette instance, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList`1.GetHashCode">
            <summary>
            Renvoie le code de hachage de cette liste.
            </summary>
            <returns>Le code de hachage de cette liste</returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.ImmutableList`1.Count">
            <summary>
            Renvoie le nombre d'éléments de la liste
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Renvoie l'élément à la position spécifiée. L'accesseur set est une opération non valide.
            </summary>
            <param name="index">Position de l'élément à accéder</param>
            <returns>La valeur de l'élément à l'index spécifié</returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Indique si la collection est en lecture seule. Renvoie toujours true.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.ImmutableList">
            <summary>
            Fournit des méthodes statiques pour créer des listes immuables
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList.CreateFrom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Crée une liste immuable à partir de la séquence spécifiée
            </summary>
            <typeparam name="T">Type des éléments</typeparam>
            <param name="source">Séquence à partir de laquelle la liste immuable est crée</param>
            <returns>Une liste immuable contenant les éléments spécifiés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList.Create``1(``0[])">
            <summary>
            Crée une liste immuable à partir des éléments spécifiés
            </summary>
            <typeparam name="T">Type des éléments</typeparam>
            <param name="items">Eléments à partir desquels la liste immuable est crée</param>
            <returns>Une liste immuable contenant les éléments spécifiés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ImmutableList.AsImmutable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Renvoie une liste immuable contenant les éléments d'une séquence
            </summary>
            <typeparam name="T">Type des éléments</typeparam>
            <param name="source">Séquence à partir de laquelle la liste immuable est crée</param>
            <returns>Une liste immuable contenant les éléments de la séquence</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.KeyEqualityComparer`2">
            <summary>
            Comparateur d'égalité qui comparer des objets selon la clé spécifiée
            </summary>
            <typeparam name="T">Type des objets comparés</typeparam>
            <typeparam name="TKey">Type de la clé de comparaison</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Crée une nouvelle instance de KeyEqualityComparer
            </summary>
            <param name="keySelector">Fonction qui renvoie la clé à partir d'un objet</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Crée une nouvelle instance de KeyEqualityComparer
            </summary>
            <param name="keySelector">Fonction qui renvoie la clé à partir d'un objet</param>
            <param name="keyComparer">Comparateur à utiliser pour tester l'égalité de 2 clés.</param>
            <remarks>Si keyComparer est null, le comparateur par défaut est utilisé.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.KeyEqualityComparer`2.Equals(`0,`0)">
            <summary>
            Détermine si les objets spécifiés sont égaux.
            </summary>
            <param name="x">Le premier objet à comparer</param>
            <param name="y">Le deuxième objet à comparer</param>
            <returns>true si les objets spécifiés sont égaux ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.KeyEqualityComparer`2.GetHashCode(`0)">
            <summary>
            Retourne un code de hachage pour l'objet spécifié.
            </summary>
            <param name="obj">Objet pour lequel un code de hachage doit être retourné.</param>
            <returns>Code de hachage pour l'objet spécifié.</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.KeyEqualityComparer`1">
            <summary>
            Classe statique pour faciliter la création de KeyEqualityComparer quand le type de la clé est anonyme
            </summary>
            <typeparam name="T">Type des objets comparés</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.KeyEqualityComparer`1.Create``1(System.Func{`0,``0})">
            <summary>
            Crée un KeyEqualityComparer qui utilise la clé spécifié
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="keySelector">Fonction qui renvoie la clé à partir d'un objet</param>
            <returns>Un comparateur d'égalité qui utilise la clé spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.KeyEqualityComparer`1.Create``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Crée un KeyEqualityComparer qui utilise la clé spécifié
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="keySelector">Fonction qui renvoie la clé à partir d'un objet</param>
            <param name="keyComparer">Comparateur à utiliser pour tester l'égalité de 2 clés.</param>
            <returns>Un comparateur d'égalité qui utilise la clé spécifiée</returns>
            <remarks>Si keyComparer est null, le comparateur par défaut est utilisé.</remarks>
        </member>
        <member name="T:Developpez.Dotnet.Collections.KeyEqualityComparer">
            <summary>
            Classe statique pour faciliter la création de KeyEqualityComparer pour des objets de type anonyme
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.KeyEqualityComparer.Create``2(``0,System.Func{``0,``1})">
            <summary>
            Crée un KeyEqualityComparer qui utilise la clé spécifié
            </summary>
            <typeparam name="T">Type des objets comparés</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="dummy">Objet modèle pour déterminer le type des objets comparés</param>
            <param name="keySelector">Fonction qui renvoie la clé à partir d'un objet</param>
            <returns>Un comparateur d'égalité qui utilise la clé spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.KeyEqualityComparer.Create``2(``0,System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Crée un KeyEqualityComparer qui utilise la clé spécifié
            </summary>
            <typeparam name="T">Type des objets comparés</typeparam>
            <typeparam name="TKey">Type de la clé</typeparam>
            <param name="dummy">Objet modèle pour déterminer le type des objets comparés</param>
            <param name="keySelector">Fonction qui renvoie la clé à partir d'un objet</param>
            <param name="keyComparer">Comparateur à utiliser pour tester l'égalité de 2 clés.</param>
            <returns>Un comparateur d'égalité qui utilise la clé spécifiée</returns>
            <remarks>Si keyComparer est null, le comparateur par défaut est utilisé.</remarks>
        </member>
        <member name="T:Developpez.Dotnet.Collections.OrderedDictionary`2">
            <summary>
            Dictionnaire qui maintient ses éléments dans l'ordre où ils ont été ajoutés
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialise une nouvelle instance vide de OrderedDictionary, qui utilise
            le comparateur spécifié pour tester l'égalité des clés.
            </summary>
            <param name="comparer">Comparateur utilisé pour tester l'égalité des clés</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.#ctor">
            <summary>
            Initialise une nouvelle instance vide de OrderedDictionary
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialise une nouvelle instance de OrderedDictionary qui contient les
            éléments du dictionnaire spécifié et utilise le comparateur spécifié
            pour tester l'égalité des clés.
            </summary>
            <param name="dictionary">Dictionnaire à partir duquel copier les éléments</param>
            <param name="comparer">Comparateur utilisé pour tester l'égalité des clés</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initialise une nouvelle instance de OrderedDictionary qui contient les
            éléments du dictionnaire spécifié.
            </summary>
            <param name="dictionary">Dictionnaire à partir duquel copier les éléments</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.GetEnumerator">
            <summary>
            Retourne un énumérateur qui parcourt le dictionnaire
            </summary>
            <returns>Un énumerateur pour parcourir le dictionnaire</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retourne un énumérateur qui parcourt le dictionnaire
            </summary>
            <returns>Un énumerateur pour parcourir le dictionnaire</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Ajoute la paire clé/valeur spécifiée au dictionnaire 
            </summary>
            <param name="item">Paire clé/valeur à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.Clear">
            <summary>
            Supprime toutes les clés et les valeurs du dictionnaire.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Détermine si le dictionnaire contient la paire clé/valeur spécifiée.
            </summary>
            <param name="item">Paire clé/valeur recherchée</param>
            <returns>true si le dictionnaire contient la paire clé/valeur, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copie les éléments du dictionnaire dans un tableau, à partir de la position spécifiée
            </summary>
            <param name="array">Tableau de destination</param>
            <param name="arrayIndex">Index du tableau où commencer la copie</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Supprime du dictionnaire la paire clé/valeur spécifiée.
            </summary>
            <param name="item">Paire clé/valeur</param>
            <returns>true si la recherche et la suppression de l'élément réussissent ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Détermine si le dictionnaire contient la clé spécifiée. 
            </summary>
            <param name="key">Clé à rechercher</param>
            <returns>true si le dictionnaire contient un élément correspondant à la clé spécifiée ; sinon, false.</returns>
            <remarks>Cette méthode est proche d'une opération en O(1).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Ajoute la clé et la valeur spécifiées au dictionnaire. 
            </summary>
            <param name="key">Clé de l'élément à ajouter. </param>
            <param name="value">Valeur de l'élément à ajouter. La valeur peut être null pour les types référence.</param>
            <remarks>Cette méthode est proche d'une opération en O(1) si la capacité interne est suffisante.
            Si la capacité doit être augmentée, cette méthode devient une opération en O(n).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.Remove(`0)">
            <summary>
            Supprime du dictionnaire la valeur ayant la clé spécifiée. 
            </summary>
            <param name="key">Clé de l'élément à supprimer.</param>
            <returns>true si la recherche et la suppression de l'élément réussissent ; sinon, false.</returns>
            <remarks>Cette méthode est proche d'une opération en O(1).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Obtient la valeur associée à la clé spécifiée. 
            </summary>
            <param name="key">Clé de la valeur à obtenir.</param>
            <param name="value">Paramètre de sortie auquel est affecté la valeur trouvée</param>
            <returns>true si le dictionnaire contient un élément correspondant à la clé spécifiée ; sinon, false.</returns>
            <remarks>Cette méthode est proche d'une opération en O(1).</remarks>
        </member>
        <member name="P:Developpez.Dotnet.Collections.OrderedDictionary`2.Count">
            <summary>
            Obtient le nombre de paires clé/valeur contenues dans le dictionnaire.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.OrderedDictionary`2.IsReadOnly">
            <summary>
            Obtient une valeur indiquant si le dictionnaire est en lecture seule.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.OrderedDictionary`2.Item(`0)">
            <summary>
            Obtient ou définit la valeur associée à la clé spécifiée.
            </summary>
            <param name="key">Clé de l'élément à obtenir ou à définir</param>
            <value>Valeur associée à la clé spécifiée. Si la clé spécifiée est introuvable, une opération Get retourne KeyNotFoundException et une opération Set crée un nouvel élément avec la clé spécifiée.</value>
            <remarks>Obtenir la valeur de cette propriété est proche d'une opération en O(1). Définir la valeur
            de cette propriété est proche d'une opération en O(1) si la capacité interne est suffisante
            ou que la clé est déjà présente dans le dictionnaire. Si la clé n'est pas déjà présente et que
            la capacité doit être augmentée, définir la valeur devient une opération en O(n).</remarks>
        </member>
        <member name="P:Developpez.Dotnet.Collections.OrderedDictionary`2.Keys">
            <summary>
            Obtient une collection contenant les clés du dictionnaire.
            </summary>
            <remarks>Les clés sont renvoyées dans l'ordre où elles ont été ajoutées.</remarks>
        </member>
        <member name="P:Developpez.Dotnet.Collections.OrderedDictionary`2.Values">
            <summary>
            Obtient une collection contenant les valeurs du dictionnaire.
            </summary>
            <remarks>Les valeurs sont renvoyées dans l'ordre où elles ont été ajoutées.</remarks>
        </member>
        <member name="T:Developpez.Dotnet.Collections.QueueSet`1">
            <summary>
            Représente une collection de type file (premier entré, premier sorti, FIFO),
            où chaque élément n'est présent qu'une fois.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <remarks>Si un élément déjà présent est ajouté à nouveau, il est replacé à la fin de la pile</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.#ctor">
            <summary>
            Crée une nouvelle instance de <c>QueueSet&lt;T&gt;</c> avec le comparateur d'égalité par défaut
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Crée une nouvelle instance de <c>QueueSet&lt;T&gt;</c> avec le comparateur d'égalité spécifié
            </summary>
            <param name="comparer">Comparateur à utiliser pour tester l'égalité des éléments</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.Enqueue(`0)">
            <summary>
            Ajoute une élément à la fin de la file. Si l'élément est déjà présent, il est replacé à la fin de la file
            </summary>
            <param name="item">Élément à ajouter</param>
            <returns>true si l'élément a été ajouté, false s'il était déjà présent</returns>
            <remarks>Cette méthode est proche d'une opération en O(1) si la capacité interne est suffisante.
            Si la capacité doit être augmentée, cette méthode devient une opération en O(n).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.Dequeue">
            <summary>
            Supprime et retourne l'élément se trouvant en tête de la file
            </summary>
            <returns>L'élément qui se trouvait en tête de la file</returns>
            <remarks>Cette méthode est proche d'une opération en O(1)</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.Peek">
            <summary>
            Retourne l'élément se trouvant en tête de la file, sans le supprimer
            </summary>
            <returns>L'élément se trouvant en tête de la file</returns>
            <remarks>Cette méthode est une opération en O(1).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.GetEnumerator">
            <summary>
            Renvoie un énumérateur pour parcourir les éléments de la collection
            </summary>
            <returns>Un énumérateur pour parcourir les éléments de la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Renvoie un énumérateur pour parcourir les éléments de la collection
            </summary>
            <returns>Un énumérateur pour parcourir les éléments de la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Ajoute un élément à la collection
            </summary>
            <param name="item">Élément à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Supprime un élément de la collection
            </summary>
            <param name="item">Élément à supprimer</param>
            <returns>true si l'élément a été supprimé, false s'il n'appartenait pas à la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.Clear">
            <summary>
            Supprime tous les éléments de la collection
            </summary>
            <remarks>Cette méthode est une opération en O(n).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.Contains(`0)">
            <summary>
            Indique si l'élément est présent dans la collection
            </summary>
            <param name="item">Élément recherché</param>
            <returns>true si l'élément est présent dans la collection, sinon false</returns>
            <remarks>Cette méthode est proche d'une opération en O(1).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.QueueSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copie les éléments de la collection vers le tableau spécifié
            </summary>
            <param name="array">Tableau vers lequel les éléments sont copiés</param>
            <param name="arrayIndex">Position dans le tableau à laquelle la copie commence</param>
            <remarks>Cette méthode est une opération en O(n).</remarks>
        </member>
        <member name="P:Developpez.Dotnet.Collections.QueueSet`1.Count">
            <summary>
            Renvoie le nombre d'éléments dans la collection
            </summary>
            <remarks>Obtenir la valeur de cette propriété est une opération en O(1).</remarks>
        </member>
        <member name="P:Developpez.Dotnet.Collections.QueueSet`1.IsReadOnly">
            <summary>
            Indique si la collection est en lecture seule
            </summary>
            <remarks>Obtenir la valeur de cette propriété est une opération en O(1).</remarks>
        </member>
        <member name="T:Developpez.Dotnet.Collections.ReverseComparer`1">
            <summary>
            Comparateur qui inverse l'ordre défini par le comparateur de base passé en
            paramètre du constructeur.
            </summary>
            <typeparam name="T">Type des éléments à comparer</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
             Crée une instance de ReverseComparer
            </summary>
            <param name="baseComparer">Comparateur à inverser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReverseComparer`1.Compare(`0,`0)">
            <summary>
            Compare deux instances de T, en inversant l'ordre du comparateur de base
            </summary>
            <param name="x">Premier élément à comparer</param>
            <param name="y">Second élément à comparer</param>
            <returns>-1 si x &gt; y, 1 si x &lt; y, 0 si x == y</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.SortableBindingList`1">
            <summary>
            Représente une liste supportant les scénarios de liaison de données
            ainsi que le tri
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SortableBindingList`1.#ctor">
            <summary>
            Initialise une nouvelle instance de SortableBindingList&lt;T&gt;.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SortableBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initialise une nouvelle instance de SortableBindingList&lt;T&gt; avec la liste spécifiée.
            </summary>
            <param name="list">La liste d'éléments à contenir dans la SortableBindingList&lt;T&gt;</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SortableBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Trie les éléments de la liste selon la propriété et la direction spécifiées
            </summary>
            <param name="prop">La propriété selon laquelle trier la liste</param>
            <param name="direction">La direction selon laquelle trier la liste</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SortableBindingList`1.RemoveSortCore">
            <summary>
            Retire le tri appliqué avec ApplySortCore.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SortableBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
            Insère l'élément spécifié dans la liste à la position spécifiée
            </summary>
            <param name="index">Position à laquelle insérer l'élément</param>
            <param name="item">Élément à insérer</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SortableBindingList`1.RemoveItem(System.Int32)">
            <summary>
            Retire de la liste l'élément qui se trouve à la position spécifiée
            </summary>
            <param name="index">Position de l'élément à retirer</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SortableBindingList`1.SetItem(System.Int32,`0)">
            <summary>
            Remplace l'élément à la position spécifiée par l'élément spécifié
            </summary>
            <param name="index">Position de l'élément à remplacer</param>
            <param name="item">Nouvel élément à placer à cette position</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SortableBindingList`1.ClearItems">
            <summary>
            Retire tous les éléments de la liste
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SortableBindingList`1.SupportsSortingCore">
            <summary>
            Obtient une valeur indiquant si la liste supporte le tri.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SortableBindingList`1.IsSortedCore">
            <summary>
            Obtient une valeur indiquant si la liste est triée
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SortableBindingList`1.SortDirectionCore">
            <summary>
            Obtient la direction du tri si la liste est triée
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SortableBindingList`1.SortPropertyCore">
            <summary>
            Obtient la propriété selon laquelle la liste est triée
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.StackSet`1">
            <summary>
            Représente une collection de type pile (dernier entré, premier sorti, LIFO),
            où chaque élément n'est présent qu'une fois.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <remarks>Si un élément déjà présent est ajouté à nouveau, il est replacé au sommet de la pile</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.#ctor">
            <summary>
            Crée une nouvelle instance de <c>StackSet&lt;T&gt;</c> avec le comparateur d'égalité par défaut
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Crée une nouvelle instance de <c>StackSet&lt;T&gt;</c> avec le comparateur d'égalité spécifié
            </summary>
            <param name="comparer">Comparateur à utiliser pour tester l'égalité des éléments</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.Push(`0)">
            <summary>
            Ajoute une élément au sommet de la pile. Si l'élément est déjà présent, il est replacé au sommet de la pile.
            </summary>
            <param name="item">Élément à ajouter</param>
            <returns>true si l'élément a été ajouté, false s'il était déjà présent</returns>
            <remarks>Cette méthode est proche d'une opération en O(1) si la capacité interne est suffisante.
            Si la capacité doit être augmentée, cette méthode devient une opération en O(n).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.Pop">
            <summary>
            Supprime et retourne l'élément se trouvant au sommet de la pile.
            </summary>
            <returns>L'élément qui se trouvait au sommet de la pile</returns>
            <remarks>Cette méthode est proche d'une opération en O(1)</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.Peek">
            <summary>
            Retourne l'élément se trouvant au sommet de la pile, sans le supprimer
            </summary>
            <returns>L'élément se trouvant au sommet de la pile</returns>
            <remarks>Cette méthode est une opération en O(1).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.GetEnumerator">
            <summary>
            Renvoie un énumérateur pour parcourir les éléments de la collection
            </summary>
            <returns>Un énumérateur pour parcourir les éléments de la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Renvoie un énumérateur pour parcourir les éléments de la collection
            </summary>
            <returns>Un énumérateur pour parcourir les éléments de la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Ajoute un élément à la collection
            </summary>
            <param name="item">Élément à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Supprime un élément de la collection
            </summary>
            <param name="item">Élément à supprimer</param>
            <returns>true si l'élément a été supprimé, false s'il n'appartenait pas à la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.Clear">
            <summary>
            Supprime tous les éléments de la collection
            </summary>
            <remarks>Cette méthode est une opération en O(n).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.Contains(`0)">
            <summary>
            Indique si l'élément est présent dans la collection
            </summary>
            <param name="item">Élément recherché</param>
            <returns>true si l'élément est présent dans la collection, sinon false</returns>
            <remarks>Cette méthode est proche d'une opération en O(1).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.StackSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copie les éléments de la collection vers le tableau spécifié
            </summary>
            <param name="array">Tableau vers lequel les éléments sont copiés</param>
            <param name="arrayIndex">Position dans le tableau à laquelle la copie commence</param>
            <remarks>Cette méthode est une opération en O(n).</remarks>
        </member>
        <member name="P:Developpez.Dotnet.Collections.StackSet`1.Count">
            <summary>
            Renvoie le nombre d'éléments dans la collection
            </summary>
            <remarks>Obtenir la valeur de cette propriété est une opération en O(1).</remarks>
        </member>
        <member name="P:Developpez.Dotnet.Collections.StackSet`1.IsReadOnly">
            <summary>
            Indique si la collection est en lecture seule
            </summary>
            <remarks>Obtenir la valeur de cette propriété est une opération en O(1).</remarks>
        </member>
        <member name="T:Developpez.Dotnet.Collections.TreeTraversalMode">
            <summary>
            Cette énumération définit les options de parcours d'un arbre
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Collections.TreeTraversalMode.DepthFirst">
            <summary>
            Parcours en profondeur : on parcourt les enfants de chaque noeud avant
            de passer au noeud de même niveau suivant.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Collections.TreeTraversalMode.BreadthFirst">
            <summary>
            Parcours en largeur : on parcourt d'abord tous les noeuds d'un niveau avant
            de passer à ceux du niveau inférieur.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.TrieDictionary`1">
            <summary>
            Représente un dictionnaire dont les clés sont de type string, implémenté
            à l'aide d'un trie (aussi appelé arbre préfixe) pour permettre une recherche
            rapide par préfixe de la clé.
            </summary>
            <typeparam name="TValue">Type des valeurs du dictionnaire</typeparam>
            <remarks>Les opérations de recherche par préfixe de clé dans un TrieDictionary
            sont en O(p), p étant la longueur du préfixe recherché. En effet, la complexité
            ne dépend pas du nombre d'éléments dans le dictionnaire, ce qui permet d'obtenir
            de très bonnes performances même avec des volumes de données importants.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.#ctor">
            <summary>
            Crée une nouvelle instance de TrieDictionary
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
            Crée une nouvelle instance de TrieDictionary contenant les éléments spécifiés
            </summary>
            <param name="entries">Eléments à ajouter dans le dictionnaire</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.GetEnumerator">
            <summary>
            Retourne un énumérateur qui parcourt le dictionnaire
            </summary>
            <returns>Un énumerateur pour parcourir le dictionnaire</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retourne un énumérateur qui parcourt le dictionnaire
            </summary>
            <returns>Un énumerateur pour parcourir le dictionnaire</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Ajoute la paire clé/valeur spécifiée au dictionnaire 
            </summary>
            <param name="item">Paire clé/valeur à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.Clear">
            <summary>
            Supprime toutes les clés et les valeurs du dictionnaire.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Détermine si le dictionnaire contient la paire clé/valeur spécifiée.
            </summary>
            <param name="item">Paire clé/valeur recherchée</param>
            <returns>true si le dictionnaire contient la paire clé/valeur, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
            <summary>
            Copie les éléments du dictionnaire dans un tableau, à partir de la position spécifiée
            </summary>
            <param name="array">Tableau de destination</param>
            <param name="arrayIndex">Index du tableau où commencer la copie</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Supprime du dictionnaire la paire clé/valeur spécifiée.
            </summary>
            <param name="item">Paire clé/valeur</param>
            <returns>true si la recherche et la suppression de l'élément réussissent ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.ContainsKey(System.String)">
            <summary>
            Détermine si le dictionnaire contient la clé spécifiée. 
            </summary>
            <param name="key">Clé à rechercher</param>
            <returns>true si le dictionnaire contient un élément correspondant à la clé spécifiée ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.Add(System.String,`0)">
            <summary>
            Ajoute la clé et la valeur spécifiées au dictionnaire. 
            </summary>
            <param name="key">Clé de l'élément à ajouter. </param>
            <param name="value">Valeur de l'élément à ajouter. La valeur peut être null pour les types référence.</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.Remove(System.String)">
            <summary>
            Supprime du dictionnaire la valeur ayant la clé spécifiée. 
            </summary>
            <param name="key">Clé de l'élément à supprimer.</param>
            <returns>true si la recherche et la suppression de l'élément réussissent ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.TryGetValue(System.String,`0@)">
            <summary>
            Obtient la valeur associée à la clé spécifiée. 
            </summary>
            <param name="key">Clé de la valeur à obtenir.</param>
            <param name="value">Paramètre de sortie auquel est affecté la valeur trouvée</param>
            <returns>true si le dictionnaire contient un élément correspondant à la clé spécifiée ; sinon, false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.ContainsPrefix(System.String)">
            <summary>
            Indique si le dictionnaire contient des paires clé/valeur dont la
            clé commence par le préfixe spécifié.
            </summary>
            <param name="prefix">Préfixe recherché</param>
            <returns>true si le dictionnaire contient le préfixe spécifié, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.RemovePrefix(System.String)">
            <summary>
            Enlève toutes les paires clé/valeur dont la clé commence par le
            préfixe spécifié
            </summary>
            <param name="prefix">Préfixe à supprimer</param>
            <returns>Nombre d'éléments supprimés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.TrieDictionary`1.FindPrefix(System.String)">
            <summary>
            Retourne toutes les paires clé/valeur dont la clé commence par le
            préfixe spécifié.
            </summary>
            <param name="prefix">Préfixe recherché</param>
            <returns>Séquence contenant toutes les paires clé/valeur correspondant au préfixe</returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.TrieDictionary`1.Count">
            <summary>
            Obtient le nombre de paires clé/valeur contenues dans le dictionnaire.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.TrieDictionary`1.IsReadOnly">
            <summary>
            Obtient une valeur indiquant si le dictionnaire est en lecture seule.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.TrieDictionary`1.Item(System.String)">
            <summary>
            Obtient ou définit la valeur associée à la clé spécifiée.
            </summary>
            <param name="key">Clé de l'élément à obtenir ou à définir</param>
            <value>Valeur associée à la clé spécifiée. Si la clé spécifiée est introuvable, une opération Get retourne KeyNotFoundException et une opération Set crée un nouvel élément avec la clé spécifiée.</value>
        </member>
        <member name="P:Developpez.Dotnet.Collections.TrieDictionary`1.Keys">
            <summary>
            Obtient une collection contenant les clés du dictionnaire.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.TrieDictionary`1.Values">
            <summary>
            Obtient une collection contenant les valeurs du dictionnaire.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1">
            <summary>
            Classe de base pour des collections réalisant la virtualisation des données. L'implémentation de base est en lecture seule.
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <remarks>Les données sont chargées page par page au fur et à mesure des besoins. Seules les pages adjacentes à la dernière page accédée sont conservées en mémoire.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.#ctor(System.Int32)">
            <summary>
            Initialise une nouvelle instance de VirtualizingCollectionBase
            </summary>
            <param name="pageSize">Nombre d'éléments par page de données</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.GetEnumerator">
            <summary>
            Renvoie un énumérateur pour parcourir les éléments de la collection
            </summary>
            <returns>Un énumérateur pour parcourir les éléments de la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Renvoie un énumérateur pour parcourir les éléments de la collection
            </summary>
            <returns>Un énumérateur pour parcourir les éléments de la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.Add(`0)">
            <summary>
            Non supporté. Ajoute l'élément spécifié à la collection.
            </summary>
            <param name="item">Élément à ajouter</param>
            <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.Clear">
            <summary>
            Non supporté. Vide la collection.
            </summary>
            <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.Contains(`0)">
            <summary>
            Indique si la collection contient l'élément spécifié
            </summary>
            <param name="item">Élément dont on veut tester la présence</param>
            <returns>true si l'élément est présent dans la collection, sinon false</returns>
            <remarks>Renvoie toujours false dans l'implémentation de base.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copie les éléments de la collection vers le tableau spécifié
            </summary>
            <param name="array">Tableau vers lequel les éléments sont copiés</param>
            <param name="arrayIndex">Position dans le tableau à laquelle la copie commence</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.Remove(`0)">
            <summary>
            Non supporté. Retire l'élément spécifié de la collection.
            </summary>
            <param name="item">Élément à retirer.</param>
            <returns>true si l'élément était présent et a été supprimé, sinon false</returns>
            <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.IndexOf(`0)">
            <summary>
            Renvoie la position de l'élément spécifié dans la collection.
            </summary>
            <param name="item">Élément recherché</param>
            <returns>La position de l'élément dans la collection, ou -1 si l'élément n'est pas dans la collection</returns>
            <remarks>Renvoie toujours -1 dans l'implémentation de base.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Non supporté. Insère l'élément spécifié dans la collection à la position spécifiée.
            </summary>
            <param name="index">Position à laquelle insérer l'élément</param>
            <param name="item">Élément à insérer</param>
            <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Non supporté. Retire l'élément à la position spécifiée
            </summary>
            <param name="index">Position de l'élément à retirer</param>
            <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copie les éléments de la collection vers le tableau spécifié
            </summary>
            <param name="array">Tableau vers lequel les éléments sont copiés</param>
            <param name="index">Position dans le tableau à laquelle la copie commence</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Non supporté. Ajoute l'élément spécifié à la collection.
            </summary>
            <param name="value">Élément à ajouter</param>
            <returns>La position à laquelle l'élément a été ajouté</returns>
            <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indique si la collection contient l'élément spécifié
            </summary>
            <param name="value">Élément dont on veut tester la présence</param>
            <returns>true si l'élément est présent dans la collection, sinon false</returns>
            <remarks>Renvoie toujours false dans l'implémentation de base.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Non supporté. Insère l'élément spécifié dans la collection à la position spécifiée.
            </summary>
            <param name="index">Position à laquelle insérer l'élément</param>
            <param name="value">Élément à insérer</param>
            <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Non supporté. Retire l'élément spécifié de la collection.
            </summary>
            <param name="value">Élément à retirer.</param>
            <returns>true si l'élément était présent et a été supprimé, sinon false</returns>
            <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Renvoie la position de l'élément spécifié dans la collection.
            </summary>
            <param name="value">Élément recherché</param>
            <returns>La position de l'élément dans la collection, ou -1 si l'élément n'est pas dans la collection</returns>
            <remarks>Renvoie toujours -1 dans l'implémentation de base.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.FetchItems(System.Int32,System.Int32)">
            <summary>
            Quand cette méthode est implémentée dans une classe dérivée, obtient les éléments de la plage spécifiée.
            </summary>
            <param name="start">Position du premier élément à obtenir</param>
            <param name="count">Nombre d'éléments à obtenir</param>
            <returns>Un tableau contenant les éléments demandés</returns>
            <remarks>Les classes dérivées doivent implémenter cette méthode pour récupérer les éléments de la collection à partir d'une source quelconque.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.FetchCount">
            <summary>
            Quand cette méthode est implémentée dans une classe dérivée, obtient le nombre total d'éléments de la collection.
            </summary>
            <returns>Nombre total d'éléments de la collection</returns>
            <remarks>Les classes dérivées doivent implémenter cette méthode pour récupérer le nombre d'éléments de la collection à partir d'une source quelconque.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.Invalidate">
            <summary>
            Invalide les pages en cache dans la collection et le nombre d'éléments.
            Le prochain accès à un élément rechargera la page nécessaire, et le nombre d'éléments sera réévalué.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.Count">
            <summary>
            Renvoie le nombre d'éléments dans la collection
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.IsReadOnly">
            <summary>
            Indique si la collection est en lecture seule. Renvoie toujours true dans l'implémentation de base.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.Item(System.Int32)">
            <summary>
            Obtient l'élément à la position spécifiée. L'accesseur <c>set</c> n'est pas supporté.
            </summary>
            <param name="index">Position de l'élément à obtenir</param>
            <returns>L'élément à la position spécifiée</returns>
            <exception cref="T:System.NotSupportedException">La propriété est affectée et la collection est en lecture seule.</exception>
        </member>
        <member name="P:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Obtient un objet qui peut être utilisé pour synchroniser l'accès à la collection.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Obtient une valeur indiquant si l'accès à la collection est synchronisé
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Obtient l'élément à la position spécifiée. L'accesseur <c>set</c> n'est pas supporté.
            </summary>
            <param name="index">Position de l'élément à obtenir</param>
            <returns>L'élément à la position spécifiée</returns>
            <exception cref="T:System.NotSupportedException">La propriété est affectée et la collection est en lecture seule.</exception>
        </member>
        <member name="P:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.System#Collections#IList#IsFixedSize">
            <summary>
            Indique si la collection est de taille fixe. Renvoie toujours true dans l'implémentation de base.
            </summary>
        </member>
        <member name="E:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.PropertyChanged">
            <summary>
            Se produit quand une propriété de la collection a changé
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.VirtualizingCollectionBase`1.PageSize">
            <summary>
            Obtient le nombre d'éléments par page de données.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1">
            <summary>
            Gestionnaire d'un pool d'objet générique
            </summary>
            <typeparam name="T">Type des objets à placer dans le gestionnaire</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.AppendItemToPool(Developpez.Dotnet.ComponentModel.ParameterizedGenericPool{`0}.GenericPoolItem)">
            <summary>
            Rajoute un objet dans le pool
            </summary>
            <param name="item">Objet à rajouter</param>
            <returns>true si l'opération a réussit, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.AppendItemToPool(System.Collections.Generic.LinkedListNode{Developpez.Dotnet.ComponentModel.ParameterizedGenericPool{`0}.GenericPoolItem})">
            <summary>
            Rajoute un objet dans le pool
            </summary>
            <param name="item">Objet à rajouter</param>
            <returns>true si l'opération a réussit, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GetItemFromPool">
            <summary>
            Renvoie un objet du pool
            </summary>
            <returns>Un objet du pool, ou null si aucun objet n'est disponible dans le pool</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.#ctor(System.Int32,System.Int32,Developpez.Dotnet.ComponentModel.ParameterizedGenericPool{`0}.CreateNewItemMethod)">
            <summary>
            Crée une nouvel instance du gestionnaire de pool générique
            </summary>
            <param name="basePooledItemCount">Objets alloués au démarrage</param>
            <param name="maxPooledItemCount">Nombre maximum d'objets avant que ceux-ci ne soient relachés</param>
            <param name="newItemAllocator">allocateur</param>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.ObtainItem">
            <summary>
            Obtient un objet à partir du pool, ou en crée un nouveau si aucun n'est disponible
            </summary>
            <returns>Un objet du pool, ou un nouvel objet si aucun n'est disponible</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.ObtainItem(System.Boolean)">
            <summary>
            Obtient un objet dans le pool
            </summary>
            <param name="canCreateNew">Si le pool est vide et que canCreateNew vaut true, un nouvel
            objet est crée. Sinon, null est renvoyé</param>
            <returns>Objet du pool, ou null si aucun objet n'est disponible et canCreateNew vaut false</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.InternalNewItem">
            <summary>
            Crée un nouvel objet pour le pool
            </summary>
            <returns>Nouvel objet crée</returns>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.Pool">
            <summary>
            Pool d'objets
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.PoolCount">
            <summary>
            Nombre d'objets actuellement présents dans le pool
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.CanAddItem">
            <summary>
            Indique si l'état actuel du gestionnaire permet d'y rajouter un objet.
            (S'il y a déjà un nombre maximal d'éléments dans le pool, aucun ajout ne sera possible)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.BaseCachedItemCount">
            <summary>
            Nombre d'objets initialement présents dans le pool
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.MaxCachedItemCount">
            <summary>
            Nombre d'objets maximum dans le pool
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.NewItemAllocator">
            <summary>
            Function servant à créer de nouveaux objets pour le pool
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem">
            <summary>
            Conteneur contenant l'objet du pool
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.#ctor(`0,Developpez.Dotnet.ComponentModel.ParameterizedGenericPool{`0})">
            <summary>
            Initialise une nouvelle instance de conteneur
            </summary>
            <param name="newItem">Element à placer</param>
            <param name="parent">Gestionnaire parent</param>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.UnDispose">
            <summary>
            Repasse l'objet d'un état "libéré" à une état "non libéré"
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.Finalize">
            <summary>
            Destructeur
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.Dispose">
            <summary>
            Passe l'objet à un état "libéré" et le replace dans le pool d'objets
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.Node">
            <summary>
            Node utilisée pour rattacher l'objet au pool
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.Value">
            <summary>
            Objet placé dans le Pool
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.GenericPoolItem.Parent">
            <summary>
            Gestionnaire parent
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1.CreateNewItemMethod">
            <summary>
            Méthode servant à la création d'un nouvel objet dans le pool
            </summary>
            <returns>Objet crée</returns>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.GenericPool`1">
            <summary>
            Gestionnaire d'un pool d'objet générique. Les objets doivent avoir
            un constructeur sans paramètre.<br/>
            Si aucun constructeur sans paramètre n'est possible, utilisez la classe <see cref="T:Developpez.Dotnet.ComponentModel.ParameterizedGenericPool`1"/>
            </summary>
            <typeparam name="T">Type d'objet à gérer</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.GenericPool`1.#ctor">
            <summary>
            Crée une nouvel instance du gestionnaire de pool générique.<br/>
            Par défaut 1 objet est présent dans le pool et 10 au maximum peuvent être gérés
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.GenericPool`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Crée une nouvel instance du gestionnaire de pool générique
            </summary>
            <param name="startObjectCount">Objets alloués au démarrage</param>
            <param name="maxObjectCount">Nombre maximum d'objets avant que ceux-ci ne soient relachés</param>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.CreditCardNumber">
            <summary>
            Vérification d'un numéro de carte bancaire.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.CreditCardNumber.Check(System.String)">
            <summary>
            Vérifie la validité d'un numéro de carte bancaire.
            </summary>
            <param name="number">Numéro de carte bancaire.</param>
            <returns>Vrai si le numéro de carte bancaire est valide, faux sinon.</returns>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.LocalizedDescriptionAttribute">
            <summary>
            Permet de spécifier une description localisée pour un élément de code (type, propriété, évènement...)
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.LocalizedDescriptionAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initialise une nouvelle instance de la classe LocalizedDescriptionAttribute.
            </summary>
            <param name="resourceKey">Clé de la ressource localisée qui contient la description</param>
            <param name="resourceType">Type qui permet de trouver les ressources localisées</param>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.LocalizedDescriptionAttribute.Description">
            <summary>
            Obtient la description localisée définie par cet attribut.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions">
            <summary>
            Fournit des méthodes d'extension pour travailler avec les objets implémentant <c>INotifyPropertyChanged</c>.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions.OnPropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Ajoute un handler à l'évènement PropertyChanged pour la propriété spécifiée.
            </summary>
            <param name="target">Objet à surveiller</param>
            <param name="propertyName">Nom de la propriété à surveiller</param>
            <param name="handler">Handler à exécuter quand la valeur de la propriété change</param>
            <returns>Un objet IDisposable à supprimer pour se désabonner de l'évènement</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions.OnPropertyChanged``1(System.ComponentModel.INotifyPropertyChanged,System.Linq.Expressions.Expression{System.Func{``0}},System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Ajoute un handler à l'évènement PropertyChanged pour la propriété spécifiée.
            </summary>
            <typeparam name="T">Type de la propriété à surveiller</typeparam>
            <param name="target">Objet à surveiller</param>
            <param name="propertySelector">Expression représentant l'accès à la propriété à surveiller</param>
            <param name="handler">Handler à exécuter quand la valeur de la propriété change</param>
            <returns>Un objet IDisposable à supprimer pour se désabonner de l'évènement</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions.SetDependenciesFor(System.ComponentModel.INotifyPropertyChanged,System.String)">
            <summary>
            Commence un bloc de définition des dépendences d'une propriété
            </summary>
            <param name="target">Objet pour lequel on définit les dépendences d'une propriété</param>
            <param name="propertyName">Nom de la propriété pour laquelle on définit les dépendences</param>
            <returns>Un objet <c>PropertyDependencyManager</c> qui gère les dépendences de la propriété</returns>
            <remarks>Un objet <c>PropertyDependencyManager</c> permet de gérer les dépendences entre différentes propriétés
            de façon à déclencher automatiquement l'évènement <c>PropertyChanged</c> pour les propriétés concernées</remarks>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions.SetDependenciesFor``1(System.ComponentModel.INotifyPropertyChanged,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Commence un bloc de définition des dépendences d'une propriété
            </summary>
            <typeparam name="T">Type de la propriété à gérer</typeparam>
            <param name="target">Objet pour lequel on définit les dépendences d'une propriété</param>
            <param name="propertySelector">Expression représentant l'accès à la propriété pour laquelle on définit les dépendences</param>
            <returns>Un objet <c>PropertyDependencyManager</c> qui gère les dépendences de la propriété</returns>
            <remarks>Un objet <c>PropertyDependencyManager</c> permet de gérer les dépendences entre différentes propriétés
            de façon à déclencher automatiquement l'évènement <c>PropertyChanged</c> pour les propriétés concernées</remarks>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions.PropertyDependencyManager">
            <summary>
            Gère les dépendences entre différentes propriétés d'une classe, de façon à déclencher automatiquement
            l'évènement <c>PropertyChanged</c> pour les propriétés concernées.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions.PropertyDependencyManager.DependsOn(System.String)">
            <summary>
            Permet d'indiquer que la propriété gérée dépend de la propriété spécifiée.
            Si cette propriété change, l'évènement <c>PropertyChanged</c> sera
            également déclenché pour la propriété gérée.
            </summary>
            <param name="propertyName">Nom de la propriété dont dépend la propriété gérée</param>
            <returns>L'objet <c>PropertyDependencyManager</c> courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions.PropertyDependencyManager.DependsOn``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Permet d'indiquer que la propriété gérée par cet objet dépend de la propriété spécifiée.
            Si cette propriété change, l'évènement <c>PropertyChanged</c> sera
            également déclenché pour la propriété gérée.
            </summary>
            <typeparam name="T">Type de la propriété dont dépend la propriété gérée</typeparam>
            <param name="propertySelector">Expression représentant l'accès à la propriété dont dépend la propriété gérée</param>
            <returns>L'objet <c>PropertyDependencyManager</c> courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions.PropertyDependencyManager.Affects(System.String)">
            <summary>
            Permet d'indiquer que la propriété spécifiée dépend de la propriété gérée par cet objet.
            Si la propriété gérée change, l'évènement <c>PropertyChanged</c> sera
            également déclenché pour la propriété spécifiée.
            </summary>
            <param name="propertyName">Nom de la propriété qui dépend de la propriété gérée</param>
            <returns>L'objet <c>PropertyDependencyManager</c> courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions.PropertyDependencyManager.Affects``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Permet d'indiquer que la propriété spécifiée dépend de la propriété gérée par cet objet.
            Si la propriété gérée change, l'évènement <c>PropertyChanged</c> sera
            également déclenché pour la propriété spécifiée.
            </summary>
            <typeparam name="T">Type de la propriété affectée par la propriété gérée</typeparam>
            <param name="propertySelector">Expression représentant l'accès à la propriété qui dépend de la propriété gérée</param>
            <returns>L'objet <c>PropertyDependencyManager</c> courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.ComponentModel.NotifyPropertyChangedExtensions.PropertyDependencyManager.Raise(System.Action{System.String})">
            <summary>
            Permet d'indiquer l'action à effectuer pour déchencher l'évènement.
            </summary>
            <param name="raiseEventAction">Action à effectuer pour déclencher l'évènement.</param>
        </member>
        <member name="T:Developpez.Dotnet.CoreExtensions">
            <summary>
            Fournit des méthodes d'extensions à usage générique
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.Default``1(``0,``0)">
            <summary>
            Renvoie la valeur courante si elle est non nulle. Sinon, renvoie la valeur par défaut spécifiée.
            Equivalent à l'opérateur C# <c>??</c>
            </summary>
            <typeparam name="T">Type de la valeur courante</typeparam>
            <param name="obj">Valeur courante</param>
            <param name="defaultValue">Valeur par défaut à renvoyer si la valeur courante est nulle</param>
            <returns>La valeur courante si elle est non nulle. Sinon, la valeur par défaut</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.IfNotNull``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Si la valeur courante n'est pas nulle, renvoie la valeur spécifiée par le sélecteur. Sinon,
            renvoie la valeur par défaut spécifiée.
            </summary>
            <typeparam name="T">Type de la valeur courante</typeparam>
            <typeparam name="TResult">Type de retour du sélecteur</typeparam>
            <param name="obj">Valeur courante</param>
            <param name="selector">Sélecteur indiquant la valeur à renvoyer</param>
            <param name="valueIfNull">Valeur par défaut à renvoyer si la valeur courante est nulle</param>
            <returns>Si la valeur courante n'est pas nulle, la valeur spécifiée par le sélecteur. Sinon, la valeur par défaut</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.IfNotNull``2(``0,System.Func{``0,``1})">
            <summary>
            Si la valeur courante n'est pas nulle, renvoie la valeur spécifiée par le sélecteur. Sinon,
            renvoie la valeur par défaut du type de retour spécifié.
            </summary>
            <typeparam name="T">Type de la valeur courante</typeparam>
            <typeparam name="TResult">Type de retour du sélecteur</typeparam>
            <param name="obj">Valeur courante</param>
            <param name="selector">Sélecteur indiquant la valeur à renvoyer</param>
            <returns>Si la valeur courante n'est pas nulle, la valeur spécifiée par le sélecteur. Sinon, la valeur par défaut du type de retour spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SafeEquals``1(``0,``0)">
            <summary>
            Teste l'égalité de 2 objets, sans risque de NullReferenceException si l'un des objets
            est null.
            </summary>
            <typeparam name="T">Type des objets à comparer</typeparam>
            <param name="obj">Premier objet à comparer</param>
            <param name="other">Second objet à comparer</param>
            <returns>true si les objets sont égaux ou tous les 2 null, sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.Between``1(``0,``0,``0)">
            <summary>
            Teste si une valeur est entre les 2 valeurs spécifiées (bornes inclues)
            </summary>
            <typeparam name="T">Type de la valeur</typeparam>
            <param name="value">Valeur à tester</param>
            <param name="min">Borne inférieure</param>
            <param name="max">Borne supérieure</param>
            <returns>true si <c>min &lt;= value &lt;= max</c>, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.StrictlyBetween``1(``0,``0,``0)">
            <summary>
            Teste si une valeur est strictement entre les bornes spécifiées (bornes non inclues)
            </summary>
            <typeparam name="T">Type de la valeur</typeparam>
            <param name="value">Valeur à tester</param>
            <param name="min">Borne inférieure</param>
            <param name="max">Borne supérieure</param>
            <returns>true si <c>min &lt; value &lt; max</c>, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.In``1(``0,``0[])">
            <summary>
            Teste si une valeur appartient à la liste spécifiée
            </summary>
            <typeparam name="T">Type de la valeur</typeparam>
            <param name="value">Valeur à tester</param>
            <param name="list">Liste à laquelle la valeur doit appartenir</param>
            <returns>true si la valeur appartient à la liste, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Teste si une valeur appartient à la liste spécifiée
            </summary>
            <typeparam name="T">Type de la valeur</typeparam>
            <param name="value">Valeur à tester</param>
            <param name="list">Liste à laquelle la valeur doit appartenir</param>
            <returns>true si la valeur appartient à la liste, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.CheckArgumentNull``1(``0,System.String)">
            <summary>
            Vérifie si un argument est null, et lève une ArgumentNullException
            si c'est le cas.
            </summary>
            <typeparam name="T">Type du paramètre</typeparam>
            <param name="value">Valeur de l'argument</param>
            <param name="paramName">Nom du paramètre</param>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.CheckArgumentNull``1(``0,System.String,System.String)">
            <summary>
            Vérifie si un argument est null, et lève une ArgumentNullException
            avec le message spécifié si c'est le cas.
            </summary>
            <typeparam name="T">Type du paramètre</typeparam>
            <param name="value">Valeur de l'argument</param>
            <param name="paramName">Nom du paramètre</param>
            <param name="message">Message de l'exception</param>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.CheckArgumentOutOfRange``1(``0,System.String,``0,``0)">
            <summary>
            Vérifie qu'un argument est dans la plage de valeurs spécifiées, et lève une
            ArgumentOutOfRangeException si ce n'est pas le cas
            </summary>
            <typeparam name="T">Type du paramètre</typeparam>
            <param name="value">Valeur de l'argument</param>
            <param name="paramName">Nom du paramètre</param>
            <param name="min">Valeur minimale de l'argument</param>
            <param name="max">Valeur maximale de l'argument</param>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.CheckArgumentOutOfRange``1(``0,System.String,``0,``0,System.String)">
            <summary>
            Vérifie qu'un argument est dans la plage de valeurs spécifiées, et lève une
            ArgumentOutOfRangeException avec le message spécifié si ce n'est pas le cas
            </summary>
            <typeparam name="T">Type du paramètre</typeparam>
            <param name="value">Valeur de l'argument</param>
            <param name="paramName">Nom du paramètre</param>
            <param name="min">Valeur minimale de l'argument</param>
            <param name="max">Valeur maximale de l'argument</param>
            <param name="message">Message de l'exception</param>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.CheckArgumentInEnum(System.Enum,System.String)">
            <summary>
            Vérifie qu'un argument est une valeur d'enum valide, et lève une
            ArgumentOutOfRangeException si ce n'est pas le cas.
            </summary>
            <param name="value">Valeur de l'argument</param>
            <param name="paramName">Nom du paramètre</param>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.CheckArgumentInEnum(System.Enum,System.String,System.String)">
            <summary>
            Vérifie qu'un argument est une valeur d'enum valide, et lève une
            ArgumentOutOfRangeException avec le message spécifié si ce n'est pas le cas.
            </summary>
            <param name="value">Valeur de l'argument</param>
            <param name="paramName">Nom du paramètre</param>
            <param name="message">Message de l'exception</param>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.Switch``2(``0,``1)">
            <summary>
            Commence un bloc Switch sous forme de méthode d'extension. Le bloc renverra
            la valeur correspondant au premier cas évalué à true, ou à défault, la valeur
            par défaut spécifiée.
            </summary>
            <typeparam name="T">Type de la valeur à tester</typeparam>
            <typeparam name="TResult">Type de la valeur de retour</typeparam>
            <param name="testValue">Valeur à tester</param>
            <param name="defaultResult">Valeur de retour par défaut</param>
            <returns>la valeur correspondant au premier cas évalué à true, ou à défault, la valeur par défaut spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.Switch``2(``0)">
            <summary>
            Commence un bloc Switch sous forme de méthode d'extension. Le bloc renverra
            la valeur correspondant au premier cas évalué à true, ou à défault, la valeur
            par défaut du type de retour.
            </summary>
            <typeparam name="T">Type de la valeur à tester</typeparam>
            <typeparam name="TResult">Type de la valeur de retour</typeparam>
            <param name="testValue">Valeur à tester</param>
            <returns>la valeur correspondant au premier cas évalué à true, ou à défault, la valeur par défaut du type de retour</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.MakeHashCodeWithSeeds``1(``0,System.Int32,System.Int32,System.Collections.IEnumerable)">
            <summary>
            Génère un code de hachage pour un objet à partir des éléments spécifiés, en utilisant les valeurs de seeds spécifiées
            </summary>
            <typeparam name="T">Type de l'objet pour lequel le hashcode est généré</typeparam>
            <param name="obj">Objet pour lequel on génère le code de hachage (voir Remarques)</param>
            <param name="seed1">Première seed pour générer le code de hachage</param>
            <param name="seed2">Seconde seed pour générer le code de hachage</param>
            <param name="items">Eléments à partir desquels on génère le code de hachage</param>
            <returns>Un code de hachage pour l'objet</returns>
            <remarks>Le premier paramètre <c>obj</c> n'est pas utilisé dans le calcul ; il n'est présent que pour
            raisons pratiques afin d'exposer la méthode comme une méthode d'extension. Il est recommandé d'utiliser
            des nombres premiers pour les valeurs des seeds, de façons à obtenir une meilleure distribution des codes
            de hachage.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.MakeHashCode``1(``0,System.Collections.IEnumerable)">
            <summary>
            Génère un code de hachage pour un objet à partir des éléments spécifiés.
            </summary>
            <typeparam name="T">Type de l'objet pour lequel le hashcode est généré</typeparam>
            <param name="obj">Objet pour lequel on génère le code de hachage (voir Remarques)</param>
            <param name="items">Eléments à partir desquels on génère le code de hachage</param>
            <returns>Un code de hachage pour l'objet</returns>
            <remarks>Le premier paramètre <c>obj</c> n'est pas utilisé dans le calcul ; il n'est présent que pour
            raisons pratiques afin d'exposer la méthode comme une méthode d'extension.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.MakeHashCodeWithSeeds``1(``0,System.Int32,System.Int32,System.Object,System.Object,System.Object[])">
            <summary>
            Génère un code de hachage pour un objet à partir des éléments spécifiés, en utilisant les valeurs de seeds spécifiées
            </summary>
            <typeparam name="T">Type de l'objet pour lequel le hashcode est généré</typeparam>
            <param name="obj">Objet pour lequel on génère le code de hachage (voir Remarques)</param>
            <param name="seed1">Première seed pour générer le code de hachage</param>
            <param name="seed2">Seconde seed pour générer le code de hachage</param>
            <param name="first">Premier élément à partir duquel générer le code de hachage</param>
            <param name="second">Second élément à partir duquel générer le code de hachage</param>
            <param name="others">Autres éléments à partir desquels on génère le code de hachage</param>
            <returns>Un code de hachage pour l'objet</returns>
            <remarks>Le premier paramètre <c>obj</c> n'est pas utilisé dans le calcul ; il n'est présent que pour
            raisons pratiques afin d'exposer la méthode comme une méthode d'extension. Il est recommandé d'utiliser
            des nombres premiers pour les valeurs des seeds, de façons à obtenir une meilleure distribution des codes
            de hachage.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.MakeHashCode``1(``0,System.Object,System.Object,System.Object[])">
            <summary>
            Génère un code de hachage pour un objet à partir des éléments spécifiés.
            </summary>
            <typeparam name="T">Type de l'objet pour lequel le hashcode est généré</typeparam>
            <param name="obj">Objet pour lequel on génère le code de hachage (voir Remarques)</param>
            <param name="first">Premier élément à partir duquel générer le code de hachage</param>
            <param name="second">Second élément à partir duquel générer le code de hachage</param>
            <param name="others">Autres éléments à partir desquels on génère le code de hachage</param>
            <returns>Un code de hachage pour l'objet</returns>
            <remarks>Le premier paramètre <c>obj</c> n'est pas utilisé dans le calcul ; il n'est présent que pour
            raisons pratiques afin d'exposer la méthode comme une méthode d'extension.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.PreserveStackTrace(System.Exception)">
            <summary>
            Prépare une exception pour qu'elle puisse être relancée sans perdre
            la trace de la pile originale.
            </summary>
            <param name="exception">L'exception à relancer</param>
            <returns>La même exception, préparée pour être relancée sans perdre la trace de la pile originale.</returns>
            <remarks>Cette méthode requiert l'exécution en Full Trust.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Obtient le service du type spécifié
            </summary>
            <typeparam name="T">Type de service souhaité</typeparam>
            <param name="provider">IServiceProvider qui fournit le service</param>
            <returns>Un service du type souhaité</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.ConvertTo``1(System.Object)">
            <summary>
            Convertit un objet vers le type spécifié. Lève une exception si la conversion
            n'est pas possible.
            </summary>
            <typeparam name="T">Type de destination</typeparam>
            <param name="value">Object à convertir</param>
            <returns>La valeur convertie</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.ToHexString(System.Byte[])">
            <summary>
            Renvoie la représentation hexadécimale d'un tableau d'octets
            </summary>
            <param name="bytes">Un tableau d'octets</param>
            <returns>La représentation hexadécimale du tableau d'octets, avec des lettres minuscules et sans séparateur</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.ToBase64String(System.Byte[])">
            <summary>
            Renvoie la représentation en base64 d'un tableau d'octets
            </summary>
            <param name="bytes">Un tableau d'octets</param>
            <returns>La représentation base64 du tableau d'octets</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.FormatWithTemplate``1(``0,System.String)">
            <summary>
            Formate un objet en utilisant le modèle fournit en paramètre.
            </summary>
            <typeparam name="T">Type de l'objet à formater</typeparam>
            <param name="obj">Objet à formater</param>
            <param name="template">Modèle à utiliser pour formater l'objet</param>
            <returns>L'objet formaté selon le modèle fourni</returns>
            <remarks>Voir la classe StringTemplate pour plus de détails sur la syntaxe du modèle.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.Add(System.IntPtr,System.Int32)">
            <summary>
            Ajoute un offset à la valeur d'un pointeur
            </summary>
            <param name="ptr">Pointeur auquel ajouter l'offset</param>
            <param name="offset">Offset à ajouter</param>
            <returns>Nouveau pointeur qui reflète l'addition de l'offset au pointeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.Subtract(System.IntPtr,System.Int32)">
            <summary>
            Soustrait un offset de la valeur d'un pointeur
            </summary>
            <param name="ptr">Pointeur duquel soustraire l'offset</param>
            <param name="offset">Offset à soustraire</param>
            <returns>Nouveau pointeur qui reflète la soustraction de l'offset du pointeur</returns>
        </member>
        <member name="T:Developpez.Dotnet.CoreExtensions.SwitchContext`2">
            <summary>
            Représente un bloc Switch en cours d'évaluation
            </summary>
            <typeparam name="T">Type de la valeur à tester</typeparam>
            <typeparam name="TResult">Type de la valeur de retour</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.Case(`0,`1)">
            <summary>
            Ajoute un nouveau cas évalué à true si la valeur à tester est égale à la valeur spécifiée.
            La valeur à renvoyer est spécifiée sous forme d'une valeur fixe.
            </summary>
            <param name="caseValue">La valeur à laquelle comparer la valeur à tester</param>
            <param name="caseResult">La valeur à renvoyer si ce cas est évalué à true</param>
            <returns>Le bloc Switch courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.Case(`0,System.Func{`0,`1})">
            <summary>
            Ajoute un nouveau cas évalué à true si la valeur à tester est égale à la valeur spécifiée.
            La valeur à renvoyer est évaluée par la fonction spécifiée
            </summary>
            <param name="caseValue">La valeur à laquelle comparer la valeur à tester</param>
            <param name="caseEvaluator">La fonction qui évalue le résultat si ce cas est évalué à true</param>
            <returns>Le bloc Switch courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.Case(System.Func{`0,System.Boolean},`1)">
            <summary>
            Ajoute un nouveau cas évalué à true si le prédicat spécifié est évalué à true.
            La valeur à renvoyer est spécifiée sous forme d'une valeur fixe.
            </summary>
            <param name="casePredicate">Le prédicat à évaluer par rapport à la valeur à tester</param>
            <param name="caseResult">La valeur à renvoyer si ce cas est évalué à true</param>
            <returns>Le bloc Switch courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.Case(System.Func{`0,System.Boolean},System.Func{`0,`1})">
            <summary>
            Ajoute un nouveau cas évalué à true si le prédicat spécifié est évalué à true.
            La valeur à renvoyer est évaluée par la fonction spécifiée
            </summary>
            <param name="casePredicate">Le prédicat à évaluer par rapport à la valeur à tester</param>
            <param name="caseEvaluator">La fonction qui évalue le résultat si ce cas est évalué à true</param>
            <returns>Le bloc Switch courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.Else(`1)">
            <summary>
            Spécifie la valeur par défaut à renvoyer si tous les cas précédents ont été évalués à false.
            Cette méthode doit être la dernière appelée sur le bloc Switch, faute de quoi les cas suivants
            ne seront pas évalués.
            </summary>
            <param name="defaultResult">Valeur par défaut à renvoyer</param>
            <returns>Le bloc Switch courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.Else(System.Func{`0,`1})">
            <summary>
            Spécifie la fonction qui évaluera le résultat par défaut si tous les cas précédents ont été évalués à false.
            Cette méthode doit être la dernière appelée sur le bloc Switch, faute de quoi les cas suivants
            ne seront pas évalués.
            </summary>
            <param name="defaultEvaluator">Fonction qui évalue le résultat par défaut</param>
            <returns>Le bloc Switch courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.ElseThrow">
            <summary>
            Lève une exception si aucun cas correspondant n'a été trouvé
            </summary>
            <returns>Le bloc Switch courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.ElseThrow(System.String)">
            <summary>
            Lève une exception avec le message spécifié si aucun cas correspondant n'a été trouvé
            </summary>
            <param name="message">Message à utiliser pour l'exception</param>
            <returns>Le bloc Switch courant</returns>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.op_Implicit(Developpez.Dotnet.CoreExtensions.SwitchContext{`0,`1})~`1">
            <summary>
            Renvoie le résultat du block Switch
            </summary>
            <param name="context">Le bloc Switch à convertir</param>
            <returns>Le résultat du bloc Switch</returns>
        </member>
        <member name="P:Developpez.Dotnet.CoreExtensions.SwitchContext`2.Result">
            <summary>
            Renvoie le résultat du bloc Switch
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.CoreExtensions.SwitchContext`2.NoMatchFoundException">
            <summary>
            Cette exception est levée quand aucun cas correspondant à la valeur testée n'a été trouvé dans le bloc Switch
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.NoMatchFoundException.#ctor">
            <summary>
            Initialise une nouvelle instance de NoMatchFoundException avec le message par défaut
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.NoMatchFoundException.#ctor(System.String)">
            <summary>
            Initialise une nouvelle instance de NoMatchFoundException avec le message spécifié
            </summary>
            <param name="message">Message de l'exception</param>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.NoMatchFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise une nouvelle instance de NoMatchFoundException avec le message spécifié et l'exception interne spécifiée
            </summary>
            <param name="message">Message de l'exception</param>
            <param name="inner">Exception interne</param>
        </member>
        <member name="M:Developpez.Dotnet.CoreExtensions.SwitchContext`2.NoMatchFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialise une nouvelle instance de NoMatchFoundException à partir de données sérialisées
            </summary>
            <param name="info">SerializationInfo qui contient les données d'objet sérialisées relatives à l'exception levée.</param>
            <param name="context">StreamingContext qui contient des informations contextuelles sur la source ou la destination.</param>
        </member>
        <member name="T:Developpez.Dotnet.Data.DataExtensions">
            <summary>
            Fournit des méthodes d'extension pour faciliter l'utilisation des classes ADO.NET
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.CreateConnection(System.Data.Common.DbProviderFactory,System.String)">
            <summary>
            Crée une connexion à partir d'une DbProviderFactory et d'une chaine de connexion
            </summary>
            <param name="factory">la DbProviderFactory du provider ADO.NET à utiliser</param>
            <param name="connectionString">la chaine de connexion</param>
            <returns>Une DbConnection avec la chaine de connexion spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.CreateCommand(System.Data.IDbConnection,System.String)">
            <summary>
            Crée une commande à partir d'une connexion et d'une requête
            </summary>
            <param name="connection">La connexion</param>
            <param name="commandText">Le texte de la requête</param>
            <returns>Une commande pour la connexion et la requête spécifiées</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.CreateCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            Crée une commande à partir d'une connexion et d'une requête
            </summary>
            <param name="connection">La connexion</param>
            <param name="commandText">Le texte de la requête</param>
            <returns>Une commande pour la connexion et la requête spécifiées</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Query(System.Data.IDbConnection,System.String)">
            <summary>
            Exécute la requête spécifiée et renvoie les résultats sous forme d'une séquence d'enregistrements.
            </summary>
            <param name="connection">Connection sur laquelle exécuter la commande</param>
            <param name="commandText">Texte de la requête SQL</param>
            <returns>Les résultats de la requête sous forme d'une série d'enregistrements</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Query``1(System.Data.IDbConnection,System.String,``0)">
            <summary>
            Exécute la requête spécifiée avec les paramètres spécifiés, et renvoie les résultats sous forme d'une séquence d'enregistrements.
            </summary>
            <typeparam name="TParams">Type de l'objet contenant les paramètres</typeparam>
            <param name="connection">Connection sur laquelle exécuter la commande</param>
            <param name="commandText">Texte de la requête SQL</param>
            <param name="parameters">Objet dont les propriétés correspondent aux noms des paramètres dans la requête SQL</param>
            <returns>Les résultats de la requête sous forme d'une série d'enregistrements</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.QueryScalar(System.Data.IDbConnection,System.String)">
            <summary>
            Exécute la requête spécifiée avec les paramètres spécifiés, et renvoie la première colonne de la première ligne du résultat.
            </summary>
            <param name="connection">Connection sur laquelle exécuter la commande</param>
            <param name="commandText">Texte de la requête SQL</param>
            <returns>La première colonne de la première ligne du résultat, ou null si la requête n'a renvoyé aucun résultat</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.QueryScalar``1(System.Data.IDbConnection,System.String,``0)">
            <summary>
            Exécute la requête spécifiée avec les paramètres spécifiés, et renvoie la première colonne de la première ligne du résultat.
            </summary>
            <typeparam name="TParams">Type de l'objet contenant les paramètres</typeparam>
            <param name="connection">Connection sur laquelle exécuter la commande</param>
            <param name="commandText">Texte de la requête SQL</param>
            <param name="parameters">Objet dont les propriétés correspondent aux noms des paramètres dans la requête SQL</param>
            <returns>La première colonne de la première ligne du résultat, ou null si la requête n'a renvoyé aucun résultat</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Execute(System.Data.IDbConnection,System.String)">
            <summary>
            Exécute la commande spécifiée et renvoie le nombre de lignes affectées
            </summary>
            <param name="connection">Connection sur laquelle exécuter la commande</param>
            <param name="commandText">Texte de la requête SQL</param>
            <returns>Le nombre de lignes affectées par la commande</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Execute``1(System.Data.IDbConnection,System.String,``0)">
            <summary>
            Exécute la commande spécifiée avec les paramètres spécifiés, et renvoie le nombre de lignes affectées
            </summary>
            <typeparam name="TParams">Type de l'objet contenant les paramètres</typeparam>
            <param name="connection">Connection sur laquelle exécuter la commande</param>
            <param name="commandText">Texte de la requête SQL</param>
            <param name="parameters">Objet dont les propriétés correspondent aux noms des paramètres dans la requête SQL</param>
            <returns>Le nombre de lignes affectées par la commande</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Data.DbType)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <param name="size">La taille du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <param name="direction">La direction du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <param name="size">La taille du paramètre</param>
            <param name="direction">La direction du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <param name="size">La taille du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <param name="direction">La direction du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Ajoute à la commande un paramètre avec les options spécifiées
            </summary>
            <param name="command">La commande à laquelle ajouter un paramètre</param>
            <param name="name">Le nom du paramètre</param>
            <param name="dbType">Le type du paramètre</param>
            <param name="size">La taille du paramètre</param>
            <param name="direction">La direction du paramètre</param>
            <returns>Le paramètre créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Select``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Exécute la commande et renvoie les résultats sous forme d'une séquence d'éléments
            résultant de la projection spécifiée.
            </summary>
            <typeparam name="TResult">Le type des éléments à renvoyer</typeparam>
            <param name="command">La commande à exécuter</param>
            <param name="selector">La projection à appliquer à chaque ligne renvoyée par la requête</param>
            <returns>Une séquence d'éléments résultant de la projection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.SetParameters``1(System.Data.IDbCommand,``0)">
            <summary>
            Définit les valeurs des paramètres d'un commande, en créant les paramètres si besoin, d'après les propriétés de l'objet passé en paramètre.
            </summary>
            <typeparam name="TParams">Type de l'objet contenant les paramètres</typeparam>
            <param name="command">Commande dont les valeurs des paramètres sont définies</param>
            <param name="parameters">Objet dont les propriétés correspondent aux noms des paramètres dans la requête SQL</param>
            <returns>La commande avec les valeurs de paramètres spécifiées</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.SetParameters``1(System.Data.Common.DbCommand,``0)">
            <summary>
            Définit les valeurs des paramètres d'un commande, en créant les paramètres si besoin, d'après les propriétés de l'objet passé en paramètre.
            </summary>
            <typeparam name="TParams">Type de l'objet contenant les paramètres</typeparam>
            <param name="command">Commande dont les valeurs des paramètres sont définies</param>
            <param name="parameters">Objet dont les propriétés correspondent aux noms des paramètres dans la requête SQL</param>
            <returns>La commande avec les valeurs de paramètres spécifiées</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Boolean
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetBooleanOrDefault(System.Data.IDataRecord,System.String,System.Boolean)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Boolean, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetByte(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Byte
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetByteOrDefault(System.Data.IDataRecord,System.String,System.Byte)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Byte, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetChar(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Char
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetCharOrDefault(System.Data.IDataRecord,System.String,System.Char)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Char, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que DateTime
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDateTimeOrDefault(System.Data.IDataRecord,System.String,System.DateTime)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que DateTime, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDecimal(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Decimal
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDecimalOrDefault(System.Data.IDataRecord,System.String,System.Decimal)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Decimal, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Double
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDoubleOrDefault(System.Data.IDataRecord,System.String,System.Double)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Double, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetFloat(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Float
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetFloatOrDefault(System.Data.IDataRecord,System.String,System.Single)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Float, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetGuid(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Guid
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetGuidOrDefault(System.Data.IDataRecord,System.String,System.Guid)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Guid, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Int16
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetInt16OrDefault(System.Data.IDataRecord,System.String,System.Int16)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Int16, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Int32
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetInt32OrDefault(System.Data.IDataRecord,System.String,System.Int32)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Int32, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Int64
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetInt64OrDefault(System.Data.IDataRecord,System.String,System.Int64)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que Int64, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetString(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que String
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetStringOrDefault(System.Data.IDataRecord,System.String,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée en tant que String, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetValue(System.Data.IDataRecord,System.String)">
            <summary>
            Récupère la valeur de le colonne spécifiée
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetValueOrDefault(System.Data.IDataRecord,System.String,System.Object)">
            <summary>
            Récupère la valeur de le colonne spécifiée, ou la valeur par défaut spécifiée si la colonne est DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="defaultValue">La valeur par défault à renvoyer si la colonne vaut DBNull</param>
            <returns>La valeur de la colonne, ou la valeur par défaut spécifiée  si la colonne vaut DBNull</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetBytes(System.Data.IDataRecord,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Lit un flux binaire de la colonne spécifiée
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à lire</param>
            <param name="dataOffset">La position à laquelle commence la lecture dans la colonne</param>
            <param name="buffer">Le buffer de destination</param>
            <param name="bufferOffset">La position à laquelle commence l'écriture dans le buffer</param>
            <param name="length">Le nombre maximum d'octets à lire</param>
            <returns>Le nombre d'octets lus</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetChars(System.Data.IDataRecord,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Lit un flux de caractères de la colonne spécifiée
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à lire</param>
            <param name="dataOffset">La position à laquelle commence la lecture dans la colonne</param>
            <param name="buffer">Le buffer de destination</param>
            <param name="bufferOffset">La position à laquelle commence l'écriture dans le buffer</param>
            <param name="length">Le nombre maximum de caractères à lire</param>
            <returns>Le nombre de caractères lus</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetData(System.Data.IDataRecord,System.String)">
            <summary>
            Renvoie un IDataReader pour la colonne spécifiée
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>Un IDataReader</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.IsDBNull(System.Data.IDataRecord,System.String)">
            <summary>
            Indique si la colonne spécifiée a la valeur DBNull
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à lire</param>
            <returns>True si la colonne vaut DBNull, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetDataTypeName(System.Data.IDataRecord,System.String)">
            <summary>
            Renvoie le nom du type de données de la colonne spécifiée
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne dont on veut obtenir le type de données</param>
            <returns>Le nom du type de données de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetFieldType(System.Data.IDataRecord,System.String)">
            <summary>
            Renvoie le type .NET de la colonne spécifiée
            </summary>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne dont on veut obtenir le type .NET</param>
            <returns>Le nom type .NET de la colonne</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Field``1(System.Data.IDataRecord,System.Int32,System.Boolean)">
            <summary>
            Renvoie la valeur de la colonne spécifiée en tant que valeur du type spécifié
            </summary>
            <typeparam name="T">Le type de retour souhaité</typeparam>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="ordinal">L'index de la colonne à récupérer</param>
            <param name="tryConvert">true pour tenter de convertir la valeur si elle n'est pas de type T ; false pour effectuer un cast direct</param>
            <returns>La valeur de la colonne</returns>
            <exception cref="T:System.InvalidCastException">La conversion spécifiée n'est pas valide</exception>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Field``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            Renvoie la valeur de la colonne spécifiée en tant que valeur du type spécifié
            </summary>
            <typeparam name="T">Le type de retour souhaité</typeparam>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="ordinal">L'index de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
            <exception cref="T:System.InvalidCastException">La conversion spécifiée n'est pas valide</exception>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Field``1(System.Data.IDataRecord,System.String,System.Boolean)">
            <summary>
            Renvoie la valeur de la colonne spécifiée en tant que valeur du type spécifié
            </summary>
            <typeparam name="T">Le type de retour souhaité</typeparam>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <param name="tryConvert">true pour tenter de convertir la valeur si elle n'est pas de type T ; false pour effectuer un cast direct</param>
            <returns>La valeur de la colonne</returns>
            <exception cref="T:System.InvalidCastException">La conversion spécifiée n'est pas valide</exception>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.Field``1(System.Data.IDataRecord,System.String)">
            <summary>
            Renvoie la valeur de la colonne spécifiée en tant que valeur du type spécifié
            </summary>
            <typeparam name="T">Le type de retour souhaité</typeparam>
            <param name="record">Le IDataRecord qui contient les données</param>
            <param name="name">Le nom de la colonne à récupérer</param>
            <returns>La valeur de la colonne</returns>
            <exception cref="T:System.InvalidCastException">La conversion spécifiée n'est pas valide</exception>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetStream(System.Data.IDataRecord,System.Int32)">
            <summary>
            Renvoie un flux permettant d'accéder aux données d'un champ binaire (BLOB) du IDataRecord
            </summary>
            <param name="record">IDataRecord à partir duquel lire les données</param>
            <param name="ordinal">Index du champ qui contient les données</param>
            <returns>Un flux permettant de lire les données du champ spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.GetStream(System.Data.IDataRecord,System.String)">
            <summary>
            Renvoie un flux en lecture seule permettant d'accéder aux données d'un champ binaire (BLOB) du IDataRecord
            </summary>
            <param name="record">IDataRecord à partir duquel lire les données</param>
            <param name="name">Nom du champ qui contient les données</param>
            <returns>Un flux permettant de lire les données du champ spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AsEnumerable(System.Data.IDataReader)">
            <summary>
            Renvoie un IDataReader comme une séquence de IDataRecord
            </summary>
            <param name="reader">Le IDataReader à énumérer</param>
            <returns>Une séquence de IDataRecord</returns>
            <remarks>ATTENTION : les données de chaque ligne doivent être récupérées avant de passer à la suivante,
            sinon les données renvoyées ne seront pas celles attendues. Cela implique qu'il ne faut pas utiliser
            <c>ToList()</c> ou <c>ToArray()</c> (par exemple) sur la séquence de <c>IDataRecord</c> obtenue.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddRowUpdatingHandler(System.Data.IDbDataAdapter,System.EventHandler{System.Data.Common.RowUpdatingEventArgs})">
            <summary>
            Ajoute un handler d'évènement RowUpdating à un DbDataAdapter
            </summary>
            <param name="adapter">L'adapteur pour lequel ajouter un handler d'évènement</param>
            <param name="handler">Le handler d'évènement à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.AddRowUpdatedHandler(System.Data.IDbDataAdapter,System.EventHandler{System.Data.Common.RowUpdatedEventArgs})">
            <summary>
            Ajoute un handler d'évènement RowUpdated à un DbDataAdapter
            </summary>
            <param name="adapter">L'adapteur pour lequel ajouter un handler d'évènement</param>
            <param name="handler">Le handler d'évènement à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.RemoveRowUpdatingHandler(System.Data.IDbDataAdapter,System.EventHandler{System.Data.Common.RowUpdatingEventArgs})">
            <summary>
            Enlève un handler d'évènement RowUpdating d'un DbDataAdapter
            </summary>
            <param name="adapter">L'adapteur pour lequel enlever un handler d'évènement</param>
            <param name="handler">Le handler d'évènement à enlever</param>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.RemoveRowUpdatedHandler(System.Data.IDbDataAdapter,System.EventHandler{System.Data.Common.RowUpdatedEventArgs})">
            <summary>
            Enlève un handler d'évènement RowUpdated d'un DbDataAdapter
            </summary>
            <param name="adapter">L'adapteur pour lequel enlever un handler d'évènement</param>
            <param name="handler">Le handler d'évènement à enlever</param>
        </member>
        <member name="T:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream">
            <summary>
            Permet d'accéder à un champ binaire d'un IDataRecord sous forme de flux
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.#ctor(System.Data.IDataRecord,System.Int32)">
            <summary>
            Initialise une nouvelle instance de DbBinaryFieldStream
            </summary>
            <param name="record">IDataRecord à partir duquel lire les données</param>
            <param name="fieldIndex">Index du champ dans lequel se trouvent les données</param>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.Flush">
            <summary>
            Non supporté.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Lit une séquence d'octets à partir du flux et avance la position dans le flux du nombre d'octets lus
            </summary>
            <param name="buffer">Buffer dans lequel copier les données</param>
            <param name="offset">Position dans le buffer à partir de laquelle copier les données</param>
            <param name="count">Nombre maximum d'octets à lire</param>
            <returns>Le nombre d'octets lus</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Définit la position courante dans le flux
            </summary>
            <param name="offset">Position désirée par rapport au paramètre <c>origin</c></param>
            <param name="origin">Valeur indiquant le point de référence utilisé pour obtenir la nouvelle position</param>
            <returns></returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.SetLength(System.Int64)">
            <summary>
            Non supporté.
            </summary>
            <param name="value">Nouvelle longueur du flux</param>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Non supporté
            </summary>
            <param name="buffer">Buffer à partir duquel copier les données</param>
            <param name="offset">Position dans le buffer à partir de laquelle copier les données</param>
            <param name="count">Nombre maximum d'octets à copier</param>
        </member>
        <member name="P:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.CanRead">
            <summary>
            Indique si le flux prend en charge la lecture.
            <remarks>Renvoie toujours true pour DbBinaryFieldStream</remarks>
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.CanSeek">
            <summary>
            Indique si le flux prend en charge la recherche.
            <remarks>Renvoie toujours true pour DbBinaryFieldStream</remarks>
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.CanWrite">
            <summary>
            Indique si le flux prend en charge l'écriture.
            <remarks>Renvoie toujours false pour DbBinaryFieldStream</remarks>
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.Length">
            <summary>
            Renvoie la longueur du flux.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Data.DataExtensions.DbBinaryFieldStream.Position">
            <summary>
            Obtient ou définit la position courante dans le flux.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Data.DataSetExtensions">
            <summary>
             Fournit des méthodes d'extension pour la manipulation des datasets
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Crée une DataTable à partir d'une séquence d'objets
            </summary>
            <typeparam name="T">Le type des éléments de la séquence</typeparam>
            <param name="source">La séquence à partir de laquelle créer une DataTable</param>
            <returns>Une DataTable contenant les données de la séquence source</returns>
            <remarks>Les colonnes de la table sont crées à partir des propriétés publiques non-indexées des éléments de la séquence.
            Les propriétés de type référence ou Nullable&lt;T&gt; génèrent des colonnes avec AllowDBNull = true. Les propriétés de type
            valeur génèrent des colonnes avec AllowDBNull = false</remarks>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.Sort(System.Data.DataTable,System.Data.DataColumn)">
            <summary>
            Retourne un DataTable trié selon la colonne spécifiée, dans l'ordre croissant
            </summary>
            <param name="table">DataTable à trier</param>
            <param name="column">Colonne selon laquelle trier le DataTable</param>
            <returns>Retourne un DataTable trié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.Sort(System.Data.DataTable,System.Data.DataColumn,System.ComponentModel.ListSortDirection)">
            <summary>
            Retourne un DataTable trié selon la colonne et la direction spécifiées
            </summary>
            <param name="table">DataTable à trier</param>
            <param name="column">Colonne selon laquelle trier le DataTable</param>
            <param name="direction">Direction selon laquelle trier le DataTable</param>
            <returns>Retourne un DataTable trié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.Sort(System.Data.DataTable,System.String)">
            <summary>
            Retourne un DataTable trié selon la colonne spécifiée, dans l'ordre croissant
            </summary>
            <param name="table">DataTable à trier</param>
            <param name="column">Nom de la colonne selon laquelle trier le DataTable</param>
            <returns>Retourne un Datatable trié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.Sort(System.Data.DataTable,System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Retourne un DataTable trié selon la colonne et la direction spécifiées
            </summary>
            <param name="table">DataTable à trier</param>
            <param name="column">Nom de la colonne selon laquelle trier le DataTable</param>
            <param name="direction">Direction selon laquelle trier le DataTable</param>
            <returns>Retourne un DataTable trié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.ToCsv(System.Data.DataTable)">
            <summary>
            Retourne une string au format CSV dans laquelle sera exporté le DataTable
            </summary>
            <param name="table">DataTable à partir duquel effectuer la transformation</param>
            <returns>String représentant un DataTable au format CSV</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.ToCsv(System.Data.DataTable,System.Boolean)">
            <summary>
            Retourne une string au format CSV dans laquelle sera exporté le DataTable
            </summary>
            <param name="table">DataTable à partir duquel effectuer la transformation</param>
            <param name="includeHeader">Booléen indiquant si les nom des colonnes doivent être inclues dans le CSV généré</param>
            <returns>String représentant un DataTable au format CSV</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.ToCsv(System.Data.DataTable,System.String)">
            <summary>
            Retourne une string au format CSV dans laquelle sera exporté le DataTable
            </summary>
            <param name="table">DataTable à partir duquel effectuer la transformation</param>
            <param name="delimiter">Chaîne représentant le délimiteur à utiliser pour la transformation</param>
            <returns>String représentant un DataTable au format CSV</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.ToCsv(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Retourne une string au format CSV dans laquelle sera exporté le DataTable
            </summary>
            <param name="table">DataTable à partir duquel effectuer la transformation</param>
            <param name="delimiter">Chaîne représentant le délimiteur à utiliser pour la transformation</param>
            <param name="includeHeader">Booléen indiquant si les nom des colonnes doivent être inclues dans le CSV généré</param>
            <returns>String représentant un DataTable au format CSV</returns>
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.SaveAsCsv(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Crée un fichier CSV dans lequel sera exporté le DataTable
            </summary>
            <param name="table">DataTable à partir duquel effectuer la transformation</param>
            <param name="delimiter">Chaîne représentant le délimiteur à utiliser pour la transformation</param>
            <param name="includeHeader">Booléen indiquant si les nom des colonnes doivent être inclues dans le CSV généré</param>
            <param name="filePath">Chemin du fichier dans lequel inscrire le DataTable</param>             
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.SaveAsCsv(System.Data.DataTable,System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Crée un fichier CSV dans lequel sera exporté le DataTable
            </summary>
            <param name="table">DataTable à partir duquel effectuer la transformation</param>
            <param name="delimiter">Chaîne représentant le délimiteur à utiliser pour la transformation</param>
            <param name="includeHeader">Booléen indiquant si les nom des colonnes doivent être inclues dans le CSV généré</param>
            <param name="stream">stream dans lequel inscrire le DataTable</param>             
        </member>
        <member name="M:Developpez.Dotnet.Data.DataSetExtensions.SaveAsCsv(System.Data.DataTable,System.IO.TextWriter,System.String,System.Boolean)">
            <summary>
            Crée un fichier CSV dans lequel sera exporté le DataTable
            </summary>
            <param name="table">DataTable à partir duquel effectuer la transformation</param>
            <param name="delimiter">Chaîne représentant le délimiteur à utiliser pour la transformation</param>
            <param name="includeHeader">Booléen indiquant si les nom des colonnes doivent être inclues dans le CSV généré</param>
            <param name="textWriter">TextWriter dans lequel inscrire le DataTable</param> 
        </member>
        <member name="T:Developpez.Dotnet.DateExtensions">
            <summary>
            Permet d'utiliser des methodes d'extensions sur les types de Date.
            En particulier, permet d'utiliser des expressions "à la Ruby" en C#
            Par exemple, plutôt que de faire DateTime.Now.AddMinutes(5), on fera:
            5.Minutes().FromNow()
            </summary>)
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Days(System.Int32)">
            <summary>
            Retourne une durée correspondant au nombre de jours passé en paramètre
            </summary>
            <param name="value">Nombre de jours dans la période</param>
            <returns>Une durée correspondant au nombre de jours spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Hours(System.Int32)">
            <summary>
            Retourne une durée correspondant au nombre d'heures passé en paramètre
            </summary>
            <param name="value">Nombre de heures dans la période</param>
            <returns>Une durée correspondant au nombre d'heures spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Minutes(System.Int32)">
            <summary>
            Retourne une durée correspondant au nombre de minutes passé en paramètre
            </summary>
            <param name="value">Nombre de minutes dans la période</param>
            <returns>Une durée correspondant au nombre de minutes spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Seconds(System.Int32)">
            <summary>
            Retourne une durée correspondant au nombre de secondes passé en paramètre
            </summary>
            <param name="value">Nombre de secondes dans la période</param>
            <returns>Une durée correspondant au nombre de secondes spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Milliseconds(System.Int32)">
            <summary>
            Retourne une durée correspondant au nombre de millisecondes passé en paramètre
            </summary>
            <param name="value">Nombre de millisecondes dans la période</param>
            <returns>Une durée correspondant au nombre de millisecondes spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Ago(System.TimeSpan)">
            <summary>
            Retourne une date correspondant à la durée précédant la date courante
            </summary>
            <param name="timeSpan">Durée que l'on veut soustraire a la date courante</param>
            <returns>La date correspondant à la durée précédent la date courante</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.FromNow(System.TimeSpan)">
            <summary>
            Retourne une date correspondant à la durée suivant la date courante
            </summary>
            <param name="timeSpan">Durée que l'on veut ajouter a la date courante</param>
            <returns>La date correspondant à la durée suivant la date courante</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.From(System.TimeSpan,System.DateTime)">
            <summary>
            Retourne une date correspondant à la durée suivant la date de départ spécifiée
            </summary>
            <param name="timeSpan">Durée que l'on veut ajouter a la date de départ spécifiée</param>
            <param name="startDate">Date de départ</param>
            <returns>La date correspondant à la durée suivant la date de départ spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Before(System.TimeSpan,System.DateTime)">
            <summary>
            Retourne une date correspondant à la durée précédent la date spécifiée
            </summary>
            <param name="timeSpan">Durée que l'on veut retrancher de la date spécifiée</param>
            <param name="endDate">Date de fin</param>
            <returns>La date correspondant à la durée précédent la date spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.ToUnixTimestamp(System.DateTime)">
            <summary>
            Convertit un DateTime en timestamp Unix
            </summary>
            <param name="date">La date à convertir</param>
            <returns>Le timestamp Unix équivalent</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.ToDateTime(System.Int64)">
            <summary>
            Convertit un timestamp Unix en DateTime
            </summary>
            <param name="unixTimestamp">Le timestamp à convertir</param>
            <returns>Le DateTime équivalent</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Next(System.DateTime,System.DayOfWeek)">
            <summary>
            Renvoie le prochain jour de la semaine spécifié à partir d'une date
            </summary>
            <param name="from">la date à partir de laquelle on recherche</param>
            <param name="dayOfWeek">le jour de la semaine recherché</param>
            <returns>Le prochain <c>dayOfWeek</c> spécifié à partir de la date</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Next(System.DayOfWeek)">
            <summary>
            Renvoie le prochain jour de la semaine spécifié à partir de la date courante
            </summary>
            <param name="dayOfWeek">le jour de la semaine recherché</param>
            <returns>Le prochain <c>dayOfWeek</c> spécifié à partir de la date courante</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Previous(System.DateTime,System.DayOfWeek)">
            <summary>
            Renvoie le précédent jour de la semaine spécifié à partir d'une date
            </summary>
            <param name="from">la date à partir de laquelle on recherche</param>
            <param name="dayOfWeek">le jour de la semaine recherché</param>
            <returns>Le précédent <c>dayOfWeek</c> spécifié à partir de la date</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Previous(System.DayOfWeek)">
            <summary>
            Renvoie le précédent jour de la semaine spécifié à partir de la date courante
            </summary>
            <param name="dayOfWeek">le jour de la semaine recherché</param>
            <returns>Le précédent <c>dayOfWeek</c> spécifié à partir de la date courante</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.AddWorkingDays(System.DateTime,System.Int32)">
            <summary>
            Ajoute le nombre spécifié de jours ouvrés à la date
            </summary>
            <param name="date">Date d'origine</param>
            <param name="days">Nombre de jours ouvrés à ajouter</param>
            <returns>La date <c>days</c> jours ouvrés après <c>date</c> (ou avant si <c>days</c> est négatif)</returns>
            <remarks>Cette méthode suppose que la semaine comporte 5 jours ouvrés, du lundi au vendredi. Les jours fériés ne sont pas pris en compte.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.IsWorkingDay(System.DateTime)">
            <summary>
            Indique si la date est un jour ouvré
            </summary>
            <param name="date">La date à vérifier</param>
            <returns><c>true</c> si la date est un jour ouvré, sinon <c>false</c>.</returns>
            <remarks>Cette méthode suppose que la semaine comporte 5 jours ouvrés, du lundi au vendredi. Les jours fériés ne sont pas pris en compte.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.GetStartOfWeek(System.Int32,System.Int32)">
            <summary>
             Calcule la date du début de la semaine spécifiée, en utilisant la règle
             de calcul et le premier jour de la semaine de la culture courante.
            </summary>
            <param name="year">Année</param>
            <param name="weekOfYear">Numéro de semaine</param>
            <returns>La date de début de la semaine spécifiée</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">L'un des paramètres
             est en dehors de sa plage de valeurs autorisée. Peut se produire
             notamment si l'année <c>year</c> a moins de <c>weekNumber</c>
             semaines.</exception>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.GetStartOfWeek(System.Int32,System.Int32,System.Globalization.CalendarWeekRule)">
            <summary>
             Calcule la date du début de la semaine spécifiée, en utilisant la règle
             de calcul spécifiée et le premier jour de la semaine de la culture courante.
            </summary>
            <param name="year">Année</param>
            <param name="weekOfYear">Numéro de semaine</param>
            <param name="rule">Règle de calcul du numéro de semaine</param>
            <returns>La date de début de la semaine spécifiée</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">L'un des paramètres
             est en dehors de sa plage de valeurs autorisée. Peut se produire
             notamment si l'année <c>year</c> a moins de <c>weekNumber</c>
             semaines.</exception>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.GetStartOfWeek(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
             Calcule la date du début de la semaine spécifiée, en utilisant la règle
             de calcul de la culture courante et le premier jour de la semaine spécifié.
            </summary>
            <param name="year">Année</param>
            <param name="weekOfYear">Numéro de semaine</param>
            <param name="firstDayOfWeek">Premier jour de la semaine</param>
            <returns>La date de début de la semaine spécifiée</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">L'un des paramètres
             est en dehors de sa plage de valeurs autorisée. Peut se produire
             notamment si l'année <c>year</c> a moins de <c>weekNumber</c>
             semaines.</exception>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.GetStartOfWeek(System.Int32,System.Int32,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
             Calcule la date du début de la semaine spécifiée, en utilisant la règle
             de calcul spécifiée et le premier jour de la semaine spécifié.
            </summary>
            <param name="year">Année</param>
            <param name="weekOfYear">Numéro de semaine</param>
            <param name="rule">Règle de calcul du numéro de semaine</param>
            <param name="firstDayOfWeek">Premier jour de la semaine</param>
            <returns>La date de début de la semaine spécifiée</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">L'un des paramètres
             est en dehors de sa plage de valeurs autorisée. Peut se produire
             notamment si l'année <c>year</c> a moins de <c>weekNumber</c>
             semaines.</exception>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.WeekOfYear(System.DateTime)">
            <summary>
            Calcule le numéro de la semaine à laquelle appartient une date, en utilisant la règle de calcul
            et le premier jour de la semaine de la culture courante.
            </summary>
            <param name="date">La date dont on veut le numéro de semaine</param>
            <returns>Le numéro de la semaine à laquelle appartient la date</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.WeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule)">
            <summary>
            Calcule le numéro de la semaine à laquelle appartient une date, en utilisant la règle de calcul
            spécifiée et le premier jour de la semaine de la culture courante.
            </summary>
            <param name="date">La date dont on veut le numéro de semaine</param>
            <param name="rule">La règle de calcul du numéro de semaine à utiliser</param>
            <returns>Le numéro de la semaine à laquelle appartient la date</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.WeekOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            Calcule le numéro de la semaine à laquelle appartient une date, en utilisant la règle de calcul
            de la culture courante, et le premier jour de la semaine spécifié.
            </summary>
            <param name="date">La date dont on veut le numéro de semaine</param>
            <param name="firstDayOfWeek">Le premier jour de la semaine</param>
            <returns>Le numéro de la semaine à laquelle appartient la date</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.WeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            Calcule le numéro de la semaine à laquelle appartient une date, en utilisant la règle de calcul
            et le premier jour de la semaine spécifiés.
            </summary>
            <param name="date">La date dont on veut le numéro de semaine</param>
            <param name="rule">La règle de calcul du numéro de semaine à utiliser</param>
            <param name="firstDayOfWeek">Le premier jour de la semaine</param>
            <returns>Le numéro de la semaine à laquelle appartient la date</returns>
        </member>
        <member name="M:Developpez.Dotnet.DateExtensions.Truncate(System.DateTime,Developpez.Dotnet.DateTimeComponent)">
            <summary>
            Tronque une date au composant (année, mois, jour, heure, minute, seconde, milliseconde) spécifié
            </summary>
            <param name="date">Date à tronquer</param>
            <param name="component">Composant auquel la date doit être tronquée</param>
            <returns>La date tronquée au composant spécifié</returns>
        </member>
        <member name="T:Developpez.Dotnet.DateTimeComponent">
            <summary>
            Représente les différents composants d'une date
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.DateTimeComponent.Millisecond">
            <summary>
            Milliseconde
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.DateTimeComponent.Second">
            <summary>
            Seconde
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.DateTimeComponent.Minute">
            <summary>
            Minute
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.DateTimeComponent.Hour">
            <summary>
            Heure
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.DateTimeComponent.Day">
            <summary>
            Jour
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.DateTimeComponent.Month">
            <summary>
            Mois
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.DateTimeComponent.Year">
            <summary>
            Année
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.AutoStopwatch">
            <summary>
            Permet de chronométrer un traitement effectué dans un bloc <c>using</c>.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.AutoStopwatch.#ctor">
            <summary>
            Initialise une nouvelle instance de <c>AutoStopwatch</c>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.AutoStopwatch.#ctor(System.Action{System.TimeSpan})">
            <summary>
            Initialise une nouvelle instance de <c>AutoStopwatch</c>
            en spécifiant l'action à effectuer quand le traitement se termine
            </summary>
            <param name="action">Action a exécuter quand le traitement est terminé (prend en paramètre le temps écoulé)</param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.AutoStopwatch.Stop">
            <summary>
            Arrête le chronomètre.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.AutoStopwatch.System#IDisposable#Dispose">
            <summary>
            Libère les ressources utilisées par l'objet et appelle l'action de fin de traitement.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.AutoStopwatch.StartNew(System.Action{System.TimeSpan})">
            <summary>
            Démarre une nouvelle AutoStopwatch avec l'action indiquée
            </summary>
            <param name="action">Action a exécuter quand le traitement est terminé (prend en paramètre le temps écoulé)</param>
            <returns>Une nouvelle instance de AutoStopwatch</returns>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.AutoStopwatch.Elapsed">
            <summary>
            Renvoie le temps écoulé depuis le début du traitement
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.AutoStopwatch.ElapsedMilliseconds">
            <summary>
            Renvoie le nombre de millisecondes écoulées depuis le début du traitement
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.AutoStopwatch.ElapsedTicks">
            <summary>
            Renvoie le nombre de ticks écoulés depuis le début du traitement
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.DisposableAction">
            <summary>
            Exécute une action lorsque cet objet est disposé. Permet de garantir l'exécution d'une
            action à la fin d'un bloc using.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.DisposableAction.#ctor(System.Action)">
            <summary>
            Initialise une nouvelle instance de DisposableAction.
            </summary>
            <param name="action">L'action à exécuter lorsque l'objet est disposé.</param>
        </member>
        <member name="M:Developpez.Dotnet.DisposableAction.Dispose">
            <summary>
            Exécute l'action spécifiée à la création de l'objet. L'action n'est exécutée qu'une
            fois même si Dispose est appelée plusieurs fois.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.DisposablePointer">
            <summary>
            Représente un pointeur non managé qui implémente IDisposable pour libérer la ressource.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.#ctor(System.IntPtr,System.Action{System.IntPtr})">
            <summary>
            Initialise une nouvelle instance de DisposablePointer, avec la valeur spécifiée et
            l'action spécifiée pour libérer le pointeur.
            </summary>
            <param name="value">Valeur initiale du pointeur</param>
            <param name="disposeAction">Action à exécuter pour libérer le pointeur</param>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.Dispose">
            <summary>
            Libère la ressource représentée par le pointeur, en appelant l'action spécifiée
            en paramètre du constructeur
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.Finalize">
            <summary>
            Destructeur
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.Dispose(System.Boolean)">
            <summary>
            Libère la ressource représentée par le pointeur, en appelant l'action spécifiée
            en paramètre du constructeur
            </summary>
            <param name="disposing">Inutilisé</param>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.AllocHGlobal(System.Int32)">
            <summary>
            Alloue la quantité spécifiée de mémoire non managée, et renvoie le pointeur obtenu
            sous forme d'un DisposablePointer.
            </summary>
            <param name="size">Quantité de mémoire à allouer</param>
            <returns>Un DisposablePointer représentant la zone mémoire allouée</returns>
        </member>
        <member name="M:Developpez.Dotnet.DisposablePointer.AsDisposable(System.IntPtr,System.Action{System.IntPtr})">
            <summary>
            Méthode d'extension qui crée un wrapper IDisposable pour un pointeur
            </summary>
            <param name="value">Le pointeur à wrapper</param>
            <param name="disposeAction">L'action à effectuer pour libérer la ressource</param>
            <returns>Un objet IDisposable qui wrappe le pointeur</returns>
        </member>
        <member name="P:Developpez.Dotnet.DisposablePointer.Value">
            <summary>
            Renvoie la valeur du pointeur
            </summary>
            <exception cref="T:System.ObjectDisposedException">L'objet a été disposé et le pointeur libéré</exception>
        </member>
        <member name="T:Developpez.Dotnet.EnumExtensions">
            <summary>
            Fournit des méthodes d'extension pour manipuler les énumérations
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.CheckIsEnum``1(System.Boolean)">
            <summary>
            Vérifie que le type spécifié est une énumération, et optionnellement s'il a l'attribut 'Flags'.
            Si ce n'est pas le cas, une exception est levée.
            </summary>
            <param name="withFlags">indique si le type à vérifier doit porter l'attribut Flags</param>
            <typeparam name="T">Le type à vérifier</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.HasFlag``1(``0,``0)">
            <summary>
            Vérifie si le flag spécifié est présent dans la valeur
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à vérifier</param>
            <param name="flag">Le flag à vérifier</param>
            <returns>true si le flag est présent, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.GetFlags``1(``0)">
            <summary>
            Convertit une combinaison de flags en une liste de valeurs de l'énumération, en
            excluant les combinaisons prédéfinies.
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à convertir</param>
            <returns>La liste des flags présents dans la combinaison</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.GetFlags``1(``0,System.Boolean)">
            <summary>
            Convertit une combinaison de flags en une liste de valeurs de l'énumération, en
            excluant optionnellement les combinaisons prédéfinies.
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à convertir</param>
            <param name="flagsOnly">Indique si seuls les flags simples sont renvoyés, en excluant les combinaisons connues.</param>
            <returns>La liste des flags présents dans la combinaison</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.SetFlags``1(``0,``0,System.Boolean)">
            <summary>
            Définit la valeur d'un ou des flags dans une combinaison de flags
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à modifier</param>
            <param name="flags">Le ou les flags à définir</param>
            <param name="on">true pour ajouter le flag, false pour l'enlever</param>
            <returns>La combinaison résultant de l'ajout ou de la suppression des flags</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.SetFlags``1(``0,``0)">
            <summary>
            Ajoute un ou des flags à une combinaison
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à modifier</param>
            <param name="flags">Le ou les flags à ajouter</param>
            <returns>La combinaison résultant de l'ajout des flags</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ClearFlags``1(``0,``0)">
            <summary>
            Supprime un ou des flags d'une combinaison
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">La combinaison de flags à modifier</param>
            <param name="flags">Le ou les flags à supprimer</param>
            <returns>La combinaison résultant de la suppression des flags</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.CombineFlags``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convertit une liste de flags en une combinaison de ces flags
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="flags">La liste de flags à combiner</param>
            <returns>La combinaison des flags de la liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.GetDescription``1(``0)">
            <summary>
            Renvoie, si elle est définie, la description d'une valeur d'une énumération, spécifiée par
            l'attribut DescriptionAttribute. Si la description n'est pas définie, renvoie null.
            </summary>
            <typeparam name="T">Le type de l'énumération</typeparam>
            <param name="value">la valeur pour laquelle obtenir une description</param>
            <returns>La description de la valeur si elle est définie, null sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Convertit une chaine en une valeur d'énumération, en ignorant éventuellement la casse
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="stringValue">Chaine à convertir</param>
            <param name="ignoreCase">true pour ignorer la casse, false sinon</param>
            <returns>La valeur d'énumération correspondant à la chaine</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.String)">
            <summary>
            Convertit une chaine en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="stringValue">Chaine à convertir</param>
            <returns>La valeur d'énumération correspondant à la chaine</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.SByte)">
            <summary>
            Convertit un entier signé sur 8 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.Int16)">
            <summary>
            Convertit un entier signé sur 16 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.Int32)">
            <summary>
            Convertit un entier signé sur 32 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.Int64)">
            <summary>
            Convertit un entier signé sur 64 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.Byte)">
            <summary>
            Convertit un entier non signé sur 8 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.UInt16)">
            <summary>
            Convertit un entier non signé sur 16 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.UInt32)">
            <summary>
            Convertit un entier non signé sur 32 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="M:Developpez.Dotnet.EnumExtensions.ToEnum``1(System.UInt64)">
            <summary>
            Convertit un entier non signé sur 64 bits en une valeur d'énumération
            </summary>
            <typeparam name="T">Type d'énumération souhaité</typeparam>
            <param name="value">Valeur à convertir</param>
            <returns>La valeur d'énumération correspondant à la valeur</returns>
        </member>
        <member name="T:Developpez.Dotnet.EnumExtensions.EnumInfoCache`1">
            <summary>
            Cette classe permet de mettre en cache les informations d'un type
            d'énumération en particulier. Les informations ne sont évaluées
            qu'une fois par type, dans le constructeur statique
            </summary>
            <typeparam name="T">Le type d'énumération</typeparam>
        </member>
        <member name="T:Developpez.Dotnet.EventExtensions">
            <summary>
            Fournit des méthodes d'extension pour faciliter l'utilisation des évènements
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.EventExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Déclenche un évènement en vérifiant si des handlers y sont abonnés
            </summary>
            <param name="pEvent">L'évènement à déclencher</param>
            <param name="sender">L'objet à l'origine de l'évènement</param>
        </member>
        <member name="M:Developpez.Dotnet.EventExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Déclenche un évènement en vérifiant si des handlers y sont abonnés
            </summary>
            <param name="pEvent">L'évènement à déclencher</param>
            <param name="sender">L'objet à l'origine de l'évènement</param>
            <param name="e">Les paramètres de l'évènement</param>
        </member>
        <member name="M:Developpez.Dotnet.EventExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Déclenche un évènement en vérifiant si des handlers y sont abonnés
            </summary>
            <typeparam name="TEventArgs">Type des paramètres de l'évènement</typeparam>
            <param name="pEvent">L'évènement à déclencher</param>
            <param name="sender">L'objet à l'origine de l'évènement</param>
            <param name="e">Les paramètres de l'évènement</param>
        </member>
        <member name="M:Developpez.Dotnet.EventExtensions.Raise(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.String)">
            <summary>
            Déclenche un évènement PropertyChanged en vérifiant si des handlers y sont abonnés
            </summary>
            <param name="pEvent">L'évènement à déclencher</param>
            <param name="sender">L'objet à l'origine de l'évènement</param>
            <param name="propertyName">Le nom de la propriété qui a changé</param>
        </member>
        <member name="M:Developpez.Dotnet.EventExtensions.Raise``1(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Déclenche un évènement PropertyChanged en vérifiant si des handlers y sont abonnés
            </summary>
            <typeparam name="T">Type de la propriété qui a changé</typeparam>
            <param name="pEvent">L'évènement à déclencher</param>
            <param name="sender">L'objet à l'origine de l'évènement</param>
            <param name="expression">L'expression indiquant la propriété qui a changé</param>
        </member>
        <member name="T:Developpez.Dotnet.FuncExtensions">
            <summary>
            Fournit des méthodes d'extension pour les fonctions et actions
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.AsCached``1(System.Func{``0})">
            <summary>
            Renvoie un wrapper de la fonction qui met en cache le résultat,
            de façon à n'appeler la fonction qu'une seule fois
            </summary>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à mettre en cache</param>
            <returns>La valeur de retour de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.AsCached``2(System.Func{``0,``1})">
            <summary>
            Renvoie un wrapper de la fonction qui met en cache le résultat
            pour chaque valeur de l'argument, de façon à n'appeler la fonction
            qu'une seule fois pour chaque valeur d'argument
            </summary>
            <typeparam name="T">Le type du paramètre</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à mettre en cache</param>
            <returns>La valeur de retour de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ToPredicate``1(System.Func{``0,System.Boolean})">
            <summary>
            Convertit un délégué <![CDATA[Func<T, bool>]]> en délégué <![CDATA[Predicate<T>]]>
            </summary>
            <typeparam name="T">Le type du paramètre</typeparam>
            <param name="function">La fonction à convertir</param>
            <returns>Un prédicat équivalent à la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ToFunc``1(System.Predicate{``0})">
            <summary>
            Convertit un délégué <![CDATA[Predicate<T>]]> en délégué <![CDATA[Func<T, bool>]]>
            </summary>
            <typeparam name="T">Le type du paramètre</typeparam>
            <param name="predicate">Le prédicat à convertir</param>
            <returns>Une fonction équivalente au prédicat</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Negate``1(System.Func{``0,System.Boolean})">
            <summary>
            Renvoie la négation d'un prédicat
            </summary>
            <typeparam name="T">Le type de paramètre du prédicat</typeparam>
            <param name="function">Le prédicat dont on veut obtenir la négation</param>
            <returns>La négation du prédicat</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Negate``1(System.Predicate{``0})">
            <summary>
            Renvoie la négation d'un prédicat
            </summary>
            <typeparam name="T">Le type de paramètre du prédicat</typeparam>
            <param name="predicate">Le prédicat dont on veut obtenir la négation</param>
            <returns>La négation du prédicat</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ToComparison``1(System.Func{``0,``0,System.Int32})">
            <summary>
            Convertit un délégué <![CDATA[Func<T, T, int>]]> en délégué <![CDATA[Comparison<T>]]>
            </summary>
            <typeparam name="T">Le type des paramètres</typeparam>
            <param name="function">La fonction à convertir</param>
            <returns>Une comparaison équivalente à la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ToFunc``1(System.Comparison{``0})">
            <summary>
            Convertit un délégué <![CDATA[Comparison<T>]]> en délégué <![CDATA[Func<T, T, int>]]>
            </summary>
            <typeparam name="T">Le type des paramètres</typeparam>
            <param name="comparison">La comparaison à convertir</param>
            <returns>Une fonction équivalente à la comparaison</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.AsCached``3(System.Func{``0,``1,``2})">
            <summary>
            Renvoie un wrapper de la fonction qui met en cache le résultat
            pour chaque ensemble de valeurs des arguments, de façon à n'appeler la fonction
            qu'une seule fois pour chaque ensemble de valeurs des arguments
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à mettre en cache</param>
            <returns>Une version de la fonction qui met en cache ses résultats</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.AsCached``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Renvoie un wrapper de la fonction qui met en cache le résultat
            pour chaque ensemble de valeurs des arguments, de façon à n'appeler la fonction
            qu'une seule fois pour chaque ensemble de valeurs des arguments
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à mettre en cache</param>
            <returns>Une version de la fonction qui met en cache ses résultats</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.AsCached``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Renvoie un wrapper de la fonction qui met en cache le résultat
            pour chaque ensemble de valeurs des arguments, de façon à n'appeler la fonction
            qu'une seule fois pour chaque ensemble de valeurs des arguments
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à mettre en cache</param>
            <returns>Une version de la fonction qui met en cache ses résultats</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``3(System.Func{``0,``1,``2})">
            <summary>
            Renvoie une version curryfiée de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à curryfier</param>
            <returns>une version curryfiée de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``2(System.Action{``0,``1})">
            <summary>
            Renvoie une version curryfiée de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <param name="action">L'action à curryfier</param>
            <returns>une version curryfiée de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Renvoie une version curryfiée de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à curryfier</param>
            <returns>une version curryfiée de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``3(System.Action{``0,``1,``2})">
            <summary>
            Renvoie une version curryfiée de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <param name="action">L'action à curryfier</param>
            <returns>une version curryfiée de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Renvoie une version curryfiée de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à curryfier</param>
            <returns>une version curryfiée de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.Curry``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Renvoie une version curryfiée de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <param name="action">L'action à curryfier</param>
            <returns>une version curryfiée de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyFirst``3(System.Func{``0,``1,``2},``0)">
            <summary>
            Renvoie une application partielle de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à appliquer partiellement</param>
            <param name="firstArg">La valeur fixe pour le premier paramètre de la fonction</param>
            <returns>une application partielle de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyFirst``2(System.Action{``0,``1},``0)">
            <summary>
            Renvoie une application partielle de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <param name="action">L'action à appliquer partiellement</param>
            <param name="firstArg">La valeur fixe pour le premier paramètre de l'action</param>
            <returns>une application partielle de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplySecond``3(System.Func{``0,``1,``2},``1)">
            <summary>
            Renvoie une application partielle de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à appliquer partiellement</param>
            <param name="secondArg">La valeur fixe pour le second paramètre de la fonction</param>
            <returns>une application partielle de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplySecond``2(System.Action{``0,``1},``1)">
            <summary>
            Renvoie une application partielle de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <param name="action">L'action à appliquer partiellement</param>
            <param name="secondArg">La valeur fixe pour le second paramètre de l'action</param>
            <returns>une application partielle de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyFirst``4(System.Func{``0,``1,``2,``3},``0)">
            <summary>
            Renvoie une application partielle de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à appliquer partiellement</param>
            <param name="firstArg">La valeur fixe pour le premier paramètre de la fonction</param>
            <returns>une application partielle de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyFirst``3(System.Action{``0,``1,``2},``0)">
            <summary>
            Renvoie une application partielle de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <param name="action">L'action à appliquer partiellement</param>
            <param name="firstArg">La valeur fixe pour le premier paramètre de l'action</param>
            <returns>une application partielle de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplySecond``4(System.Func{``0,``1,``2,``3},``1)">
            <summary>
            Renvoie une application partielle de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à appliquer partiellement</param>
            <param name="secondArg">La valeur fixe pour le second paramètre de la fonction</param>
            <returns>une application partielle de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplySecond``3(System.Action{``0,``1,``2},``1)">
            <summary>
            Renvoie une application partielle de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <param name="action">L'action à appliquer partiellement</param>
            <param name="secondArg">La valeur fixe pour le second paramètre de l'action</param>
            <returns>une application partielle de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyThird``4(System.Func{``0,``1,``2,``3},``2)">
            <summary>
            Renvoie une application partielle de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à appliquer partiellement</param>
            <param name="thirdArg">La valeur fixe pour le troisième paramètre de la fonction</param>
            <returns>une application partielle de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyThird``3(System.Action{``0,``1,``2},``2)">
            <summary>
            Renvoie une application partielle de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <param name="action">L'action à appliquer partiellement</param>
            <param name="thirdArg">La valeur fixe pour le troisième paramètre de l'action</param>
            <returns>une application partielle de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyFirst``5(System.Func{``0,``1,``2,``3,``4},``0)">
            <summary>
            Renvoie une application partielle de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à appliquer partiellement</param>
            <param name="firstArg">La valeur fixe pour le premier paramètre de la fonction</param>
            <returns>une application partielle de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyFirst``4(System.Action{``0,``1,``2,``3},``0)">
            <summary>
            Renvoie une application partielle de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <param name="action">L'action à appliquer partiellement</param>
            <param name="firstArg">La valeur fixe pour le premier paramètre de l'action</param>
            <returns>une application partielle de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplySecond``5(System.Func{``0,``1,``2,``3,``4},``1)">
            <summary>
            Renvoie une application partielle de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à appliquer partiellement</param>
            <param name="secondArg">La valeur fixe pour le second paramètre de la fonction</param>
            <returns>une application partielle de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplySecond``4(System.Action{``0,``1,``2,``3},``1)">
            <summary>
            Renvoie une application partielle de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <param name="action">L'action à appliquer partiellement</param>
            <param name="secondArg">La valeur fixe pour le second paramètre de l'action</param>
            <returns>une application partielle de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyThird``5(System.Func{``0,``1,``2,``3,``4},``2)">
            <summary>
            Renvoie une application partielle de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à appliquer partiellement</param>
            <param name="thirdArg">La valeur fixe pour le troisième paramètre de la fonction</param>
            <returns>une application partielle de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyThird``4(System.Action{``0,``1,``2,``3},``2)">
            <summary>
            Renvoie une application partielle de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <param name="action">L'action à appliquer partiellement</param>
            <param name="thirdArg">La valeur fixe pour le troisième paramètre de l'action</param>
            <returns>une application partielle de l'action</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyFourth``5(System.Func{``0,``1,``2,``3,``4},``3)">
            <summary>
            Renvoie une application partielle de la fonction
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="function">La fonction à appliquer partiellement</param>
            <param name="fourthArg">La valeur fixe pour le quatrième paramètre de la fonction</param>
            <returns>une application partielle de la fonction</returns>
        </member>
        <member name="M:Developpez.Dotnet.FuncExtensions.ApplyFourth``4(System.Action{``0,``1,``2,``3},``3)">
            <summary>
            Renvoie une application partielle de l'action
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <param name="action">L'action à appliquer partiellement</param>
            <param name="fourthArg">La valeur fixe pour le quatrième paramètre de l'action</param>
            <returns>une application partielle de l'action</returns>
        </member>
        <member name="T:Developpez.Dotnet.IO.NonClosingStreamWrapper">
            <summary>
            Wraps a stream for all operations except Close and Dispose, which
            merely flush the stream and prevent further operations from being
            carried out using this wrapper.
            <remarks>
            Cette classe provient de la librairie MiscUtil créée par Jon Skeet
            http://www.yoda.arachsys.com/csharp/miscutil/
            </remarks>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the class, wrapping the specified stream.
            </summary>
            <param name="stream">The stream to wrap. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">stream is null</exception>
        </member>
        <member name="F:Developpez.Dotnet.IO.NonClosingStreamWrapper.closed">
            <summary>
            Whether this stream has been closed or not
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.CheckClosed">
            <summary>
            Throws an InvalidOperationException if the wrapper is closed.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="offset">
            The byte offset in buffer at which to begin writing data read from the stream.
            </param>
            <param name="count">The maximum number of bytes to read. </param>
            <param name="callback">
            An optional asynchronous callback, to be called when the read is complete.
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular 
            asynchronous read request from other requests.
            </param>
            <returns>
            An IAsyncResult that represents the asynchronous read, 
            which could still be pending.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in buffer from which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="callback">
            An optional asynchronous callback, to be called when the write is complete.
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular asynchronous 
            write request from other requests.
            </param>
            <returns>
            An IAsyncResult that represents the asynchronous write, 
            which could still be pending.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.Close">
            <summary>
            This method is not proxied to the underlying stream; instead, the wrapper
            is marked as unusable for other (non-close/Dispose) operations. The underlying
            stream is flushed if the wrapper wasn't closed before this call.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.CreateObjRef(System.Type)">
            <summary>
            Throws a NotSupportedException.
            </summary>
            <param name="requestedType">The Type of the object that the new ObjRef will reference.</param>
            <returns>n/a</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
            <param name="asyncResult">
            The reference to the pending asynchronous request to finish.
            </param>
            <returns>
            The number of bytes read from the stream, between zero (0) 
            and the number of bytes you requested. Streams only return 
            zero (0) at the end of the stream, otherwise, they should 
            block until at least one byte is available.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.InitializeLifetimeService">
            <summary>
            Throws a NotSupportedException.
            </summary>
            <returns>n/a</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying stream and advances the 
            position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains 
            the specified byte array with the values between offset and 
            (offset + count- 1) replaced by the bytes read from the underlying source.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the data 
            read from the underlying stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the 
            underlying stream.
            </param>
            <returns>The total number of bytes read into the buffer. 
            This can be less than the number of bytes requested if that many 
            bytes are not currently available, or zero (0) if the end of the 
            stream has been reached.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the 
            stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">
            A value of type SeekOrigin indicating the reference 
            point used to obtain the new position.
            </param>
            <returns>The new position within the underlying stream.</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.SetLength(System.Int64)">
            <summary>
            Sets the length of the underlying stream.
            </summary>
            <param name="value">The desired length of the underlying stream in bytes.</param>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the underlying stream and advances 
            the current position within the stream by the number of bytes written.
            </summary>
            <param name="buffer">
            An array of bytes. This method copies count bytes 
            from buffer to the underlying stream.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at 
            which to begin copying bytes to the underlying stream.
            </param>
            <param name="count">The number of bytes to be written to the underlying stream.</param>
        </member>
        <member name="M:Developpez.Dotnet.IO.NonClosingStreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and
            advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream. </param>
        </member>
        <member name="P:Developpez.Dotnet.IO.NonClosingStreamWrapper.BaseStream">
            <summary>
            Stream wrapped by this wrapper
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.IO.NonClosingStreamWrapper.CanRead">
            <summary>
            Indicates whether or not the underlying stream can be read from.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.IO.NonClosingStreamWrapper.CanSeek">
            <summary>
            Indicates whether or not the underlying stream supports seeking.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.IO.NonClosingStreamWrapper.CanWrite">
            <summary>
            Indicates whether or not the underlying stream can be written to.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.IO.NonClosingStreamWrapper.Length">
            <summary>
            Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.IO.NonClosingStreamWrapper.Position">
            <summary>
            Gets or sets the current position in the underlying stream.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.IO.TextWriterExtensions">
            <summary>
            Fournit des méthodes d'extension pour les TextWriter
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.TextWriterExtensions.Tee(System.IO.TextWriter,System.IO.TextWriter,System.IO.TextWriter[])">
            <summary>
            Crée un wrapper qui reproduit la sortie d'un TextWriter sur le ou les autres TextWriters spécifiés.
            </summary>
            <param name="writer">Premier TextWriter</param>
            <param name="other">Second TextWriter</param>
            <param name="others">TextWriters supplémentaires</param>
            <returns>Un wrapper qui reproduit la sortie de <c>writer</c> sur les autres TextWriters.</returns>
        </member>
        <member name="T:Developpez.Dotnet.Language.CurrencyDescriptor">
            <summary>
            Englobe les informations sur le nom d'une devise, pour l'utilisation avec
            NumberConverter.SpellAmount
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.CurrencyDescriptor.ISOCurrencySymbol">
            <summary>
             Symbole ISO de la devise (USD, EUR...)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.CurrencyDescriptor.CurrencySymbol">
            <summary>
            Symbole de la devise ($, €...)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.CurrencyDescriptor.CurrencyName">
            <summary>
            Nom de la devise
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.CurrencyDescriptor.PluralCurrencyName">
            <summary>
            Nom au pluriel de la devise
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.CurrencyDescriptor.CurrencyGender">
            <summary>
            Genre du nom de la devise (masculin/féminin)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.CurrencyDescriptor.CentsName">
            <summary>
            Nom de la subdivision de la devise ("cent", "centime"...)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.CurrencyDescriptor.PluralCentsName">
            <summary>
            Nom au pluriel de la subdivision de la devise ("cents, "centimes"...)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.CurrencyDescriptor.CentsGender">
            <summary>
            Genre du nom de la subdivision de la devise
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Language.CurrencyProviderTypeAttribute">
            <summary>
             Indique les types présents dans l'assembly qui fournissent des devises pour une culture donnée
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Language.CurrencyProviderTypeAttribute.#ctor(System.String,System.Type)">
            <summary>
             Crée une nouvelle instance de CurrencyProviderTypeAttribute
            </summary>
            <param name="culture">Code (IetfLanguageTag) de la culture cible</param>
            <param name="implementation">Type qui fournit les devises pour cette culture</param>
        </member>
        <member name="P:Developpez.Dotnet.Language.CurrencyProviderTypeAttribute.Implementation">
            <summary>
            Type qui fournit les devises pour la culture cible
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.CurrencyProviderTypeAttribute.Culture">
            <summary>
            Code (IetfLanguageTag) de la culture cible
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Language.ICurrencyProvider">
            <summary>
            Définit les méthodes implémentées par un type qui fournit des devises pour une culture donnée
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Language.ICurrencyProvider.GetCurrency(System.String)">
            <summary>
            Obtient la devise avec le code ISO spécifié
            </summary>
            <param name="code">Code ISO de la devise à obtenir</param>
            <returns>Le descripteur de la devise</returns>
        </member>
        <member name="T:Developpez.Dotnet.Language.INumberSpeller">
            <summary>
            Définit les méthodes implémentées par un convertisseur de nombre en toutes lettres
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Language.INumberSpeller.Spell(System.Int64,Developpez.Dotnet.Language.Grammar.Gender,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.INumberSpeller.Spell(System.UInt64,Developpez.Dotnet.Language.Grammar.Gender,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.INumberSpeller.Spell(System.Double,System.Int32)">
            <summary>
            Convertit un nombre en virgule flottante en toutes lettres, avec le nombre de chiffres spécifié après la virgule.
            </summary>
            <param name="value">Nombre en virgule flottante</param>
            <param name="decimalPlaces">Nombre de chiffres après la virgule</param>
            <returns>Le nombre en toutes lettres</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.INumberSpeller.Spell(System.Decimal,System.Int32)">
            <summary>
            Convertit un nombre décimal en toutes lettres, avec le nombre de chiffres spécifié après la virgule.
            </summary>
            <param name="value">Nombre décimal</param>
            <param name="decimalPlaces">Nombre de chiffres après la virgule</param>
            <returns>Le nombre en toutes lettres</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.INumberSpeller.SpellAmount(System.Double,Developpez.Dotnet.Language.CurrencyDescriptor)">
            <summary>
            Convertit un montant en toutes lettres, avec la devise spécifiée.
            </summary>
            <param name="value">Montant en virgule flottante</param>
            <param name="currency">Devise à utiliser</param>
            <returns>Le montant en toutes lettres</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.INumberSpeller.SpellAmount(System.Decimal,Developpez.Dotnet.Language.CurrencyDescriptor)">
            <summary>
            Convertit un montant en toutes lettres, avec la devise spécifiée.
            </summary>
            <param name="value">Montant décimal</param>
            <param name="currency">Devise à utiliser</param>
            <returns>Le montant en toutes lettres</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.FrenchNumberSpeller.MakeTwentyAgree(System.Int32,System.Int32,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Accorder le mot "vingt".
            </summary>
            <returns>Un "s" si le nombre se termine par vingt et n'est pas suivi de "mille".
            Chaîne vide sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.FrenchNumberSpeller.MakeHundredAgree(System.Int64,System.Int64,System.Int32,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Accorder le mot "cent".
            </summary>
            <returns>Un "s" si le nombre est un multiple de 100, strictement supérieur à 100 et n'est pas suivi de "mille".
            Chaîne vide sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.FrenchNumberSpeller.MakeThousandPowerAgree(System.Int64,System.Int32)">
            <summary>
            Accorder la puissance de mille donnée.
            </summary>
            <returns>Un "s" si le nombre strictement supérieur à 1 et n'est pas "mille".
            Chaîne vide sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.FrenchNumberSpeller.InnerSpell(System.UInt64,System.Boolean,Developpez.Dotnet.Language.Grammar.Gender,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="negative">Le nombre est négatif.</param>
            <param name="gender">Genre du nombre entier.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.FrenchNumberSpeller.HighNumbersSpell(System.UInt64,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit le nombre entier en toutes lettres (nombres supérieurs à 1000).
            </summary>
            <param name="value">Nombre entier (supérieur à 1000).</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.FrenchNumberSpeller.HundredsAndUnitsSpell(System.Int32,System.Int32,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres (nombres entre 0 et 999).
            </summary>
            <param name="value">Nombre entier (entre 0 et 999).</param>
            <param name="thousandPower">La puissance de mille du nombre.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="T:Developpez.Dotnet.Language.KnownCurrencies">
            <summary>
            Fournit des descripteurs pour les devises connues
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Language.KnownCurrencies.LoadProviders(System.Reflection.Assembly)">
            <summary>
            Recherche tous les fournisseurs de devises dans l'assembly
            spécifié. Utilisez cette méthode pour détecter un fournisseur
            personnalisé.
            </summary>
            <param name="assembly">L'assembly dans lequel les fournisseurs de devises sont définis</param>
            <remarks>
            Les fournisseurs de devises prédéfinis sont chargés automatiquement,
            il n'est donc pas nécessaire d'appeler LoadProviders pour les utiliser.
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Language.KnownCurrencies.GetCurrency(System.String)">
            <summary>
            Obtient le descripteur de la devise spécifiée pour la culture courante
            </summary>
            <param name="code">Code ISO de la devise</param>
            <returns>Le descripteur de la devise</returns>
        </member>
        <member name="M:Developpez.Dotnet.Language.KnownCurrencies.GetCurrency(System.String,System.Globalization.CultureInfo)">
            <summary>
            Obtient le descripteur de la devise spécifiée pour la culture spécifiée
            </summary>
            <param name="code">Code ISO de la devise</param>
            <param name="culture">Culture pour laquelle obtenir le descripteur de la devise</param>
            <returns>Le descripteur de la devise</returns>
        </member>
        <member name="P:Developpez.Dotnet.Language.KnownCurrencies.Euro">
            <summary>
            Obtient la devise Euro (EUR)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.KnownCurrencies.USDollar">
            <summary>
            Obtient la devise Dollar américain (USD)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.KnownCurrencies.PoundSterling">
            <summary>
            Obtient la devise Livre sterling (GBP)
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Language.NumberSpellerTypeAttribute">
            <summary>
             Indique les types présents dans l'assembly qui implémentent une conversion de nombre en lettres
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Language.NumberSpellerTypeAttribute.#ctor(System.String,System.Type)">
            <summary>
             Crée une nouvelle instance de NumberSpellerTypeAttribute
            </summary>
            <param name="culture">Code (IetfLanguageTag) de la culture cible</param>
            <param name="implementation">Type qui implémente la conversion pour cette culture</param>
        </member>
        <member name="P:Developpez.Dotnet.Language.NumberSpellerTypeAttribute.Implementation">
            <summary>
            Type qui implémente le convertisseur de nombres en toutes lettres
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Language.NumberSpellerTypeAttribute.Culture">
            <summary>
            Code (IetfLanguageTag) de la culture cible
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Linq.LinqHelper">
            <summary>
            Fournit des méthodes pour travailler avec Linq et les expressions lambda
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Obtient le nom d'une propriété à partir d'une <c>Expression&lt;Func&lt;T&gt;&gt;</c>
            </summary>
            <typeparam name="T">Le type de la propriété à renvoyer (habituellement déterminé par l'inférence de type)</typeparam>
            <param name="expression">Une expression qui représente l'accès à une propriété</param>
            <returns>Le nom de la propriété accédée par l'expression</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Obtient les informations d'une propriété à partir d'une <c>Expression&lt;Func&lt;T&gt;&gt;</c>
            </summary>
            <typeparam name="T">Le type de la propriété à renvoyer (habituellement déterminé par l'inférence de type)</typeparam>
            <param name="expression">Une expression qui représente l'accès à une propriété</param>
            <returns>Les informations de la propriété accédée par l'expression</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.GetMethodName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Obtient le nom d'une méthode à partir d'une <c>Expression&lt;Func&lt;T&gt;&gt;</c>
            </summary>
            <typeparam name="T">Le type de retour de la méthode à renvoyer (habituellement déterminé par l'inférence de type)</typeparam>
            <param name="expression">Une expression qui représente l'appel à une méthode</param>
            <returns>Le nom de la méthode appelée par l'expression</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.GetMethod``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Obtient les informations d'une méthode à partir d'une <c>Expression&lt;Func&lt;T&gt;&gt;</c>
            </summary>
            <typeparam name="T">Le type de retour de la méthode à renvoyer (habituellement déterminé par l'inférence de type)</typeparam>
            <param name="expression">Une expression qui représente l'appel à une méthode</param>
            <returns>Les informations de la méthode appelée par l'expression</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.GetMethodName(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Obtient le nom d'une méthode à partir d'une <c>Expression&lt;Action&gt;</c>
            </summary>
            <param name="expression">Une expression qui représente l'appel à une méthode</param>
            <returns>Le nom de la méthode appelée par l'expression</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.GetMethod(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Obtient les informations d'une méthode à partir d'une <c>Expression&lt;Action&gt;</c>
            </summary>
            <param name="expression">Une expression qui représente l'appel à une méthode</param>
            <returns>Les  informations de la méthode appelée par l'expression</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Identity``1(``0)">
            <summary>
            Renvoie l'argument tel quel. Utile pour passer une projection à l'identique à une méthode telle que Select, OrderBy ou GroupBy.
            </summary>
            <typeparam name="T">Type de l'argument</typeparam>
            <param name="arg">Argument à renvoyer</param>
            <returns>L'argument tel quel</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})">
            <summary>
            Génère une séquence en en générant chaque état à partir d'un état
            initial tant que la condition est vérifiée.
            </summary>
            <typeparam name="TState">Type des états</typeparam>
            <typeparam name="TResult">Type des résultats</typeparam>
            <param name="initialState">État initial</param>
            <param name="condition">Prédicat qui doit être vérifié pour que l'itération continue</param>
            <param name="iterate">Fonction qui génère l'état suivant à partir de l'état actuel</param>
            <param name="resultSelector">Fonction qui séléctionne un résultat à partir de l'état actuel</param>
            <returns>Séquence contenant les résultats générés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Expr``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Renvoie l'expression passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T">Le type de retour de l'expression</typeparam>
            <param name="expr">L'expression dont on veut inférer le type</param>
            <returns>L'expression passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Expr``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Renvoie l'expression passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T">Le type du paramètre de l'expression</typeparam>
            <typeparam name="TResult">Le type de retour de l'expression</typeparam>
            <param name="expr">L'expression dont on veut inférer le type</param>
            <returns>L'expression passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Expr``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Renvoie l'expression passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T">Le type du paramètre de l'expression</typeparam>
            <typeparam name="TResult">Le type de retour de l'expression</typeparam>
            <param name="dummyArg">Objet utilisé comme modèle pour déterminer le type du paramètre</param>
            <param name="expr">L'expression dont on veut inférer le type</param>
            <returns>L'expression passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Func``1(System.Func{``0})">
            <summary>
            Renvoie la fonction passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T">Le type de retour de la fonction</typeparam>
            <param name="func">La fonction dont on veut inférer le type</param>
            <returns>La fonction passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Func``2(System.Func{``0,``1})">
            <summary>
            Renvoie la fonction passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T">Le type du paramètre de la fonction</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="func">La fonction dont on veut inférer le type</param>
            <returns>La fonction passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Func``2(``0,System.Func{``0,``1})">
            <summary>
            Renvoie la fonction passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T">Le type du paramètre de la fonction</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="dummyArg">Objet utilisé comme modèle pour déterminer le type du paramètre</param>
            <param name="func">La fonction dont on veut inférer le type</param>
            <returns>La fonction passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Expr``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Renvoie l'expression passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="TResult">Le type de retour de l'expression</typeparam>
            <param name="expr">L'expression dont on veut inférer le type</param>
            <returns>L'expression passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Expr``3(``0,``1,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Renvoie l'expression passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <param name="dummyArg1">Objet utilisé comme modèle pour déterminer le type du paramètre 1</param>
            <param name="dummyArg2">Objet utilisé comme modèle pour déterminer le type du paramètre 2</param>
            <typeparam name="TResult">Le type de retour de l'expression</typeparam>
            <param name="expr">L'expression dont on veut inférer le type</param>
            <returns>L'expression passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Expr``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Renvoie l'expression passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="TResult">Le type de retour de l'expression</typeparam>
            <param name="expr">L'expression dont on veut inférer le type</param>
            <returns>L'expression passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Expr``4(``0,``1,``2,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Renvoie l'expression passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <param name="dummyArg1">Objet utilisé comme modèle pour déterminer le type du paramètre 1</param>
            <param name="dummyArg2">Objet utilisé comme modèle pour déterminer le type du paramètre 2</param>
            <param name="dummyArg3">Objet utilisé comme modèle pour déterminer le type du paramètre 3</param>
            <typeparam name="TResult">Le type de retour de l'expression</typeparam>
            <param name="expr">L'expression dont on veut inférer le type</param>
            <returns>L'expression passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Expr``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Renvoie l'expression passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <typeparam name="TResult">Le type de retour de l'expression</typeparam>
            <param name="expr">L'expression dont on veut inférer le type</param>
            <returns>L'expression passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Expr``5(``0,``1,``2,``3,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Renvoie l'expression passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <param name="dummyArg1">Objet utilisé comme modèle pour déterminer le type du paramètre 1</param>
            <param name="dummyArg2">Objet utilisé comme modèle pour déterminer le type du paramètre 2</param>
            <param name="dummyArg3">Objet utilisé comme modèle pour déterminer le type du paramètre 3</param>
            <param name="dummyArg4">Objet utilisé comme modèle pour déterminer le type du paramètre 4</param>
            <typeparam name="TResult">Le type de retour de l'expression</typeparam>
            <param name="expr">L'expression dont on veut inférer le type</param>
            <returns>L'expression passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Func``3(System.Func{``0,``1,``2})">
            <summary>
            Renvoie la fonction passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="func">La fonction dont on veut inférer le type</param>
            <returns>La fonction passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Func``3(``0,``1,System.Func{``0,``1,``2})">
            <summary>
            Renvoie la fonction passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <param name="dummyArg1">Objet utilisé comme modèle pour déterminer le type du paramètre 1</param>
            <param name="dummyArg2">Objet utilisé comme modèle pour déterminer le type du paramètre 2</param>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="func">La fonction dont on veut inférer le type</param>
            <returns>La fonction passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Func``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Renvoie la fonction passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="func">La fonction dont on veut inférer le type</param>
            <returns>La fonction passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Func``4(``0,``1,``2,System.Func{``0,``1,``2,``3})">
            <summary>
            Renvoie la fonction passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <param name="dummyArg1">Objet utilisé comme modèle pour déterminer le type du paramètre 1</param>
            <param name="dummyArg2">Objet utilisé comme modèle pour déterminer le type du paramètre 2</param>
            <param name="dummyArg3">Objet utilisé comme modèle pour déterminer le type du paramètre 3</param>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="func">La fonction dont on veut inférer le type</param>
            <returns>La fonction passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Func``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Renvoie la fonction passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="func">La fonction dont on veut inférer le type</param>
            <returns>La fonction passée en paramètre</returns>
        </member>
        <member name="M:Developpez.Dotnet.Linq.LinqHelper.Func``5(``0,``1,``2,``3,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Renvoie la fonction passée en paramètre, de façon à profiter de l'inférence de type
            </summary>
            <typeparam name="T1">Le type du paramètre 1</typeparam>
            <typeparam name="T2">Le type du paramètre 2</typeparam>
            <typeparam name="T3">Le type du paramètre 3</typeparam>
            <typeparam name="T4">Le type du paramètre 4</typeparam>
            <param name="dummyArg1">Objet utilisé comme modèle pour déterminer le type du paramètre 1</param>
            <param name="dummyArg2">Objet utilisé comme modèle pour déterminer le type du paramètre 2</param>
            <param name="dummyArg3">Objet utilisé comme modèle pour déterminer le type du paramètre 3</param>
            <param name="dummyArg4">Objet utilisé comme modèle pour déterminer le type du paramètre 4</param>
            <typeparam name="TResult">Le type de retour de la fonction</typeparam>
            <param name="func">La fonction dont on veut inférer le type</param>
            <returns>La fonction passée en paramètre</returns>
        </member>
        <member name="T:Developpez.Dotnet.IO.StreamExtensions">
            <summary>
            Fournit des méthodes d'extension pour les flux
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copie le contenu d'un flux vers le flux spécifié, en utilisant un buffer de 4096 octets.
            </summary>
            <param name="fromStream">le flux d'origine</param>
            <param name="toStream">le flux de destination</param>
            <returns>le nombre d'octets copiés</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copie le contenu d'un flux vers le flux spécifié, en utilisant un buffer de la taille spécifiée.
            </summary>
            <param name="fromStream">le flux d'origine</param>
            <param name="toStream">le flux de destination</param>
            <param name="bufferSize">taille du buffer</param>
            <returns>le nombre d'octets copiés</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.CopyToFile(System.IO.Stream,System.String)">
            <summary>
            Copie le contenu d'un flux vers le fichier spécifié, en utilisant un buffer de 4096 octets.
            </summary>
            <param name="fromStream">le flux d'origine</param>
            <param name="path">le chemin du fichier de destination</param>
            <returns>le nombre d'octets copiés</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.CopyToFile(System.IO.Stream,System.String,System.Int32)">
            <summary>
            Copie le contenu d'un flux vers le fichier spécifié, en utilisant un buffer de la taille spécifiée.
            </summary>
            <param name="fromStream">le flux d'origine</param>
            <param name="path">le chemin du fichier de destination</param>
            <param name="bufferSize">taille du buffer</param>
            <returns>le nombre d'octets copiés</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
             Lit tout le contenu du flux et le renvoie sous forme d'un tableau d'octets.
            </summary>
            <param name="stream">Le flux à lire</param>
            <returns>Un tableau d'octets contenant les données lues à partir du flux.</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.ReadBytes(System.IO.Stream,System.Int32)">
            <summary>
            Lit le nombre d'octets spécifié et les renvoie sous forme d'un tableau d'octets.
            </summary>
            <param name="stream">Le flux à lire</param>
            <param name="count">Le nombre d'octets à lire</param>
            <returns>Un tableau contenant les octets lus.</returns>
            <remarks>Cette méthode bloque jusqu'à ce qu'elle ait lu le nombre d'octets demandé ou que la fin du flux soit atteinte.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.AsNonClosing(System.IO.Stream)">
            <summary>
            Renvoie un wrapper autour d'un flux, qui ignore les demandes de fermeture de façon à éviter la fermeture
            du flux lorsque le reader ou writer qui travaille dessus est fermé
            </summary>
            <param name="stream">Le flux à wrapper</param>
            <returns>Un wrapper non-fermable autour de ce flux</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.Tee(System.IO.Stream,System.IO.Stream,System.IO.Stream[])">
            <summary>
            Crée un wrapper qui reproduit la sortie d'un flux sur le ou les autres flux spécifiés.
            </summary>
            <param name="stream">Premier flux</param>
            <param name="other">Second flux</param>
            <param name="others">Flux supplémentaires</param>
            <returns>Un wrapper qui reproduit la sortie de <c>stream</c> sur les autres flux.</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.AsByteEnumerable(System.IO.Stream,System.Int32)">
            <summary>
            Renvoie une séquence d'octets lus à partir d'un flux.
            </summary>
            <param name="stream">Flux à partir duquel lire les données</param>
            <param name="bufferSize">Taille de buffer à utiliser pour la lecture</param>
            <returns>La séquence d'octets lus à partir du flux</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.AsByteEnumerable(System.IO.Stream)">
            <summary>
            Renvoie une séquence d'octets lus à partir d'un flux.
            </summary>
            <param name="stream">Flux à partir duquel lire les données</param>
            <returns>La séquence d'octets lus à partir du flux</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.StreamExtensions.AsBlockEnumerable(System.IO.Stream,System.Int32)">
            <summary>
            Renvoie une séquence de blocs d'octets lus à partir d'un flux.
            </summary>
            <param name="stream">Flux à partir duquel lire les données</param>
            <param name="blockSize">Taille de bloc désirée</param>
            <returns>Une séquence de blocs d'octets de la taille spécifiée, lus à partir du flux ; le dernier bloc renvoyé peut être plus court si la fin du flux a été atteinte.</returns>
        </member>
        <member name="T:Developpez.Dotnet.IO.TextReaderExtensions">
            <summary>
            Fournit des méthodes d'extension pour les TextReader
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.IO.TextReaderExtensions.AsLineEnumerable(System.IO.TextReader)">
            <summary>
            Renvoie une séquence de lignes lues par un TextReader
            </summary>
            <param name="reader">TextReader à utiliser pour lire les lignes</param>
            <returns>La séquence des lignes lues par le TextReader</returns>
        </member>
        <member name="M:Developpez.Dotnet.IO.TextReaderExtensions.AsCharEnumerable(System.IO.TextReader)">
            <summary>
            Renvoie une séquence de caractères lue par un TextReader
            </summary>
            <param name="reader">TextReader à utiliser pour lire les caractères</param>
            <returns>La séquence des caractères lue par le TextReader</returns>
        </member>
        <member name="T:Developpez.Dotnet.Language.Grammar.Gender">
            <summary>
            Genre grammatical.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.Gender.Masculine">
            <summary>
            Masculin.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.Gender.Feminine">
            <summary>
            Féminin.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Language.Grammar.Number">
            <summary>
            Nombre grammatical.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.Number.Singular">
            <summary>
            Singulier.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.Number.Plural">
            <summary>
            Pluriel.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Language.Grammar.NumeralAdjective">
            <summary>
            Adjectif numéral.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.NumeralAdjective.Cardinal">
            <summary>
            Adjectif numéral cardinal.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Language.Grammar.NumeralAdjective.Ordinal">
            <summary>
            Adjectif numéral ordinal.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1">
            <summary>
            Moniteur d'appels à des méthodes d'un objet
            </summary>
            <typeparam name="T">Type de l'objet à surveiller</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Transmet l'appel d'une méthode au proxy sous-jacent
            </summary>
            <param name="invokeMessage">Le message contenant les informations d'appel de méthode</param>
            <returns>Le message renvoyé par la méthode appelée, contenant la valeur de retour et les paramètres ref ou out</returns>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.Create(`0,Developpez.Dotnet.Diagnostics.MethodCallMonitor{`0}@)">
            <summary>
            Crée un nouveau proxy dynamique crée à partir de l'objet target passé en paramètre
            </summary>
            <param name="target">Objet pour lequel créer un proxy</param>
            <param name="proxy">Paramètre de sortie qui reçoit le MethodCallMonitor créé</param>
            <returns>Le proxy dynamique créé</returns>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.OnBeforeMethodCall(Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs)">
            <summary>
            Déclanche l'évènement <see cref="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.BeforeMethodCall"/>
            </summary>
            <param name="e">Paramètre de l'évènement</param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.OnAfterMethodCall(Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs)">
            <summary>
            Déclanche l'évènement <see cref="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.AfterMethodCall"/>
            </summary>
            <param name="e">Paramètre de l'évènement</param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.OnMethodCallException(Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs)">
            <summary>
            Déclanche l'évènement <see cref="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.MethodCallException"/>
            </summary>
            <param name="e">Paramètre de l'évènement</param>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.ObjUri">
            <summary>
            Uri de l'objet
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.MonitoredMethods">
            <summary>
            Liste des méthodes surveillées. null ou un tableau vide
            signifie de surveiller toutes les méthodes sans exception
            </summary>
        </member>
        <member name="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.BeforeMethodCall">
            <summary>
            Appelé avant l'exécution d'une méthode au sein d'un objet surveillé
            </summary>
        </member>
        <member name="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.AfterMethodCall">
            <summary>
            Appelé après l'exécution d'une méthode au sein d'un objet surveillé, si l'exécution n'entraine pas d'exception
            </summary>
        </member>
        <member name="E:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1.MethodCallException">
            <summary>
            Appelé si une exception survient dans une des méthodes surveillées
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventHandler">
            <summary>
            Représente le délégué utilisé pour un évènement précédent l'appel d'une méthode au sein d'un objet surveillé
            </summary>
            <param name="sender">La source de l'évènement</param>
            <param name="e">Un <see cref="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs"/> qui contient les arguments de l'évènement</param>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.AfterMethodCallEventHandler">
            <summary>
            Représente le délégué utilisé pour un évènement suivant l'appel d'une méthode au sein d'un objet surveillé
            </summary>
            <param name="sender">La source de l'évènement</param>
            <param name="e">Un <see cref="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs"/> qui contient les arguments de l'évènement</param>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventHandler">
            <summary>
            Représente le délégué utilisé pour un évènement résultant d'une exception dans une des méthodes surveillées
            </summary>
            <param name="sender">La source de l'évènement</param>
            <param name="e">Un <see cref="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs"/> qui contient les arguments de l'évènement</param>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodCallMonitorBaseEventArgs">
            <summary>
            Classe de base pour les évènements de <see cref="T:Developpez.Dotnet.Diagnostics.MethodCallMonitor`1"/>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitorBaseEventArgs.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Initialise une nouvelle instance de MethodCallMonitorBaseEventArgs pour le message spécifié
            </summary>
            <param name="message">Message d'appel de méthode</param>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallMonitorBaseEventArgs.MethodName">
            <summary>
            Nom de la méthode
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallMonitorBaseEventArgs.Msg">
            <summary>
            Message (remoting) utilisé par le Framework pour tracer l'appel à la méthode
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs">
            <summary>
            Classe contenant les informations pour l'évènement <see cref="T:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventHandler"/>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Exception)">
            <summary>
            Initialise une nouvelle instance de MethodCallExceptionEventArgs pour le message et l'exception spécifiés
            </summary>
            <param name="message">Message d'appel de méthode</param>
            <param name="exception">Exception levée pendant l'exécution de la méthode</param>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs.Exception">
            <summary>
            Exception détectée au sein de la méthode (résultant d'un "throw")
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs.Rethrow">
            <summary>
            Indique si, une fois cet évènement traité, l'exception doit être à nouveau lancée
            pour être interceptée par un niveau supérieur.<br/>
            Par défaut, vaut true (dans le cas d'une non gestion de cet évènement, l'exception est remontée)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs.ReturnMessage">
            <summary>
            Message de retour à passer à l'appelant, contenant la valeur renvoyée par la méthode
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs">
            <summary>
            Classe contenant les informations pour l'évènement <see cref="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventHandler"/>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Initialise une nouvelle instance de BeforeMethodCallEventArgs pour le message spécifié
            </summary>
            <param name="message">Message d'appel de méthode</param>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs.Cancel">
            <summary>
            Indique si l'appel doit être annulé. Dans ce cas, il faut placer un message dans ReturnMessage
            pour assurer l'intégrité des appels (ou déclancher une exception).
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs.ReturnMessage">
            <summary>
            Message de retour à passer à l'appelant, contenant la valeur renvoyée par la méthode
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs">
            <summary>
            Classe contenant les informations pour l'évènement <see cref="T:Developpez.Dotnet.Diagnostics.AfterMethodCallEventHandler"/>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Boolean)">
            <summary>
            Initialise une nouvelle instance de AfterMethodCallEventArgs pour le message spécifié
            </summary>
            <param name="message">Message d'appel de méthode</param>
            <param name="cancelled">Indique si l'appel à la méthode a été annulé</param>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs.Cancelled">
            <summary>
            Indique si l'appel à la méthode a été annulé (résultant de la gestion de l'évènement <see cref="T:Developpez.Dotnet.Diagnostics.BeforeMethodCallEventHandler"/>)
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs.ReturnMessage">
            <summary>
            Message de retour à passer à l'appelant, contenant la valeur renvoyée par la méthode
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.ComparisonComparer`1">
            <summary>
            Comparateur basé sur un delegate Comparison&lt;T&gt;.
            </summary>
            <typeparam name="T">type des éléments à comparer</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Initialise une nouvelle instance ComparisonComparer&lt;T&gt;.
            </summary>
            <param name="comparison">La comparaison à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ComparisonComparer`1.Compare(`0,`0)">
            <summary>
            Compare deux instances de T
            </summary>
            <param name="x">Premier élément à comparer</param>
            <param name="y">Second élément à comparer</param>
            <returns>-1 si x &lt; y, 1 si x &gt; y, 0 si x == y</returns>
        </member>
        <member name="T:Developpez.Dotnet.Collections.ReadOnlyDictionary`2">
            <summary>
            Représente un dictionnaire en lecture seule, qui encapsule un autre dictionnaire
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.#ctor">
            <summary>
            Initialise une nouvelle instance de ReadOnlyDictionary&lt;TKey, TValue&gt;.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initialise une nouvelle instance de ReadOnlyDictionary&lt;TKey, TValue&gt;
            </summary>
            <param name="dictionary">Le dictionnaire à encapsuler</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean)">
            <summary>
            Initialise une nouvelle instance de ReadOnlyDictionary&lt;TKey, TValue&gt;, en copiant éventuellement les données du dictionnaire original
            </summary>
            <param name="dictionary">Le dictionnaire à encapsuler ou copier</param>
            <param name="copy">true pour réaliser une copie du dictionnaire original ; false pour simplement l'encapsuler.</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            L'appel de cette méthode correspond à une opération illégale
            et lève une NotSupportedException.
            </summary>
            <param name="key">Clé à ajouter</param>
            <param name="value">Valeur à ajotuer</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            L'appel de cette méthode correspond à une opération illégale
            et lève une NotSupportedException.
            </summary>
            <param name="key">Clé à supprimer</param>
            <returns>true si l'élément a été supprimé, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Clear">
            <summary>
            L'appel de cette méthode correspond à une opération illégale
            et lève une NotSupportedException.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            L'appel de cette méthode correspond à une opération illégale
            et lève une NotSupportedException.
            </summary>
            <param name="item">L'élément à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            L'appel de cette méthode correspond à une opération illégale
            et lève une NotSupportedException.
            </summary>
            <param name="item">La paire clé/valeur à supprimer</param>
            <returns>true si l'élément a été supprimé, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.FromNonGenericDictionary(System.Collections.IDictionary)">
            <summary>
            Crée une nouvelle instance de ReadOnlyDictionary&lt;TKey, TValue&gt; à partir d'un dictionnaire non générique.
            Les données sont copiées à partir du dictionnaire d'origine.
            </summary>
            <param name="dictionary">le dictionnaire d'origine</param>
            <returns>Une instance de ReadOnlyDictionary&lt;TKey, TValue&gt; créée à partir du dictionnaire non générique spécifié</returns>
            <exception cref="T:System.InvalidCastException">Les données du dictionnaire d'origine ne correspondent pas aux paramètres de type générique spécifiés</exception>
        </member>
        <member name="P:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Obtient la valeur correspondant à la clé spécifiée
            </summary>
            <param name="key">La clé pour laquelle on veut obtenir la valeur</param>
            <returns>La valeur correspondant à la clé</returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Obtient une valeur indiquant si le dictionnaire est en lecture seule. Renvoie toujours true.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.SerializableDictionary`2">
            <summary>
            Dictionnaire générique sérialisable en XML
            Librement adapté de http://weblogs.asp.net/pwelter34/archive/2006/05/03/444961.aspx
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary, avec la capacité initiale spécifiée
            </summary>
            <param name="capacity">Capacité initiale</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary avec les données copiées du dictionnaire spécifié
            </summary>
            <param name="dictionary">Le dictionnaire à copier</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary avec le comparateur de clé spécifié
            </summary>
            <param name="comparer">Comparateur de clé à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary avec la capacité initiale et le
            comparateur de clé spécifiés
            </summary>
            <param name="capacity">Capacité initiale</param>
            <param name="comparer">Comparateur de clé à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialise une nouvelle instance de SerializableDictionary avec les données copiées du dictionnaire spécifié,
            avec le comparateur de clé spécifié
            </summary>
            <param name="dictionary">Dictionnaire à copier</param>
            <param name="comparer">Comparateur de clé à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Renvoie le schémar XML de l'objet
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Lit les données du dictionnaire à partir du flux XML spécifié
            </summary>
            <param name="reader">Flux XML à désérialiser</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Ecrit les données du dictionnaire sur le flux XML spécifié
            </summary>
            <param name="writer">Flux XML vers lequel sérialiser les données</param>
        </member>
        <member name="T:Developpez.Dotnet.Collections.SyncList`1">
            <summary>
            Représente une liste fortement typée d'objets accessibles par index. Fournit des méthodes de recherche, de tri et de manipulation de listes.<br/>
            Cette classe est thread-safe
            </summary>
            <typeparam name="T">Type des éléments de la liste</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/> qui contient des éléments copiés à partir de la collection spécifiée et qui possède une capacité suffisante pour accepter le nombre d'éléments copiés.
            </summary>
            <param name="collection">Collection dont les éléments sont copiés dans la nouvelle liste. </param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.#ctor(System.Int32)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/> qui est vide et a la capacité initiale spécifiée.
            </summary>
            <param name="capacity">Capacité initiale de la liste</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.IndexOf(`0)">
            <summary>
            Renvoi l'index d'un élément présent dans la liste, ou -1 s'il n'a pas été trouvé
            </summary>
            <param name="item">Element à rechercher</param>
            <returns>Index de l'élément s'il a été trouvé, ou -1 sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.Insert(System.Int32,`0)">
            <summary>
            Insère un élément à la position indiquée
            </summary>
            <param name="index">Position à laquelle insérer un élément</param>
            <param name="item">Elément à insérer</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.RemoveAt(System.Int32)">
            <summary>
            Retire l'élément présent à l'indice de base zéro index de la liste
            </summary>
            <param name="index">indice de l'élément à retirer de la liste</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.Add(`0)">
            <summary>
            Ajoute un objet à la fin de <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>
            </summary>
            <param name="item">Element à rajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.Clear">
            <summary>
            Supprime tous les éléments de <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.Contains(`0)">
            <summary>
            Détermine si un élément est dans <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>
            </summary>
            <param name="item">Objet à trouver dans <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>. La valeur peut être une référence null (Nothing en Visual Basic) pour les types référence. </param>
            <returns>true si item existe dans <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/> ; sinon, false</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copie l'ensemble du <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/> vers un tableau compatible unidimensionnel, en commençant à l'index spécifié du tableau cible.
            </summary>
            <param name="array">Array unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>. Array doit avoir une indexation de base zéro. </param>
            <param name="arrayIndex">Index de base zéro dans array au niveau duquel commencer la copie. </param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.Remove(`0)">
            <summary>
            Supprime la première occurrence d'un objet spécifique de <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>.
            </summary>
            <param name="item">Objet à supprimer de <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>. La valeur peut être une référence null (Nothing en Visual Basic) pour les types référence. </param>
            <returns>true si la suppression de item est réussie ; sinon, false. Cette méthode retourne également false si item est introuvable dans <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>. </returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.GetEnumerator">
            <summary>
            Retourne un énumérateur qui parcourt <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>.
            </summary>
            <returns><see cref="T:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator"/> pour <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>. </returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retourne un énumérateur qui parcourt <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>.
            </summary>
            <returns><see cref="T:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator"/> pour <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>. </returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copie les éléments de ICollection dans Array, en commençant à un index particulier de Array.
            </summary>
            <param name="array">Array unidimensionnel qui constitue la destination des éléments copiés à partir de ICollection. Array doit avoir une indexation de base zéro.</param>
            <param name="index">Index de base zéro dans array au niveau duquel commencer la copie.</param>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SyncList`1.SyncRoot">
            <summary>
            Objet de synchronisation
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SyncList`1.InternalList">
            <summary>
            Liste utilisée en interne pour stocker les valeurs
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SyncList`1.Item(System.Int32)">
            <summary>
            Obtient ou définit l'élément à l'indice de base zéro index
            </summary>
            <param name="index">indice de l'élément</param>
            <returns>élément à l'indice de base zéro index</returns>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SyncList`1.Count">
            <summary>
            Renvoi le nombre d'éléments actuellement présents dans la liste
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SyncList`1.IsReadOnly">
            <summary>
            Indique si la liste est en lecture seule
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SyncList`1.IsSynchronized">
            <summary>
            Indique si la liste est synchronisée
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator">
            <summary>
            Enumerateur thread-safe pour <see cref="T:Developpez.Dotnet.Collections.SyncList`1"/>
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator._ownedList">
            <summary>
            Liste utilisée en interne pour récupérer les valeurs
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator._enumerator">
            <summary>
            Enumérateur non thread safe de la liste parente
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator.#ctor(Developpez.Dotnet.Collections.SyncList{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initialise une nouvelle instance de l'énumérateur
            </summary>
            <param name="ownedList">Liste à utiliser pour l'énumération</param>
            <param name="enumerator">Enumérateur utilisé pour l'opération</param>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator.Dispose">
            <summary>
            Libère toutes les ressources utilisées par cet objet
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator.MoveNext">
            <summary>
            Avance l'énumérateur à l'élément suivant de la collection.
            </summary>
            <returns>true si l'énumérateur a pu avancer jusqu'à l'élément suivant ; false si l'énumérateur a dépassé la fin de la collection.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator.Reset">
            <summary>
            Rétablit l'énumérateur à sa position initiale, qui précède le premier élément de la collection.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator.Current">
            <summary>
            Obtient l'élément actuel dans la collection.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Collections.SyncList`1.SynchronizedEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Obtient l'élément actuel dans la collection.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Configuration.IniFile">
            <summary>
            Représente un fichier de configuration de type INI
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.#ctor">
            <summary>
            Crée une instance vide de IniFile, pour créer dynamiquement
            le contenu du fichier avant de l'enregistrer.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.#ctor(System.Boolean)">
            <summary>
            Crée une instance vide de IniFile, pour créer dynamiquement
            le contenu du fichier avant de l'enregistrer.
            </summary>
            <param name="caseSensitive">Indique si le IniFile doit tenir compte de la casse</param>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.#ctor(System.String)">
            <summary>
            Crée une instance de IniFile en chargeant le fichier spécifié
            </summary>
            <param name="fileName">Nom du fichier INI à ouvrir</param>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.#ctor(System.String,System.Boolean)">
            <summary>
            Crée une instance de IniFile en chargeant le fichier spécifié
            </summary>
            <param name="fileName">Nom du fichier INI à ouvrir</param>
            <param name="caseSensitive">Indique si le IniFile doit tenir compte de la casse</param>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Crée une instance de IniFile en chargeant le fichier spécifié
            </summary>
            <param name="fileName">Nom du fichier INI à ouvrir</param>
            <param name="encoding">Encodage à utiliser pour lire le fichier</param>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Crée une instance de IniFile en chargeant le fichier spécifié
            </summary>
            <param name="fileName">Nom du fichier INI à ouvrir</param>
            <param name="caseSensitive">Indique si le IniFile doit tenir compte de la casse</param>
            <param name="encoding">Encodage à utiliser pour lire le fichier</param>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.Reload">
            <summary>
            Charge ou recharge le fichier indiqué par la propriété FileName
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.AddSection(System.String)">
            <summary>
            Ajoute une section au fichier INI
            </summary>
            <param name="name">Nom de la section à ajouter</param>
            <returns>La section créée, sous form d'un dictionnaire</returns>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.GetValue(System.String,System.String,System.String)">
            <summary>
            Obtient la valeur de la propriété spécifiée dans la section spécifiée
            Si la propriété n'est pas dans une section, passer une chaine vide
            </summary>
            <param name="section">Nom de la section, ou une chaine vide</param>
            <param name="key">Nom de la propriété</param>
            <param name="defaultValue">Valeur par défaut si la propriété n'existe pas</param>
            <returns>a valeur de la propriété demandée, ou defaultValue si la
            propriété n'existe pas dans le fichier</returns>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.GetValue(System.String,System.String)">
            <summary>
            Obtient la valeur de la propriété spécifiée dans la section spécifiée
            Si la propriété n'est pas dans une section, passer une chaine vide
            </summary>
            <param name="section">Nom de la section, ou une chaine vide</param>
            <param name="key">Nom de la propriété</param>
            <returns>a valeur de la propriété demandée, ou null si la
            propriété n'existe pas dans le fichier</returns>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.SetValue(System.String,System.String,System.String)">
            <summary>
            Définit la valeur d'une propriété dans une section donnée.
            Pour n'indiquer aucune section, passer une chaine vide.
            Si la section n'existe pas, elle est créée
            </summary>
            <param name="section">Nom de la section, ou une chaine vide</param>
            <param name="key">Nom de la propriété</param>
            <param name="value">Valeur de la propriété</param>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.Save">
            <summary>
            Enregistre le fichier INI sous le chemin indiqué par la propriété FileName.
            Attention, les commentaires éventuellement présents dans le fichier avant
            le chargement ne sont pas conservés.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.Save(System.String)">
            <summary>
            Enregistre le fichier INI sous le chemin indiqué.
            Attention, les commentaires éventuellement présents dans le fichier avant
            le chargement ne sont pas conservés.
            </summary>
            <param name="fileName">Chemin du fichier</param>
        </member>
        <member name="M:Developpez.Dotnet.Configuration.IniFile.Save(System.String,System.Text.Encoding)">
            <summary>
            Enregistre le fichier INI sous le chemin indiqué.
            Attention, les commentaires éventuellement présents dans le fichier avant
            le chargement ne sont pas conservés.
            </summary>
            <param name="fileName">Chemin du fichier</param>
            <param name="encoding">Encodage à utiliser pour lire le fichier</param>
        </member>
        <member name="P:Developpez.Dotnet.Configuration.IniFile.FileName">
            <summary>
            Le nom du fichier
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Configuration.IniFile.Sections">
            <summary>
            Sections du fichier INI, accessibles sous forme d'un dictionnaire de sections
            Chaque section est elle-même un dictionnaire de propriétés
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Configuration.IniFile.Item(System.String,System.String)">
            <summary>
            Renvoie la valeur de la propriété spécifiée dans la section spécifiée
            </summary>
            <param name="section">Nom de la section, ou une chaine vide</param>
            <param name="key">Nom de la propriété</param>
            <returns>La valeur de la propriété demandée, ou null si la
            propriété n'existe pas dans le fichier</returns>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodCallMonitorExtensions">
            <summary>
            Classe d'extension afin de fournir aux objets de type <see cref="T:System.MarshalByRefObject"/> la possibilité
            d'être englobés dans des proxy afin de fournir des outils de diagnostique pour mesurer le nombre et
            la durée des appels des différents objets
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodCallMonitorExtensions.WrapForCallMonitor``1(``0,Developpez.Dotnet.Diagnostics.MethodCallMonitor{``0}@)">
            <summary>
            Renvoie un proxy pour l'objet passé en paramètre, auquel on peut attacher des évènements grâce à wrappedEvents
            </summary>
            <typeparam name="T">Le type d'objet pour lequel créer un proxy</typeparam>
            <param name="obj">L'objet pour lequel créer un proxy</param>
            <param name="wrappedEvents">Paramètre de sortie qui reçoit l'objet qui va permettre d'intercepter les appels aux méthodes de la fonction via des évènements</param>
            <returns>L'objet wrappé auquel sera associé les différents évènements attachés grâce à wrappedEvents</returns>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1">
            <summary>
            Permet d'obtenir le nombre d'exécutions et le temps d'exécutions des méthodes
            d'un objet
            </summary>
            <typeparam name="T">Type de l'objet à surveiller</typeparam>
        </member>
        <member name="F:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.sync">
            <summary>
            Objet de synchronisation
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.#ctor">
            <summary>
            Crée une nouvelle instance du chronomètre d'exécution de méthode
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.transition_sync">
            <summary>
            Objet de synchronisation pour les transitions entre moniteur (proxy) et code (implémentation)
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.MethodBegin(`0,Developpez.Dotnet.Diagnostics.BeforeMethodCallEventArgs)">
            <summary>
            Début d'appel à une méthode d'un objet
            </summary>
            <param name="obj">Objet sur lequel la méthode est appelée</param>
            <param name="args">Paramètres de l'évènement</param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.MethodExceptionEnd(`0,Developpez.Dotnet.Diagnostics.MethodCallExceptionEventArgs)">
            <summary>
            Fin d'appel à une méthode d'un objet : cas où une exception est survenue
            </summary>
            <param name="obj">Objet sur lequel la méthode est appelée</param>
            <param name="args">Paramètres de l'évènement</param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.MethodEnd(`0,Developpez.Dotnet.Diagnostics.AfterMethodCallEventArgs)">
            <summary>
            Fin d'appel à une méthode d'un objet : cas normal
            </summary>
            <param name="obj">Objet sur lequel la méthode est appelée</param>
            <param name="args">Paramètres de l'évènement</param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.GetAsMonitored(`0)">
            <summary>
            Retourne un objet équivalent à obj, mais dont les appels
            de méthodes seront surveillés
            </summary>
            <param name="obj">objet à surveiller</param>
            <returns>Un proxy vers obj pour lequel les appels de méthodes sont surveillés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.GetAsMonitored(`0,System.String[])">
            <summary>
            Retourne un objet équivalent à obj, mais dont les appels
            de méthodes seront surveillés
            </summary>
            <param name="obj">objet à surveiller</param>
            <param name="methodsToMonitor">Noms des méthodes à surveiller, ou null pour tout surveiller</param>
            <returns>Un proxy vers obj pour lequel les appels de méthodes sont surveillés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.DiscardMonitoring(`0)">
            <summary>
            Annule toute surveillance de l'objet obj
            </summary>
            <param name="obj">L'objet pour lequel annuler la surveillance</param>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.Report">
            <summary>
            Genère un rapport contenant pour chaque objet monitoré, l'ensemble des informations
            d'appel et d'exécution des méthode surveillées
            </summary>
            <returns>Rapport</returns>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.Monitored">
            <summary>
            Ensemble des méthodes actuellement surverillées
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.PerfCounterPool">
            <summary>
            Pool de chronomètres à utiliser pour l'observation des méthodes
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.RunningMethods">
            <summary>
            Méthodes actuellement en cours d'exécution, avec un pool pour le perf counter
            afin d'éviter d'en créer un nombre infini
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry">
            <summary>
            Entrée du rapport d'utilisation d'une méthode
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry.#ctor">
            <summary>
            Construit une nouvelle instance d'une entrée du rapport d'appels
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry.Clone">
            <summary>
            Crée une copie de l'objet
            </summary>
            <returns>Copie</returns>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry.MethodName">
            <summary>
            Nom de la méthode
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry.CallCount">
            <summary>
            Nombre d'appels effectués à cette méthode
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Diagnostics.MethodTimeMonitor`1.TimeMonitorEntry.TotalTime">
            <summary>
            Temps total passé dans cette méthode (incluant également les sous-méthodes appelées)
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.IAngle">
            <summary>
            Représente une mesure d'angle
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Measures.IAngle.ValueInRadians">
            <summary>
            Obtient la valeur de cet angle en radians
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Radian">
            <summary>
            Représente un angle en radians
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Radian"/>.
            </summary>
            <param name="value">La valeur de cet angle en radians</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Radian">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Radian"/>.
            </summary>
            <param name="value">Valeur en radians.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_Explicit(Developpez.Dotnet.Measures.Radian)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Radian"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="angle">Angle</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_Equality(Developpez.Dotnet.Measures.Radian,Developpez.Dotnet.Measures.Radian)">
            <summary>
            Teste l'égalité de deux angles.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si les deux angles sont égaux, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_Inequality(Developpez.Dotnet.Measures.Radian,Developpez.Dotnet.Measures.Radian)">
            <summary>
            Teste la non-égalité de deux angles.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si les deux angles sont différents, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_LessThan(Developpez.Dotnet.Measures.Radian,Developpez.Dotnet.Measures.Radian)">
            <summary>
            Teste si le premier angle est inférieur au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est inférieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_GreaterThan(Developpez.Dotnet.Measures.Radian,Developpez.Dotnet.Measures.Radian)">
            <summary>
            Teste si le premier angle est supérieur au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est supérieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_LessThanOrEqual(Developpez.Dotnet.Measures.Radian,Developpez.Dotnet.Measures.Radian)">
            <summary>
            Teste si le premier angle est inférieur ou égal au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est inférieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Radian,Developpez.Dotnet.Measures.Radian)">
            <summary>
            Teste si le premier angle est supérieur ou égal au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est supérieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_Addition(Developpez.Dotnet.Measures.Radian,Developpez.Dotnet.Measures.Radian)">
            <summary>
            Additionne deux angles.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            La somme des deux angles.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_Subtraction(Developpez.Dotnet.Measures.Radian,Developpez.Dotnet.Measures.Radian)">
            <summary>
            Soustrait le deuxième angle du premier
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            La différence entre les deux angles.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_Multiply(Developpez.Dotnet.Measures.Radian,System.Double)">
            <summary>
            Multiplie un angle par un nombre.
            </summary>
            <param name="angle">angle</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.op_Division(Developpez.Dotnet.Measures.Radian,System.Double)">
            <summary>
            Divise un angle par un nombre.
            </summary>
            <param name="angle">Angle</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.CompareTo(Developpez.Dotnet.Measures.Radian)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.TryParse(System.String,Developpez.Dotnet.Measures.Radian@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="angle">Angle.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.Equals(Developpez.Dotnet.Measures.Radian)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Radian.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Radian.Value">
            <summary>
            Obtient la valeur ce cet angle.
            </summary>
            <value>
            La valeur de cet angle
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Radian.Developpez#Dotnet#Measures#IAngle#ValueInRadians">
            <summary>
            Obtient la valeur de cet angle en radians
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Degree">
            <summary>
            Représente un angle en degrés
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Degree"/>.
            </summary>
            <param name="value">La valeur de cet angle en degrés</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Degree">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Degree"/>.
            </summary>
            <param name="value">Valeur en degrés.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_Explicit(Developpez.Dotnet.Measures.Degree)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Degree"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="angle">Angle</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_Equality(Developpez.Dotnet.Measures.Degree,Developpez.Dotnet.Measures.Degree)">
            <summary>
            Teste l'égalité de deux angles.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si les deux angles sont égaux, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_Inequality(Developpez.Dotnet.Measures.Degree,Developpez.Dotnet.Measures.Degree)">
            <summary>
            Teste la non-égalité de deux angles.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si les deux angles sont différents, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_LessThan(Developpez.Dotnet.Measures.Degree,Developpez.Dotnet.Measures.Degree)">
            <summary>
            Teste si le premier angle est inférieur au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est inférieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_GreaterThan(Developpez.Dotnet.Measures.Degree,Developpez.Dotnet.Measures.Degree)">
            <summary>
            Teste si le premier angle est supérieur au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est supérieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_LessThanOrEqual(Developpez.Dotnet.Measures.Degree,Developpez.Dotnet.Measures.Degree)">
            <summary>
            Teste si le premier angle est inférieur ou égal au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est inférieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Degree,Developpez.Dotnet.Measures.Degree)">
            <summary>
            Teste si le premier angle est supérieur ou égal au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est supérieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_Addition(Developpez.Dotnet.Measures.Degree,Developpez.Dotnet.Measures.Degree)">
            <summary>
            Additionne deux angles.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            La somme des deux angles.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_Subtraction(Developpez.Dotnet.Measures.Degree,Developpez.Dotnet.Measures.Degree)">
            <summary>
            Soustrait le deuxième angle du premier
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            La différence entre les deux angles.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_Multiply(Developpez.Dotnet.Measures.Degree,System.Double)">
            <summary>
            Multiplie un angle par un nombre.
            </summary>
            <param name="angle">angle</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.op_Division(Developpez.Dotnet.Measures.Degree,System.Double)">
            <summary>
            Divise un angle par un nombre.
            </summary>
            <param name="angle">Angle</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.CompareTo(Developpez.Dotnet.Measures.Degree)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.TryParse(System.String,Developpez.Dotnet.Measures.Degree@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="angle">Angle.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.Equals(Developpez.Dotnet.Measures.Degree)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Degree.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Degree.Value">
            <summary>
            Obtient la valeur ce cet angle.
            </summary>
            <value>
            La valeur de cet angle
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Degree.Developpez#Dotnet#Measures#IAngle#ValueInRadians">
            <summary>
            Obtient la valeur de cet angle en radians
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Gradian">
            <summary>
            Représente un angle en grades
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Gradian"/>.
            </summary>
            <param name="value">La valeur de cet angle en grades</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Gradian">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Gradian"/>.
            </summary>
            <param name="value">Valeur en grades.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_Explicit(Developpez.Dotnet.Measures.Gradian)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Gradian"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="angle">Angle</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_Equality(Developpez.Dotnet.Measures.Gradian,Developpez.Dotnet.Measures.Gradian)">
            <summary>
            Teste l'égalité de deux angles.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si les deux angles sont égaux, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_Inequality(Developpez.Dotnet.Measures.Gradian,Developpez.Dotnet.Measures.Gradian)">
            <summary>
            Teste la non-égalité de deux angles.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si les deux angles sont différents, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_LessThan(Developpez.Dotnet.Measures.Gradian,Developpez.Dotnet.Measures.Gradian)">
            <summary>
            Teste si le premier angle est inférieur au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est inférieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_GreaterThan(Developpez.Dotnet.Measures.Gradian,Developpez.Dotnet.Measures.Gradian)">
            <summary>
            Teste si le premier angle est supérieur au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est supérieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_LessThanOrEqual(Developpez.Dotnet.Measures.Gradian,Developpez.Dotnet.Measures.Gradian)">
            <summary>
            Teste si le premier angle est inférieur ou égal au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est inférieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Gradian,Developpez.Dotnet.Measures.Gradian)">
            <summary>
            Teste si le premier angle est supérieur ou égal au deuxième.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            true si le premier angle est supérieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_Addition(Developpez.Dotnet.Measures.Gradian,Developpez.Dotnet.Measures.Gradian)">
            <summary>
            Additionne deux angles.
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            La somme des deux angles.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_Subtraction(Developpez.Dotnet.Measures.Gradian,Developpez.Dotnet.Measures.Gradian)">
            <summary>
            Soustrait le deuxième angle du premier
            </summary>
            <param name="a">Premier angle</param>
            <param name="b">Deuxième angle</param>
            <returns>
            La différence entre les deux angles.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_Multiply(Developpez.Dotnet.Measures.Gradian,System.Double)">
            <summary>
            Multiplie un angle par un nombre.
            </summary>
            <param name="angle">angle</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.op_Division(Developpez.Dotnet.Measures.Gradian,System.Double)">
            <summary>
            Divise un angle par un nombre.
            </summary>
            <param name="angle">Angle</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.CompareTo(Developpez.Dotnet.Measures.Gradian)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.TryParse(System.String,Developpez.Dotnet.Measures.Gradian@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="angle">Angle.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.Equals(Developpez.Dotnet.Measures.Gradian)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gradian.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Gradian.Value">
            <summary>
            Obtient la valeur ce cet angle.
            </summary>
            <value>
            La valeur de cet angle
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Gradian.Developpez#Dotnet#Measures#IAngle#ValueInRadians">
            <summary>
            Obtient la valeur de cet angle en radians
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.AngleExtensions">
            <summary>
            Fournit des méthodes d'extension pour les angles
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AngleExtensions.ToRadian``1(``0)">
            <summary>
            Convertit un angle en radians
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="angle">Angle à convertir</param>
            <returns>Valeur en radians</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AngleExtensions.ToDegree``1(``0)">
            <summary>
            Convertit un angle en degrés
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="angle">Angle à convertir</param>
            <returns>Valeur en degrés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AngleExtensions.ToGradian``1(``0)">
            <summary>
            Convertit un angle en grades
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="angle">Angle à convertir</param>
            <returns>Valeur en grades</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AngleExtensions.Sin``1(``0)">
            <summary>
            Renvoie le sinus de l'angle.
            </summary>
            <typeparam name="T">Le type de l'unité d'angle</typeparam>
            <param name="angle">Angle</param>
            <returns>Le sinus de l'angle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AngleExtensions.Cos``1(``0)">
            <summary>
            Renvoie le cosinus de l'angle.
            </summary>
            <typeparam name="T">Le type de l'unité d'angle</typeparam>
            <param name="angle">Angle</param>
            <returns>Le cosinus de l'angle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AngleExtensions.Tan``1(``0)">
            <summary>
            Renvoie la tangeante de l'angle.
            </summary>
            <typeparam name="T">Le type de l'unité d'angle</typeparam>
            <param name="angle">Angle</param>
            <returns>La tangeante de l'angle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AngleExtensions.Sinh``1(``0)">
            <summary>
            Renvoie le sinus hyperbolique de l'angle.
            </summary>
            <typeparam name="T">Le type de l'unité d'angle</typeparam>
            <param name="angle">Angle</param>
            <returns>Le sinus hyperbolique de l'angle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AngleExtensions.Cosh``1(``0)">
            <summary>
            Renvoie le cosinus hyperbolique de l'angle.
            </summary>
            <typeparam name="T">Le type de l'unité d'angle</typeparam>
            <param name="angle">Angle</param>
            <returns>Le cosinus hyperbolique de l'angle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AngleExtensions.Tanh``1(``0)">
            <summary>
            Renvoie la tangeante hyperbolique de l'angle.
            </summary>
            <typeparam name="T">Le type de l'unité d'angle</typeparam>
            <param name="angle">Angle</param>
            <returns>La tangeante hyperbolique de l'angle</returns>
        </member>
        <member name="T:Developpez.Dotnet.Measures.IArea">
            <summary>
            Représente une mesure de surface
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Measures.IArea.ValueInSquareMeters">
            <summary>
            Obtient la valeur de cette longueur en mètres carrés
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.SquareMeter">
            <summary>
            Représente une surface en mètres carrés
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.SquareMeter"/>.
            </summary>
            <param name="value">La valeur de cette surface en mètres carrés</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_Implicit(System.Double)~Developpez.Dotnet.Measures.SquareMeter">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.SquareMeter"/>.
            </summary>
            <param name="value">Valeur en mètres carrés.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_Explicit(Developpez.Dotnet.Measures.SquareMeter)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.SquareMeter"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="area">Surface</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_Equality(Developpez.Dotnet.Measures.SquareMeter,Developpez.Dotnet.Measures.SquareMeter)">
            <summary>
            Teste l'égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_Inequality(Developpez.Dotnet.Measures.SquareMeter,Developpez.Dotnet.Measures.SquareMeter)">
            <summary>
            Teste la non-égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_LessThan(Developpez.Dotnet.Measures.SquareMeter,Developpez.Dotnet.Measures.SquareMeter)">
            <summary>
            Teste si la première surface est inférieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_GreaterThan(Developpez.Dotnet.Measures.SquareMeter,Developpez.Dotnet.Measures.SquareMeter)">
            <summary>
            Teste si la première surface est supérieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_LessThanOrEqual(Developpez.Dotnet.Measures.SquareMeter,Developpez.Dotnet.Measures.SquareMeter)">
            <summary>
            Teste si la première surface est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.SquareMeter,Developpez.Dotnet.Measures.SquareMeter)">
            <summary>
            Teste si la première surface est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_Addition(Developpez.Dotnet.Measures.SquareMeter,Developpez.Dotnet.Measures.SquareMeter)">
            <summary>
            Additionne deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La somme des deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_Subtraction(Developpez.Dotnet.Measures.SquareMeter,Developpez.Dotnet.Measures.SquareMeter)">
            <summary>
            Soustrait la deuxième surface de la première
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La différence entre les deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_Multiply(Developpez.Dotnet.Measures.SquareMeter,System.Double)">
            <summary>
            Multiplie une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.op_Division(Developpez.Dotnet.Measures.SquareMeter,System.Double)">
            <summary>
            Divise une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.CompareTo(Developpez.Dotnet.Measures.SquareMeter)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.TryParse(System.String,Developpez.Dotnet.Measures.SquareMeter@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="area">Surface.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.Equals(Developpez.Dotnet.Measures.SquareMeter)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareMeter.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.SquareMeter.Value">
            <summary>
            Obtient la valeur ce cette surface.
            </summary>
            <value>
            La valeur de cette surface
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.SquareMeter.Developpez#Dotnet#Measures#IArea#ValueInSquareMeters">
            <summary>
            Obtient la valeur de cette surface en mètres carrés
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.SquareFoot">
            <summary>
            Représente une surface en pieds carrés
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.SquareFoot"/>.
            </summary>
            <param name="value">La valeur de cette surface en pieds carrés</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_Implicit(System.Double)~Developpez.Dotnet.Measures.SquareFoot">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.SquareFoot"/>.
            </summary>
            <param name="value">Valeur en pieds carrés.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_Explicit(Developpez.Dotnet.Measures.SquareFoot)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.SquareFoot"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="area">Surface</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_Equality(Developpez.Dotnet.Measures.SquareFoot,Developpez.Dotnet.Measures.SquareFoot)">
            <summary>
            Teste l'égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_Inequality(Developpez.Dotnet.Measures.SquareFoot,Developpez.Dotnet.Measures.SquareFoot)">
            <summary>
            Teste la non-égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_LessThan(Developpez.Dotnet.Measures.SquareFoot,Developpez.Dotnet.Measures.SquareFoot)">
            <summary>
            Teste si la première surface est inférieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_GreaterThan(Developpez.Dotnet.Measures.SquareFoot,Developpez.Dotnet.Measures.SquareFoot)">
            <summary>
            Teste si la première surface est supérieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_LessThanOrEqual(Developpez.Dotnet.Measures.SquareFoot,Developpez.Dotnet.Measures.SquareFoot)">
            <summary>
            Teste si la première surface est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.SquareFoot,Developpez.Dotnet.Measures.SquareFoot)">
            <summary>
            Teste si la première surface est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_Addition(Developpez.Dotnet.Measures.SquareFoot,Developpez.Dotnet.Measures.SquareFoot)">
            <summary>
            Additionne deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La somme des deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_Subtraction(Developpez.Dotnet.Measures.SquareFoot,Developpez.Dotnet.Measures.SquareFoot)">
            <summary>
            Soustrait la deuxième surface de la première
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La différence entre les deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_Multiply(Developpez.Dotnet.Measures.SquareFoot,System.Double)">
            <summary>
            Multiplie une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.op_Division(Developpez.Dotnet.Measures.SquareFoot,System.Double)">
            <summary>
            Divise une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.CompareTo(Developpez.Dotnet.Measures.SquareFoot)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.TryParse(System.String,Developpez.Dotnet.Measures.SquareFoot@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="area">Surface.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.Equals(Developpez.Dotnet.Measures.SquareFoot)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareFoot.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.SquareFoot.Value">
            <summary>
            Obtient la valeur ce cette surface.
            </summary>
            <value>
            La valeur de cette surface
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.SquareFoot.Developpez#Dotnet#Measures#IArea#ValueInSquareMeters">
            <summary>
            Obtient la valeur de cette surface en mètres carrés
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.SquareInch">
            <summary>
            Représente une surface en pouces carrés
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.SquareInch"/>.
            </summary>
            <param name="value">La valeur de cette surface en pouces carrés</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_Implicit(System.Double)~Developpez.Dotnet.Measures.SquareInch">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.SquareInch"/>.
            </summary>
            <param name="value">Valeur en pouces carrés.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_Explicit(Developpez.Dotnet.Measures.SquareInch)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.SquareInch"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="area">Surface</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_Equality(Developpez.Dotnet.Measures.SquareInch,Developpez.Dotnet.Measures.SquareInch)">
            <summary>
            Teste l'égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_Inequality(Developpez.Dotnet.Measures.SquareInch,Developpez.Dotnet.Measures.SquareInch)">
            <summary>
            Teste la non-égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_LessThan(Developpez.Dotnet.Measures.SquareInch,Developpez.Dotnet.Measures.SquareInch)">
            <summary>
            Teste si la première surface est inférieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_GreaterThan(Developpez.Dotnet.Measures.SquareInch,Developpez.Dotnet.Measures.SquareInch)">
            <summary>
            Teste si la première surface est supérieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_LessThanOrEqual(Developpez.Dotnet.Measures.SquareInch,Developpez.Dotnet.Measures.SquareInch)">
            <summary>
            Teste si la première surface est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.SquareInch,Developpez.Dotnet.Measures.SquareInch)">
            <summary>
            Teste si la première surface est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_Addition(Developpez.Dotnet.Measures.SquareInch,Developpez.Dotnet.Measures.SquareInch)">
            <summary>
            Additionne deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La somme des deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_Subtraction(Developpez.Dotnet.Measures.SquareInch,Developpez.Dotnet.Measures.SquareInch)">
            <summary>
            Soustrait la deuxième surface de la première
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La différence entre les deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_Multiply(Developpez.Dotnet.Measures.SquareInch,System.Double)">
            <summary>
            Multiplie une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.op_Division(Developpez.Dotnet.Measures.SquareInch,System.Double)">
            <summary>
            Divise une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.CompareTo(Developpez.Dotnet.Measures.SquareInch)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.TryParse(System.String,Developpez.Dotnet.Measures.SquareInch@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="area">Surface.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.Equals(Developpez.Dotnet.Measures.SquareInch)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.SquareInch.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.SquareInch.Value">
            <summary>
            Obtient la valeur ce cette surface.
            </summary>
            <value>
            La valeur de cette surface
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.SquareInch.Developpez#Dotnet#Measures#IArea#ValueInSquareMeters">
            <summary>
            Obtient la valeur de cette surface en mètres carrés
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Acre">
            <summary>
            Représente une surface en acres
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Acre"/>.
            </summary>
            <param name="value">La valeur de cette surface en acres</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Acre">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Acre"/>.
            </summary>
            <param name="value">Valeur en acres.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_Explicit(Developpez.Dotnet.Measures.Acre)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Acre"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="area">Surface</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_Equality(Developpez.Dotnet.Measures.Acre,Developpez.Dotnet.Measures.Acre)">
            <summary>
            Teste l'égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_Inequality(Developpez.Dotnet.Measures.Acre,Developpez.Dotnet.Measures.Acre)">
            <summary>
            Teste la non-égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_LessThan(Developpez.Dotnet.Measures.Acre,Developpez.Dotnet.Measures.Acre)">
            <summary>
            Teste si la première surface est inférieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_GreaterThan(Developpez.Dotnet.Measures.Acre,Developpez.Dotnet.Measures.Acre)">
            <summary>
            Teste si la première surface est supérieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_LessThanOrEqual(Developpez.Dotnet.Measures.Acre,Developpez.Dotnet.Measures.Acre)">
            <summary>
            Teste si la première surface est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Acre,Developpez.Dotnet.Measures.Acre)">
            <summary>
            Teste si la première surface est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_Addition(Developpez.Dotnet.Measures.Acre,Developpez.Dotnet.Measures.Acre)">
            <summary>
            Additionne deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La somme des deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_Subtraction(Developpez.Dotnet.Measures.Acre,Developpez.Dotnet.Measures.Acre)">
            <summary>
            Soustrait la deuxième surface de la première
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La différence entre les deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_Multiply(Developpez.Dotnet.Measures.Acre,System.Double)">
            <summary>
            Multiplie une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.op_Division(Developpez.Dotnet.Measures.Acre,System.Double)">
            <summary>
            Divise une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.CompareTo(Developpez.Dotnet.Measures.Acre)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.TryParse(System.String,Developpez.Dotnet.Measures.Acre@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="area">Surface.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.Equals(Developpez.Dotnet.Measures.Acre)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Acre.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Acre.Value">
            <summary>
            Obtient la valeur ce cette surface.
            </summary>
            <value>
            La valeur de cette surface
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Acre.Developpez#Dotnet#Measures#IArea#ValueInSquareMeters">
            <summary>
            Obtient la valeur de cette surface en mètres carrés
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Are">
            <summary>
            Représente une surface en ares
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Are"/>.
            </summary>
            <param name="value">La valeur de cette surface en ares</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Are">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Are"/>.
            </summary>
            <param name="value">Valeur en ares.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_Explicit(Developpez.Dotnet.Measures.Are)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Are"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="area">Surface</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_Equality(Developpez.Dotnet.Measures.Are,Developpez.Dotnet.Measures.Are)">
            <summary>
            Teste l'égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_Inequality(Developpez.Dotnet.Measures.Are,Developpez.Dotnet.Measures.Are)">
            <summary>
            Teste la non-égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_LessThan(Developpez.Dotnet.Measures.Are,Developpez.Dotnet.Measures.Are)">
            <summary>
            Teste si la première surface est inférieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_GreaterThan(Developpez.Dotnet.Measures.Are,Developpez.Dotnet.Measures.Are)">
            <summary>
            Teste si la première surface est supérieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_LessThanOrEqual(Developpez.Dotnet.Measures.Are,Developpez.Dotnet.Measures.Are)">
            <summary>
            Teste si la première surface est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Are,Developpez.Dotnet.Measures.Are)">
            <summary>
            Teste si la première surface est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_Addition(Developpez.Dotnet.Measures.Are,Developpez.Dotnet.Measures.Are)">
            <summary>
            Additionne deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La somme des deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_Subtraction(Developpez.Dotnet.Measures.Are,Developpez.Dotnet.Measures.Are)">
            <summary>
            Soustrait la deuxième surface de la première
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La différence entre les deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_Multiply(Developpez.Dotnet.Measures.Are,System.Double)">
            <summary>
            Multiplie une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.op_Division(Developpez.Dotnet.Measures.Are,System.Double)">
            <summary>
            Divise une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.CompareTo(Developpez.Dotnet.Measures.Are)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.TryParse(System.String,Developpez.Dotnet.Measures.Are@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="area">Surface.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.Equals(Developpez.Dotnet.Measures.Are)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Are.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Are.Value">
            <summary>
            Obtient la valeur ce cette surface.
            </summary>
            <value>
            La valeur de cette surface
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Are.Developpez#Dotnet#Measures#IArea#ValueInSquareMeters">
            <summary>
            Obtient la valeur de cette surface en mètres carrés
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Hectare">
            <summary>
            Représente une surface en hectares
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Hectare"/>.
            </summary>
            <param name="value">La valeur de cette surface en hectares</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Hectare">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Hectare"/>.
            </summary>
            <param name="value">Valeur en hectares.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_Explicit(Developpez.Dotnet.Measures.Hectare)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Hectare"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="area">Surface</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_Equality(Developpez.Dotnet.Measures.Hectare,Developpez.Dotnet.Measures.Hectare)">
            <summary>
            Teste l'égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_Inequality(Developpez.Dotnet.Measures.Hectare,Developpez.Dotnet.Measures.Hectare)">
            <summary>
            Teste la non-égalité de deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si les deux surfaces sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_LessThan(Developpez.Dotnet.Measures.Hectare,Developpez.Dotnet.Measures.Hectare)">
            <summary>
            Teste si la première surface est inférieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_GreaterThan(Developpez.Dotnet.Measures.Hectare,Developpez.Dotnet.Measures.Hectare)">
            <summary>
            Teste si la première surface est supérieure à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_LessThanOrEqual(Developpez.Dotnet.Measures.Hectare,Developpez.Dotnet.Measures.Hectare)">
            <summary>
            Teste si la première surface est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Hectare,Developpez.Dotnet.Measures.Hectare)">
            <summary>
            Teste si la première surface est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            true si la première surface est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_Addition(Developpez.Dotnet.Measures.Hectare,Developpez.Dotnet.Measures.Hectare)">
            <summary>
            Additionne deux surfaces.
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La somme des deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_Subtraction(Developpez.Dotnet.Measures.Hectare,Developpez.Dotnet.Measures.Hectare)">
            <summary>
            Soustrait la deuxième surface de la première
            </summary>
            <param name="a">Première surface</param>
            <param name="b">Deuxième surface</param>
            <returns>
            La différence entre les deux surfaces.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_Multiply(Developpez.Dotnet.Measures.Hectare,System.Double)">
            <summary>
            Multiplie une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.op_Division(Developpez.Dotnet.Measures.Hectare,System.Double)">
            <summary>
            Divise une surface par un nombre.
            </summary>
            <param name="area">surface</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.CompareTo(Developpez.Dotnet.Measures.Hectare)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.TryParse(System.String,Developpez.Dotnet.Measures.Hectare@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="area">Surface.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.Equals(Developpez.Dotnet.Measures.Hectare)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Hectare.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Hectare.Value">
            <summary>
            Obtient la valeur ce cette surface.
            </summary>
            <value>
            La valeur de cette surface
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Hectare.Developpez#Dotnet#Measures#IArea#ValueInSquareMeters">
            <summary>
            Obtient la valeur de cette surface en mètres carrés
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.AreaExtensions">
            <summary>
            Fournit des méthodes d'extension pour les surfaces
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AreaExtensions.ToSquareMeter``1(``0)">
            <summary>
            Convertit une surface en mètres carrés
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="area">Surface à convertir</param>
            <returns>Valeur en mètres carrés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AreaExtensions.ToSquareFoot``1(``0)">
            <summary>
            Convertit une surface en pieds carrés
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="area">Surface à convertir</param>
            <returns>Valeur en pieds carrés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AreaExtensions.ToSquareInch``1(``0)">
            <summary>
            Convertit une surface en pouces carrés
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="area">Surface à convertir</param>
            <returns>Valeur en pouces carrés</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AreaExtensions.ToAcre``1(``0)">
            <summary>
            Convertit une surface en acres
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="area">Surface à convertir</param>
            <returns>Valeur en acres</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AreaExtensions.ToAre``1(``0)">
            <summary>
            Convertit une surface en ares
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="area">Surface à convertir</param>
            <returns>Valeur en ares</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.AreaExtensions.ToHectare``1(``0)">
            <summary>
            Convertit une surface en hectares
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="area">Surface à convertir</param>
            <returns>Valeur en hectares</returns>
        </member>
        <member name="T:Developpez.Dotnet.Measures.ILength">
            <summary>
            Représente une mesure de longueur
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Measures.ILength.ValueInMeters">
            <summary>
            Obtient la valeur de cette longueur en mètres
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Meter">
            <summary>
            Représente une longueur en mètres
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Meter"/>.
            </summary>
            <param name="value">La valeur de cette longueur en mètres.</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Meter">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Meter"/>.
            </summary>
            <param name="value">Valeur en mètres.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_Explicit(Developpez.Dotnet.Measures.Meter)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Meter"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="length">Longueur</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_Equality(Developpez.Dotnet.Measures.Meter,Developpez.Dotnet.Measures.Meter)">
            <summary>
            Teste l'égalité de deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si les deux longueurs sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_Inequality(Developpez.Dotnet.Measures.Meter,Developpez.Dotnet.Measures.Meter)">
            <summary>
            Teste la non-égalité de deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si les deux longueurs sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_LessThan(Developpez.Dotnet.Measures.Meter,Developpez.Dotnet.Measures.Meter)">
            <summary>
            Teste si la première longueur est inférieure à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_GreaterThan(Developpez.Dotnet.Measures.Meter,Developpez.Dotnet.Measures.Meter)">
            <summary>
            Teste si la première longueur est supérieure à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_LessThanOrEqual(Developpez.Dotnet.Measures.Meter,Developpez.Dotnet.Measures.Meter)">
            <summary>
            Teste si la première longueur est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Meter,Developpez.Dotnet.Measures.Meter)">
            <summary>
            Teste si la première longueur est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_Addition(Developpez.Dotnet.Measures.Meter,Developpez.Dotnet.Measures.Meter)">
            <summary>
            Additionne deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            La somme des deux longueurs.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_Subtraction(Developpez.Dotnet.Measures.Meter,Developpez.Dotnet.Measures.Meter)">
            <summary>
            Soustrait la deuxième longueur de la première
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            La différence entre les deux longueurs.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_Multiply(Developpez.Dotnet.Measures.Meter,System.Double)">
            <summary>
            Multiplie une longueur par un nombre.
            </summary>
            <param name="length">Longueur</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.op_Division(Developpez.Dotnet.Measures.Meter,System.Double)">
            <summary>
            Divise une longueur par un nombre.
            </summary>
            <param name="length">Longueur</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.CompareTo(Developpez.Dotnet.Measures.Meter)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.TryParse(System.String,Developpez.Dotnet.Measures.Meter@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="length">Longueur.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.Equals(Developpez.Dotnet.Measures.Meter)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Meter.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Meter.Value">
            <summary>
            Obtient la valeur de cette longueur.
            </summary>
            <value>
            La valeur de cette longueur en mètres
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Meter.Developpez#Dotnet#Measures#ILength#ValueInMeters">
            <summary>
            Obtient la valeur de cette longueur en mètres
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Foot">
            <summary>
            Représente une longueur en pieds
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Foot"/>.
            </summary>
            <param name="value">La valeur de cette longueur en pieds.</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Foot">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Foot"/>.
            </summary>
            <param name="value">Valeur en pieds.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_Explicit(Developpez.Dotnet.Measures.Foot)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Foot"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="length">Longueur</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_Equality(Developpez.Dotnet.Measures.Foot,Developpez.Dotnet.Measures.Foot)">
            <summary>
            Teste l'égalité de deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si les deux longueurs sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_Inequality(Developpez.Dotnet.Measures.Foot,Developpez.Dotnet.Measures.Foot)">
            <summary>
            Teste la non-égalité de deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si les deux longueurs sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_LessThan(Developpez.Dotnet.Measures.Foot,Developpez.Dotnet.Measures.Foot)">
            <summary>
            Teste si la première longueur est inférieure à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_GreaterThan(Developpez.Dotnet.Measures.Foot,Developpez.Dotnet.Measures.Foot)">
            <summary>
            Teste si la première longueur est supérieure à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_LessThanOrEqual(Developpez.Dotnet.Measures.Foot,Developpez.Dotnet.Measures.Foot)">
            <summary>
            Teste si la première longueur est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Foot,Developpez.Dotnet.Measures.Foot)">
            <summary>
            Teste si la première longueur est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_Addition(Developpez.Dotnet.Measures.Foot,Developpez.Dotnet.Measures.Foot)">
            <summary>
            Additionne deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            La somme des deux longueurs.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_Subtraction(Developpez.Dotnet.Measures.Foot,Developpez.Dotnet.Measures.Foot)">
            <summary>
            Soustrait la deuxième longueur de la première
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            La différence entre les deux longueurs.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_Multiply(Developpez.Dotnet.Measures.Foot,System.Double)">
            <summary>
            Multiplie une longueur par un nombre.
            </summary>
            <param name="length">Longueur</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.op_Division(Developpez.Dotnet.Measures.Foot,System.Double)">
            <summary>
            Divise une longueur par un nombre.
            </summary>
            <param name="length">Longueur</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.CompareTo(Developpez.Dotnet.Measures.Foot)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.TryParse(System.String,Developpez.Dotnet.Measures.Foot@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="length">Longueur.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.Equals(Developpez.Dotnet.Measures.Foot)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Foot.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Foot.Value">
            <summary>
            Obtient la valeur de cette longueur.
            </summary>
            <value>
            La valeur de cette longueur en pieds
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Foot.Developpez#Dotnet#Measures#ILength#ValueInMeters">
            <summary>
            Obtient la valeur de cette longueur en mètres
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Inch">
            <summary>
            Représente une longueur en pouces
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Inch"/>.
            </summary>
            <param name="value">La valeur de cette longueur en pouces.</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Inch">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Inch"/>.
            </summary>
            <param name="value">Valeur en pouces.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_Explicit(Developpez.Dotnet.Measures.Inch)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Inch"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="length">Longueur</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_Equality(Developpez.Dotnet.Measures.Inch,Developpez.Dotnet.Measures.Inch)">
            <summary>
            Teste l'égalité de deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si les deux longueurs sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_Inequality(Developpez.Dotnet.Measures.Inch,Developpez.Dotnet.Measures.Inch)">
            <summary>
            Teste la non-égalité de deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si les deux longueurs sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_LessThan(Developpez.Dotnet.Measures.Inch,Developpez.Dotnet.Measures.Inch)">
            <summary>
            Teste si la première longueur est inférieure à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_GreaterThan(Developpez.Dotnet.Measures.Inch,Developpez.Dotnet.Measures.Inch)">
            <summary>
            Teste si la première longueur est supérieure à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_LessThanOrEqual(Developpez.Dotnet.Measures.Inch,Developpez.Dotnet.Measures.Inch)">
            <summary>
            Teste si la première longueur est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Inch,Developpez.Dotnet.Measures.Inch)">
            <summary>
            Teste si la première longueur est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_Addition(Developpez.Dotnet.Measures.Inch,Developpez.Dotnet.Measures.Inch)">
            <summary>
            Additionne deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            La somme des deux longueurs.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_Subtraction(Developpez.Dotnet.Measures.Inch,Developpez.Dotnet.Measures.Inch)">
            <summary>
            Soustrait la deuxième longueur de la première
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            La différence entre les deux longueurs.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_Multiply(Developpez.Dotnet.Measures.Inch,System.Double)">
            <summary>
            Multiplie une longueur par un nombre.
            </summary>
            <param name="length">Longueur</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.op_Division(Developpez.Dotnet.Measures.Inch,System.Double)">
            <summary>
            Divise une longueur par un nombre.
            </summary>
            <param name="length">Longueur</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.CompareTo(Developpez.Dotnet.Measures.Inch)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.TryParse(System.String,Developpez.Dotnet.Measures.Inch@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="length">Longueur.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.Equals(Developpez.Dotnet.Measures.Inch)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Inch.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Inch.Value">
            <summary>
            Obtient la valeur de cette longueur.
            </summary>
            <value>
            La valeur de cette longueur en pouces
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Inch.Developpez#Dotnet#Measures#ILength#ValueInMeters">
            <summary>
            Obtient la valeur de cette longueur en mètres
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Mile">
            <summary>
            Représente une longueur en miles
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Mile"/>.
            </summary>
            <param name="value">La valeur de cette longueur en miles.</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Mile">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Mile"/>.
            </summary>
            <param name="value">Valeur en miles.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_Explicit(Developpez.Dotnet.Measures.Mile)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Mile"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="length">Longueur</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_Equality(Developpez.Dotnet.Measures.Mile,Developpez.Dotnet.Measures.Mile)">
            <summary>
            Teste l'égalité de deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si les deux longueurs sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_Inequality(Developpez.Dotnet.Measures.Mile,Developpez.Dotnet.Measures.Mile)">
            <summary>
            Teste la non-égalité de deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si les deux longueurs sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_LessThan(Developpez.Dotnet.Measures.Mile,Developpez.Dotnet.Measures.Mile)">
            <summary>
            Teste si la première longueur est inférieure à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_GreaterThan(Developpez.Dotnet.Measures.Mile,Developpez.Dotnet.Measures.Mile)">
            <summary>
            Teste si la première longueur est supérieure à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_LessThanOrEqual(Developpez.Dotnet.Measures.Mile,Developpez.Dotnet.Measures.Mile)">
            <summary>
            Teste si la première longueur est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Mile,Developpez.Dotnet.Measures.Mile)">
            <summary>
            Teste si la première longueur est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_Addition(Developpez.Dotnet.Measures.Mile,Developpez.Dotnet.Measures.Mile)">
            <summary>
            Additionne deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            La somme des deux longueurs.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_Subtraction(Developpez.Dotnet.Measures.Mile,Developpez.Dotnet.Measures.Mile)">
            <summary>
            Soustrait la deuxième longueur de la première
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            La différence entre les deux longueurs.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_Multiply(Developpez.Dotnet.Measures.Mile,System.Double)">
            <summary>
            Multiplie une longueur par un nombre.
            </summary>
            <param name="length">Longueur</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.op_Division(Developpez.Dotnet.Measures.Mile,System.Double)">
            <summary>
            Divise une longueur par un nombre.
            </summary>
            <param name="length">Longueur</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.CompareTo(Developpez.Dotnet.Measures.Mile)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.TryParse(System.String,Developpez.Dotnet.Measures.Mile@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="length">Longueur.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.Equals(Developpez.Dotnet.Measures.Mile)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Mile.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Mile.Value">
            <summary>
            Obtient la valeur de cette longueur.
            </summary>
            <value>
            La valeur de cette longueur en miles
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Mile.Developpez#Dotnet#Measures#ILength#ValueInMeters">
            <summary>
            Obtient la valeur de cette longueur en mètres
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.NauticalMile">
            <summary>
            Représente une longueur en milles marins
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.NauticalMile"/>.
            </summary>
            <param name="value">La valeur de cette longueur en milles marins.</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_Implicit(System.Double)~Developpez.Dotnet.Measures.NauticalMile">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.NauticalMile"/>.
            </summary>
            <param name="value">Valeur en milles marins.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_Explicit(Developpez.Dotnet.Measures.NauticalMile)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.NauticalMile"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="length">Longueur</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_Equality(Developpez.Dotnet.Measures.NauticalMile,Developpez.Dotnet.Measures.NauticalMile)">
            <summary>
            Teste l'égalité de deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si les deux longueurs sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_Inequality(Developpez.Dotnet.Measures.NauticalMile,Developpez.Dotnet.Measures.NauticalMile)">
            <summary>
            Teste la non-égalité de deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si les deux longueurs sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_LessThan(Developpez.Dotnet.Measures.NauticalMile,Developpez.Dotnet.Measures.NauticalMile)">
            <summary>
            Teste si la première longueur est inférieure à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_GreaterThan(Developpez.Dotnet.Measures.NauticalMile,Developpez.Dotnet.Measures.NauticalMile)">
            <summary>
            Teste si la première longueur est supérieure à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_LessThanOrEqual(Developpez.Dotnet.Measures.NauticalMile,Developpez.Dotnet.Measures.NauticalMile)">
            <summary>
            Teste si la première longueur est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.NauticalMile,Developpez.Dotnet.Measures.NauticalMile)">
            <summary>
            Teste si la première longueur est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            true si la première longueur est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_Addition(Developpez.Dotnet.Measures.NauticalMile,Developpez.Dotnet.Measures.NauticalMile)">
            <summary>
            Additionne deux longueurs.
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            La somme des deux longueurs.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_Subtraction(Developpez.Dotnet.Measures.NauticalMile,Developpez.Dotnet.Measures.NauticalMile)">
            <summary>
            Soustrait la deuxième longueur de la première
            </summary>
            <param name="a">Première longueur</param>
            <param name="b">Deuxième longueur</param>
            <returns>
            La différence entre les deux longueurs.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_Multiply(Developpez.Dotnet.Measures.NauticalMile,System.Double)">
            <summary>
            Multiplie une longueur par un nombre.
            </summary>
            <param name="length">Longueur</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.op_Division(Developpez.Dotnet.Measures.NauticalMile,System.Double)">
            <summary>
            Divise une longueur par un nombre.
            </summary>
            <param name="length">Longueur</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.CompareTo(Developpez.Dotnet.Measures.NauticalMile)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.TryParse(System.String,Developpez.Dotnet.Measures.NauticalMile@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="length">Longueur.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.Equals(Developpez.Dotnet.Measures.NauticalMile)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.NauticalMile.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.NauticalMile.Value">
            <summary>
            Obtient la valeur de cette longueur.
            </summary>
            <value>
            La valeur de cette longueur en milles marins
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.NauticalMile.Developpez#Dotnet#Measures#ILength#ValueInMeters">
            <summary>
            Obtient la valeur de cette longueur en mètres
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.LengthExtensions">
            <summary>
            Fournit des méthodes d'extension pour les longueurs
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.LengthExtensions.ToMeter``1(``0)">
            <summary>
            Convertit une longueur en mètres
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="length">Longueur à convertir</param>
            <returns>Valeur en mètres</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.LengthExtensions.ToFoot``1(``0)">
            <summary>
            Convertit une longueur en pieds
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="length">Longueur à convertir</param>
            <returns>Valeur en pieds</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.LengthExtensions.ToInch``1(``0)">
            <summary>
            Convertit une longueur en pouces
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="length">Longueur à convertir</param>
            <returns>Valeur en pouces</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.LengthExtensions.ToMile``1(``0)">
            <summary>
            Convertit une longueur en miles
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="length">Longueur à convertir</param>
            <returns>Valeur en miles</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.LengthExtensions.ToNauticalMile``1(``0)">
            <summary>
            Convertit une longueur en milles marins
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="length">Longueur à convertir</param>
            <returns>Valeur en milles marins</returns>
        </member>
        <member name="T:Developpez.Dotnet.Measures.IMass">
            <summary>
            Représente une mesure de masse
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Measures.IMass.ValueInKilograms">
            <summary>
            Obtient la valeur de cette masse en kilogrammes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Kilogram">
            <summary>
            Représente une masse en kilogrammes
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Kilogram"/>.
            </summary>
            <param name="value">La valeur de cette masse en kilogrammes</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Kilogram">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Kilogram"/>.
            </summary>
            <param name="value">Valeur en kilogrammes.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_Explicit(Developpez.Dotnet.Measures.Kilogram)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Kilogram"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="mass">Masse</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_Equality(Developpez.Dotnet.Measures.Kilogram,Developpez.Dotnet.Measures.Kilogram)">
            <summary>
            Teste l'égalité de deux masses.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si les deux masses sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_Inequality(Developpez.Dotnet.Measures.Kilogram,Developpez.Dotnet.Measures.Kilogram)">
            <summary>
            Teste la non-égalité de deux masses.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si les deux masses sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_LessThan(Developpez.Dotnet.Measures.Kilogram,Developpez.Dotnet.Measures.Kilogram)">
            <summary>
            Teste si la première masse est inférieure à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_GreaterThan(Developpez.Dotnet.Measures.Kilogram,Developpez.Dotnet.Measures.Kilogram)">
            <summary>
            Teste si la première masse est supérieure à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_LessThanOrEqual(Developpez.Dotnet.Measures.Kilogram,Developpez.Dotnet.Measures.Kilogram)">
            <summary>
            Teste si la première masse est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Kilogram,Developpez.Dotnet.Measures.Kilogram)">
            <summary>
            Teste si la première masse est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_Addition(Developpez.Dotnet.Measures.Kilogram,Developpez.Dotnet.Measures.Kilogram)">
            <summary>
            Additionne deux masses.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            La somme des deux masses.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_Subtraction(Developpez.Dotnet.Measures.Kilogram,Developpez.Dotnet.Measures.Kilogram)">
            <summary>
            Soustrait la deuxième masse de la première
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            La différence entre les deux masses.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_Multiply(Developpez.Dotnet.Measures.Kilogram,System.Double)">
            <summary>
            Multiplie une masse par un nombre.
            </summary>
            <param name="mass">Masse</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.op_Division(Developpez.Dotnet.Measures.Kilogram,System.Double)">
            <summary>
            Divise une masse par un nombre.
            </summary>
            <param name="mass">Masse</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.CompareTo(Developpez.Dotnet.Measures.Kilogram)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.TryParse(System.String,Developpez.Dotnet.Measures.Kilogram@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="mass">Masse.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.Equals(Developpez.Dotnet.Measures.Kilogram)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kilogram.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Kilogram.Value">
            <summary>
            Obtient la valeur de cette masse.
            </summary>
            <value>
            La valeur de cette masse en kilogrammes
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Kilogram.Developpez#Dotnet#Measures#IMass#ValueInKilograms">
            <summary>
            Obtient la valeur de cette masse en kilogrammes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Pound">
            <summary>
            Représente une masse en livres
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Pound"/>.
            </summary>
            <param name="value">La valeur de cette masse en livres</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Pound">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Pound"/>.
            </summary>
            <param name="value">Valeur en livres.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_Explicit(Developpez.Dotnet.Measures.Pound)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Pound"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="mass">Masse</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_Equality(Developpez.Dotnet.Measures.Pound,Developpez.Dotnet.Measures.Pound)">
            <summary>
            Teste l'égalité de deux masses.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si les deux masses sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_Inequality(Developpez.Dotnet.Measures.Pound,Developpez.Dotnet.Measures.Pound)">
            <summary>
            Teste la non-égalité de deux masses.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si les deux masses sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_LessThan(Developpez.Dotnet.Measures.Pound,Developpez.Dotnet.Measures.Pound)">
            <summary>
            Teste si la première masse est inférieure à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_GreaterThan(Developpez.Dotnet.Measures.Pound,Developpez.Dotnet.Measures.Pound)">
            <summary>
            Teste si la première masse est supérieure à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_LessThanOrEqual(Developpez.Dotnet.Measures.Pound,Developpez.Dotnet.Measures.Pound)">
            <summary>
            Teste si la première masse est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Pound,Developpez.Dotnet.Measures.Pound)">
            <summary>
            Teste si la première masse est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_Addition(Developpez.Dotnet.Measures.Pound,Developpez.Dotnet.Measures.Pound)">
            <summary>
            Additionne deux masses.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            La somme des deux masses.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_Subtraction(Developpez.Dotnet.Measures.Pound,Developpez.Dotnet.Measures.Pound)">
            <summary>
            Soustrait la deuxième masse de la première
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            La différence entre les deux masses.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_Multiply(Developpez.Dotnet.Measures.Pound,System.Double)">
            <summary>
            Multiplie une masse par un nombre.
            </summary>
            <param name="mass">Masse</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.op_Division(Developpez.Dotnet.Measures.Pound,System.Double)">
            <summary>
            Divise une masse par un nombre.
            </summary>
            <param name="mass">Masse</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.CompareTo(Developpez.Dotnet.Measures.Pound)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.TryParse(System.String,Developpez.Dotnet.Measures.Pound@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="mass">Masse.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.Equals(Developpez.Dotnet.Measures.Pound)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pound.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Pound.Value">
            <summary>
            Obtient la valeur de cette masse.
            </summary>
            <value>
            La valeur de cette masse en livres
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Pound.Developpez#Dotnet#Measures#IMass#ValueInKilograms">
            <summary>
            Obtient la valeur de cette masse en kilogrammes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Ounce">
            <summary>
            Représente une masse en onces
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Ounce"/>.
            </summary>
            <param name="value">La valeur de cette masse en onces</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Ounce">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Ounce"/>.
            </summary>
            <param name="value">Valeur en onces.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_Explicit(Developpez.Dotnet.Measures.Ounce)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Ounce"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="mass">Masse</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_Equality(Developpez.Dotnet.Measures.Ounce,Developpez.Dotnet.Measures.Ounce)">
            <summary>
            Teste l'égalité de deux masses.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si les deux masses sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_Inequality(Developpez.Dotnet.Measures.Ounce,Developpez.Dotnet.Measures.Ounce)">
            <summary>
            Teste la non-égalité de deux masses.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si les deux masses sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_LessThan(Developpez.Dotnet.Measures.Ounce,Developpez.Dotnet.Measures.Ounce)">
            <summary>
            Teste si la première masse est inférieure à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_GreaterThan(Developpez.Dotnet.Measures.Ounce,Developpez.Dotnet.Measures.Ounce)">
            <summary>
            Teste si la première masse est supérieure à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_LessThanOrEqual(Developpez.Dotnet.Measures.Ounce,Developpez.Dotnet.Measures.Ounce)">
            <summary>
            Teste si la première masse est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Ounce,Developpez.Dotnet.Measures.Ounce)">
            <summary>
            Teste si la première masse est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            true si la première masse est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_Addition(Developpez.Dotnet.Measures.Ounce,Developpez.Dotnet.Measures.Ounce)">
            <summary>
            Additionne deux masses.
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            La somme des deux masses.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_Subtraction(Developpez.Dotnet.Measures.Ounce,Developpez.Dotnet.Measures.Ounce)">
            <summary>
            Soustrait la deuxième masse de la première
            </summary>
            <param name="a">Première masse</param>
            <param name="b">Deuxième masse</param>
            <returns>
            La différence entre les deux masses.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_Multiply(Developpez.Dotnet.Measures.Ounce,System.Double)">
            <summary>
            Multiplie une masse par un nombre.
            </summary>
            <param name="mass">Masse</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.op_Division(Developpez.Dotnet.Measures.Ounce,System.Double)">
            <summary>
            Divise une masse par un nombre.
            </summary>
            <param name="mass">Masse</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.CompareTo(Developpez.Dotnet.Measures.Ounce)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.TryParse(System.String,Developpez.Dotnet.Measures.Ounce@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="mass">Masse.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.Equals(Developpez.Dotnet.Measures.Ounce)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Ounce.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Ounce.Value">
            <summary>
            Obtient la valeur de cette masse.
            </summary>
            <value>
            La valeur de cette masse en onces
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Ounce.Developpez#Dotnet#Measures#IMass#ValueInKilograms">
            <summary>
            Obtient la valeur de cette masse en kilogrammes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.MassExtensions">
            <summary>
            Fournit des méthodes d'extension pour les masses
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.MassExtensions.ToKilogram``1(``0)">
            <summary>
            Convertit une masse en kilogrammes
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="mass">Masse à convertir</param>
            <returns>Valeur en kilogrammes</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.MassExtensions.ToPound``1(``0)">
            <summary>
            Convertit une masse en livres
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="mass">Masse à convertir</param>
            <returns>Valeur en livres</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.MassExtensions.ToOunce``1(``0)">
            <summary>
            Convertit une masse en onces
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="mass">Masse à convertir</param>
            <returns>Valeur en onces</returns>
        </member>
        <member name="T:Developpez.Dotnet.Measures.ITemperature">
            <summary>
            Représente une mesure de température
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Measures.ITemperature.ValueInKelvins">
            <summary>
            Obtient la valeur de cette température en kelvins
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Kelvin">
            <summary>
            Représente une température en kelvins
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Kelvin"/>.
            </summary>
            <param name="value">La valeur de cette température en kelvins</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Kelvin">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Kelvin"/>.
            </summary>
            <param name="value">Valeur en kelvins.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_Explicit(Developpez.Dotnet.Measures.Kelvin)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Kelvin"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="temperature">Temperature</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_Equality(Developpez.Dotnet.Measures.Kelvin,Developpez.Dotnet.Measures.Kelvin)">
            <summary>
            Teste l'égalité de deux températures.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si les deux températures sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_Inequality(Developpez.Dotnet.Measures.Kelvin,Developpez.Dotnet.Measures.Kelvin)">
            <summary>
            Teste la non-égalité de deux températures.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si les deux températures sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_LessThan(Developpez.Dotnet.Measures.Kelvin,Developpez.Dotnet.Measures.Kelvin)">
            <summary>
            Teste si la première température est inférieure à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_GreaterThan(Developpez.Dotnet.Measures.Kelvin,Developpez.Dotnet.Measures.Kelvin)">
            <summary>
            Teste si la première température est supérieure à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_LessThanOrEqual(Developpez.Dotnet.Measures.Kelvin,Developpez.Dotnet.Measures.Kelvin)">
            <summary>
            Teste si la première température est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Kelvin,Developpez.Dotnet.Measures.Kelvin)">
            <summary>
            Teste si la première température est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_Addition(Developpez.Dotnet.Measures.Kelvin,Developpez.Dotnet.Measures.Kelvin)">
            <summary>
            Additionne deux températures.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            La somme des deux températures.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_Subtraction(Developpez.Dotnet.Measures.Kelvin,Developpez.Dotnet.Measures.Kelvin)">
            <summary>
            Soustrait la deuxième température de la première
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            La différence entre les deux températures.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_Multiply(Developpez.Dotnet.Measures.Kelvin,System.Double)">
            <summary>
            Multiplie une température par un nombre.
            </summary>
            <param name="temperature">Température</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.op_Division(Developpez.Dotnet.Measures.Kelvin,System.Double)">
            <summary>
            Divise une température par un nombre.
            </summary>
            <param name="temperature">Température</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.CompareTo(Developpez.Dotnet.Measures.Kelvin)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.TryParse(System.String,Developpez.Dotnet.Measures.Kelvin@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="temperature">Temperature.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.Equals(Developpez.Dotnet.Measures.Kelvin)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Kelvin.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Kelvin.Value">
            <summary>
            Obtient la valeur de cette température.
            </summary>
            <value>
            La valeur de cette température en kelvins
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Kelvin.AbsoluteZero">
            <summary>
            Renvoie le zero absolu.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Kelvin.Developpez#Dotnet#Measures#ITemperature#ValueInKelvins">
            <summary>
            Obtient la valeur de cette température en kelvins
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Celsius">
            <summary>
            Représente une température en degrés Celsius
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Celsius"/>.
            </summary>
            <param name="value">La valeur de cette température en degrés Celsius</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Celsius">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Celsius"/>.
            </summary>
            <param name="value">Valeur en degrés Celsius.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_Explicit(Developpez.Dotnet.Measures.Celsius)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Celsius"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="temperature">Temperature</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_Equality(Developpez.Dotnet.Measures.Celsius,Developpez.Dotnet.Measures.Celsius)">
            <summary>
            Teste l'égalité de deux températures.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si les deux températures sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_Inequality(Developpez.Dotnet.Measures.Celsius,Developpez.Dotnet.Measures.Celsius)">
            <summary>
            Teste la non-égalité de deux températures.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si les deux températures sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_LessThan(Developpez.Dotnet.Measures.Celsius,Developpez.Dotnet.Measures.Celsius)">
            <summary>
            Teste si la première température est inférieure à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_GreaterThan(Developpez.Dotnet.Measures.Celsius,Developpez.Dotnet.Measures.Celsius)">
            <summary>
            Teste si la première température est supérieure à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_LessThanOrEqual(Developpez.Dotnet.Measures.Celsius,Developpez.Dotnet.Measures.Celsius)">
            <summary>
            Teste si la première température est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Celsius,Developpez.Dotnet.Measures.Celsius)">
            <summary>
            Teste si la première température est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_Addition(Developpez.Dotnet.Measures.Celsius,Developpez.Dotnet.Measures.Celsius)">
            <summary>
            Additionne deux températures.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            La somme des deux températures.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_Subtraction(Developpez.Dotnet.Measures.Celsius,Developpez.Dotnet.Measures.Celsius)">
            <summary>
            Soustrait la deuxième température de la première
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            La différence entre les deux températures.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_Multiply(Developpez.Dotnet.Measures.Celsius,System.Double)">
            <summary>
            Multiplie une température par un nombre.
            </summary>
            <param name="temperature">Température</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.op_Division(Developpez.Dotnet.Measures.Celsius,System.Double)">
            <summary>
            Divise une température par un nombre.
            </summary>
            <param name="temperature">Température</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.CompareTo(Developpez.Dotnet.Measures.Celsius)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.TryParse(System.String,Developpez.Dotnet.Measures.Celsius@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="temperature">Temperature.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.Equals(Developpez.Dotnet.Measures.Celsius)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Celsius.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Celsius.Value">
            <summary>
            Obtient la valeur de cette température.
            </summary>
            <value>
            La valeur de cette température en degrés Celsius
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Celsius.AbsoluteZero">
            <summary>
            Renvoie le zero absolu.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Celsius.Developpez#Dotnet#Measures#ITemperature#ValueInKelvins">
            <summary>
            Obtient la valeur de cette température en kelvins
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Fahrenheit">
            <summary>
            Représente une température en degrés Fahrenheit
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Fahrenheit"/>.
            </summary>
            <param name="value">La valeur de cette température en degrés Fahrenheit</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Fahrenheit">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Fahrenheit"/>.
            </summary>
            <param name="value">Valeur en degrés Fahrenheit.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_Explicit(Developpez.Dotnet.Measures.Fahrenheit)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Fahrenheit"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="temperature">Temperature</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_Equality(Developpez.Dotnet.Measures.Fahrenheit,Developpez.Dotnet.Measures.Fahrenheit)">
            <summary>
            Teste l'égalité de deux températures.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si les deux températures sont égales, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_Inequality(Developpez.Dotnet.Measures.Fahrenheit,Developpez.Dotnet.Measures.Fahrenheit)">
            <summary>
            Teste la non-égalité de deux températures.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si les deux températures sont différentes, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_LessThan(Developpez.Dotnet.Measures.Fahrenheit,Developpez.Dotnet.Measures.Fahrenheit)">
            <summary>
            Teste si la première température est inférieure à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est inférieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_GreaterThan(Developpez.Dotnet.Measures.Fahrenheit,Developpez.Dotnet.Measures.Fahrenheit)">
            <summary>
            Teste si la première température est supérieure à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est supérieure à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_LessThanOrEqual(Developpez.Dotnet.Measures.Fahrenheit,Developpez.Dotnet.Measures.Fahrenheit)">
            <summary>
            Teste si la première température est inférieure ou égale à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est inférieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Fahrenheit,Developpez.Dotnet.Measures.Fahrenheit)">
            <summary>
            Teste si la première température est supérieure ou égale à la deuxième.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            true si la première température est supérieure ou égale à la deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_Addition(Developpez.Dotnet.Measures.Fahrenheit,Developpez.Dotnet.Measures.Fahrenheit)">
            <summary>
            Additionne deux températures.
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            La somme des deux températures.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_Subtraction(Developpez.Dotnet.Measures.Fahrenheit,Developpez.Dotnet.Measures.Fahrenheit)">
            <summary>
            Soustrait la deuxième température de la première
            </summary>
            <param name="a">Première température</param>
            <param name="b">Deuxième température</param>
            <returns>
            La différence entre les deux températures.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_Multiply(Developpez.Dotnet.Measures.Fahrenheit,System.Double)">
            <summary>
            Multiplie une température par un nombre.
            </summary>
            <param name="temperature">Température</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.op_Division(Developpez.Dotnet.Measures.Fahrenheit,System.Double)">
            <summary>
            Divise une température par un nombre.
            </summary>
            <param name="temperature">Température</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.CompareTo(Developpez.Dotnet.Measures.Fahrenheit)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.TryParse(System.String,Developpez.Dotnet.Measures.Fahrenheit@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="temperature">Temperature.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.Equals(Developpez.Dotnet.Measures.Fahrenheit)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Fahrenheit.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Fahrenheit.Value">
            <summary>
            Obtient la valeur de cette température.
            </summary>
            <value>
            La valeur de cette température en degrés Fahrenheit
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Fahrenheit.AbsoluteZero">
            <summary>
            Renvoie le zero absolu.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Fahrenheit.Developpez#Dotnet#Measures#ITemperature#ValueInKelvins">
            <summary>
            Obtient la valeur de cette température en kelvins
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.TemperatureExtensions">
            <summary>
            Fournit des méthodes d'extension pour les températures
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.TemperatureExtensions.ToKelvin``1(``0)">
            <summary>
            Convertit une température en kelvins
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="temperature">Température à convertir</param>
            <returns>Valeur en kelvins</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.TemperatureExtensions.ToCelsius``1(``0)">
            <summary>
            Convertit une température en degrés Celsius
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="temperature">Température à convertir</param>
            <returns>Valeur en degrés Celsius</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.TemperatureExtensions.ToFahrenheit``1(``0)">
            <summary>
            Convertit une température en degrés Fahrenheit
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="temperature">Température à convertir</param>
            <returns>Valeur en degrés Fahrenheit</returns>
        </member>
        <member name="T:Developpez.Dotnet.Measures.IVolume">
            <summary>
            Représente une mesure de longueur
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Measures.IVolume.ValueInCubeMeters">
            <summary>
            Obtient la valeur de ce volume en mètres cubes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.CubeMeter">
            <summary>
            Représente un volume en mètres cubes
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.CubeMeter"/>.
            </summary>
            <param name="value">La valeur de ce volume en mètres cubes</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_Implicit(System.Double)~Developpez.Dotnet.Measures.CubeMeter">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.CubeMeter"/>.
            </summary>
            <param name="value">Valeur en mètres cubes.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_Explicit(Developpez.Dotnet.Measures.CubeMeter)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.CubeMeter"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="volume">Volume</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_Equality(Developpez.Dotnet.Measures.CubeMeter,Developpez.Dotnet.Measures.CubeMeter)">
            <summary>
            Teste l'égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont égaux, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_Inequality(Developpez.Dotnet.Measures.CubeMeter,Developpez.Dotnet.Measures.CubeMeter)">
            <summary>
            Teste la non-égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont différents, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_LessThan(Developpez.Dotnet.Measures.CubeMeter,Developpez.Dotnet.Measures.CubeMeter)">
            <summary>
            Teste si le premier volume est inférieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_GreaterThan(Developpez.Dotnet.Measures.CubeMeter,Developpez.Dotnet.Measures.CubeMeter)">
            <summary>
            Teste si le premier volume est supérieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_LessThanOrEqual(Developpez.Dotnet.Measures.CubeMeter,Developpez.Dotnet.Measures.CubeMeter)">
            <summary>
            Teste si le premier volume est inférieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.CubeMeter,Developpez.Dotnet.Measures.CubeMeter)">
            <summary>
            Teste si le premier volume est supérieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_Addition(Developpez.Dotnet.Measures.CubeMeter,Developpez.Dotnet.Measures.CubeMeter)">
            <summary>
            Additionne deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La somme des deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_Subtraction(Developpez.Dotnet.Measures.CubeMeter,Developpez.Dotnet.Measures.CubeMeter)">
            <summary>
            Soustrait le deuxième volume du premier
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La différence entre les deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_Multiply(Developpez.Dotnet.Measures.CubeMeter,System.Double)">
            <summary>
            Multiplie un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.op_Division(Developpez.Dotnet.Measures.CubeMeter,System.Double)">
            <summary>
            Divise un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.CompareTo(Developpez.Dotnet.Measures.CubeMeter)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>inférieur à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>supérieur à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.TryParse(System.String,Developpez.Dotnet.Measures.CubeMeter@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="volume">volume.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.Equals(Developpez.Dotnet.Measures.CubeMeter)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.CubeMeter.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.CubeMeter.Value">
            <summary>
            Obtient la valeur de ce volume.
            </summary>
            <value>
            La valeur de ce volume en mètres cubes
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.CubeMeter.Developpez#Dotnet#Measures#IVolume#ValueInCubeMeters">
            <summary>
            Obtient la valeur de cette volume en mètres cubes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Liter">
            <summary>
            Représente un volume en litres
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Liter"/>.
            </summary>
            <param name="value">La valeur de ce volume en litres</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Liter">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Liter"/>.
            </summary>
            <param name="value">Valeur en litres.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_Explicit(Developpez.Dotnet.Measures.Liter)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Liter"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="volume">Volume</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_Equality(Developpez.Dotnet.Measures.Liter,Developpez.Dotnet.Measures.Liter)">
            <summary>
            Teste l'égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont égaux, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_Inequality(Developpez.Dotnet.Measures.Liter,Developpez.Dotnet.Measures.Liter)">
            <summary>
            Teste la non-égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont différents, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_LessThan(Developpez.Dotnet.Measures.Liter,Developpez.Dotnet.Measures.Liter)">
            <summary>
            Teste si le premier volume est inférieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_GreaterThan(Developpez.Dotnet.Measures.Liter,Developpez.Dotnet.Measures.Liter)">
            <summary>
            Teste si le premier volume est supérieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_LessThanOrEqual(Developpez.Dotnet.Measures.Liter,Developpez.Dotnet.Measures.Liter)">
            <summary>
            Teste si le premier volume est inférieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Liter,Developpez.Dotnet.Measures.Liter)">
            <summary>
            Teste si le premier volume est supérieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_Addition(Developpez.Dotnet.Measures.Liter,Developpez.Dotnet.Measures.Liter)">
            <summary>
            Additionne deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La somme des deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_Subtraction(Developpez.Dotnet.Measures.Liter,Developpez.Dotnet.Measures.Liter)">
            <summary>
            Soustrait le deuxième volume du premier
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La différence entre les deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_Multiply(Developpez.Dotnet.Measures.Liter,System.Double)">
            <summary>
            Multiplie un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.op_Division(Developpez.Dotnet.Measures.Liter,System.Double)">
            <summary>
            Divise un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.CompareTo(Developpez.Dotnet.Measures.Liter)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>inférieur à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>supérieur à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.TryParse(System.String,Developpez.Dotnet.Measures.Liter@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="volume">volume.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.Equals(Developpez.Dotnet.Measures.Liter)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Liter.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Liter.Value">
            <summary>
            Obtient la valeur de ce volume.
            </summary>
            <value>
            La valeur de ce volume en litres
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Liter.Developpez#Dotnet#Measures#IVolume#ValueInCubeMeters">
            <summary>
            Obtient la valeur de cette volume en mètres cubes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Pint">
            <summary>
            Représente un volume en pintes
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Pint"/>.
            </summary>
            <param name="value">La valeur de ce volume en pintes</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Pint">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Pint"/>.
            </summary>
            <param name="value">Valeur en pintes.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_Explicit(Developpez.Dotnet.Measures.Pint)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Pint"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="volume">Volume</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_Equality(Developpez.Dotnet.Measures.Pint,Developpez.Dotnet.Measures.Pint)">
            <summary>
            Teste l'égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont égaux, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_Inequality(Developpez.Dotnet.Measures.Pint,Developpez.Dotnet.Measures.Pint)">
            <summary>
            Teste la non-égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont différents, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_LessThan(Developpez.Dotnet.Measures.Pint,Developpez.Dotnet.Measures.Pint)">
            <summary>
            Teste si le premier volume est inférieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_GreaterThan(Developpez.Dotnet.Measures.Pint,Developpez.Dotnet.Measures.Pint)">
            <summary>
            Teste si le premier volume est supérieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_LessThanOrEqual(Developpez.Dotnet.Measures.Pint,Developpez.Dotnet.Measures.Pint)">
            <summary>
            Teste si le premier volume est inférieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Pint,Developpez.Dotnet.Measures.Pint)">
            <summary>
            Teste si le premier volume est supérieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_Addition(Developpez.Dotnet.Measures.Pint,Developpez.Dotnet.Measures.Pint)">
            <summary>
            Additionne deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La somme des deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_Subtraction(Developpez.Dotnet.Measures.Pint,Developpez.Dotnet.Measures.Pint)">
            <summary>
            Soustrait le deuxième volume du premier
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La différence entre les deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_Multiply(Developpez.Dotnet.Measures.Pint,System.Double)">
            <summary>
            Multiplie un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.op_Division(Developpez.Dotnet.Measures.Pint,System.Double)">
            <summary>
            Divise un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.CompareTo(Developpez.Dotnet.Measures.Pint)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>inférieur à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>supérieur à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.TryParse(System.String,Developpez.Dotnet.Measures.Pint@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="volume">volume.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.Equals(Developpez.Dotnet.Measures.Pint)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Pint.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Pint.Value">
            <summary>
            Obtient la valeur de ce volume.
            </summary>
            <value>
            La valeur de ce volume en pintes
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Pint.Developpez#Dotnet#Measures#IVolume#ValueInCubeMeters">
            <summary>
            Obtient la valeur de cette volume en mètres cubes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.Gallon">
            <summary>
            Représente un volume en gallons impériaux
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.Gallon"/>.
            </summary>
            <param name="value">La valeur de ce volume en gallons impériaux</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_Implicit(System.Double)~Developpez.Dotnet.Measures.Gallon">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.Gallon"/>.
            </summary>
            <param name="value">Valeur en gallons impériaux.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_Explicit(Developpez.Dotnet.Measures.Gallon)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.Gallon"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="volume">Volume</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_Equality(Developpez.Dotnet.Measures.Gallon,Developpez.Dotnet.Measures.Gallon)">
            <summary>
            Teste l'égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont égaux, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_Inequality(Developpez.Dotnet.Measures.Gallon,Developpez.Dotnet.Measures.Gallon)">
            <summary>
            Teste la non-égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont différents, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_LessThan(Developpez.Dotnet.Measures.Gallon,Developpez.Dotnet.Measures.Gallon)">
            <summary>
            Teste si le premier volume est inférieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_GreaterThan(Developpez.Dotnet.Measures.Gallon,Developpez.Dotnet.Measures.Gallon)">
            <summary>
            Teste si le premier volume est supérieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_LessThanOrEqual(Developpez.Dotnet.Measures.Gallon,Developpez.Dotnet.Measures.Gallon)">
            <summary>
            Teste si le premier volume est inférieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.Gallon,Developpez.Dotnet.Measures.Gallon)">
            <summary>
            Teste si le premier volume est supérieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_Addition(Developpez.Dotnet.Measures.Gallon,Developpez.Dotnet.Measures.Gallon)">
            <summary>
            Additionne deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La somme des deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_Subtraction(Developpez.Dotnet.Measures.Gallon,Developpez.Dotnet.Measures.Gallon)">
            <summary>
            Soustrait le deuxième volume du premier
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La différence entre les deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_Multiply(Developpez.Dotnet.Measures.Gallon,System.Double)">
            <summary>
            Multiplie un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.op_Division(Developpez.Dotnet.Measures.Gallon,System.Double)">
            <summary>
            Divise un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.CompareTo(Developpez.Dotnet.Measures.Gallon)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>inférieur à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>supérieur à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.TryParse(System.String,Developpez.Dotnet.Measures.Gallon@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="volume">volume.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.Equals(Developpez.Dotnet.Measures.Gallon)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.Gallon.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Gallon.Value">
            <summary>
            Obtient la valeur de ce volume.
            </summary>
            <value>
            La valeur de ce volume en gallons impériaux
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.Gallon.Developpez#Dotnet#Measures#IVolume#ValueInCubeMeters">
            <summary>
            Obtient la valeur de cette volume en mètres cubes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.USGallon">
            <summary>
            Représente un volume en gallons US
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.USGallon"/>.
            </summary>
            <param name="value">La valeur de ce volume en gallons US</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_Implicit(System.Double)~Developpez.Dotnet.Measures.USGallon">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.USGallon"/>.
            </summary>
            <param name="value">Valeur en gallons US.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_Explicit(Developpez.Dotnet.Measures.USGallon)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.USGallon"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="volume">Volume</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_Equality(Developpez.Dotnet.Measures.USGallon,Developpez.Dotnet.Measures.USGallon)">
            <summary>
            Teste l'égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont égaux, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_Inequality(Developpez.Dotnet.Measures.USGallon,Developpez.Dotnet.Measures.USGallon)">
            <summary>
            Teste la non-égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont différents, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_LessThan(Developpez.Dotnet.Measures.USGallon,Developpez.Dotnet.Measures.USGallon)">
            <summary>
            Teste si le premier volume est inférieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_GreaterThan(Developpez.Dotnet.Measures.USGallon,Developpez.Dotnet.Measures.USGallon)">
            <summary>
            Teste si le premier volume est supérieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_LessThanOrEqual(Developpez.Dotnet.Measures.USGallon,Developpez.Dotnet.Measures.USGallon)">
            <summary>
            Teste si le premier volume est inférieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.USGallon,Developpez.Dotnet.Measures.USGallon)">
            <summary>
            Teste si le premier volume est supérieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_Addition(Developpez.Dotnet.Measures.USGallon,Developpez.Dotnet.Measures.USGallon)">
            <summary>
            Additionne deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La somme des deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_Subtraction(Developpez.Dotnet.Measures.USGallon,Developpez.Dotnet.Measures.USGallon)">
            <summary>
            Soustrait le deuxième volume du premier
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La différence entre les deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_Multiply(Developpez.Dotnet.Measures.USGallon,System.Double)">
            <summary>
            Multiplie un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.op_Division(Developpez.Dotnet.Measures.USGallon,System.Double)">
            <summary>
            Divise un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.CompareTo(Developpez.Dotnet.Measures.USGallon)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>inférieur à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>supérieur à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.TryParse(System.String,Developpez.Dotnet.Measures.USGallon@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="volume">volume.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.Equals(Developpez.Dotnet.Measures.USGallon)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USGallon.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.USGallon.Value">
            <summary>
            Obtient la valeur de ce volume.
            </summary>
            <value>
            La valeur de ce volume en gallons US
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.USGallon.Developpez#Dotnet#Measures#IVolume#ValueInCubeMeters">
            <summary>
            Obtient la valeur de cette volume en mètres cubes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.FluidOunce">
            <summary>
            Représente un volume en onces liquides impériales
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.FluidOunce"/>.
            </summary>
            <param name="value">La valeur de ce volume en onces liquides impériales</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_Implicit(System.Double)~Developpez.Dotnet.Measures.FluidOunce">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.FluidOunce"/>.
            </summary>
            <param name="value">Valeur en onces liquides impériales.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_Explicit(Developpez.Dotnet.Measures.FluidOunce)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.FluidOunce"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="volume">Volume</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_Equality(Developpez.Dotnet.Measures.FluidOunce,Developpez.Dotnet.Measures.FluidOunce)">
            <summary>
            Teste l'égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont égaux, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_Inequality(Developpez.Dotnet.Measures.FluidOunce,Developpez.Dotnet.Measures.FluidOunce)">
            <summary>
            Teste la non-égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont différents, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_LessThan(Developpez.Dotnet.Measures.FluidOunce,Developpez.Dotnet.Measures.FluidOunce)">
            <summary>
            Teste si le premier volume est inférieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_GreaterThan(Developpez.Dotnet.Measures.FluidOunce,Developpez.Dotnet.Measures.FluidOunce)">
            <summary>
            Teste si le premier volume est supérieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_LessThanOrEqual(Developpez.Dotnet.Measures.FluidOunce,Developpez.Dotnet.Measures.FluidOunce)">
            <summary>
            Teste si le premier volume est inférieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.FluidOunce,Developpez.Dotnet.Measures.FluidOunce)">
            <summary>
            Teste si le premier volume est supérieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_Addition(Developpez.Dotnet.Measures.FluidOunce,Developpez.Dotnet.Measures.FluidOunce)">
            <summary>
            Additionne deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La somme des deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_Subtraction(Developpez.Dotnet.Measures.FluidOunce,Developpez.Dotnet.Measures.FluidOunce)">
            <summary>
            Soustrait le deuxième volume du premier
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La différence entre les deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_Multiply(Developpez.Dotnet.Measures.FluidOunce,System.Double)">
            <summary>
            Multiplie un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.op_Division(Developpez.Dotnet.Measures.FluidOunce,System.Double)">
            <summary>
            Divise un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.CompareTo(Developpez.Dotnet.Measures.FluidOunce)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>inférieur à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>supérieur à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.TryParse(System.String,Developpez.Dotnet.Measures.FluidOunce@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="volume">volume.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.Equals(Developpez.Dotnet.Measures.FluidOunce)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.FluidOunce.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.FluidOunce.Value">
            <summary>
            Obtient la valeur de ce volume.
            </summary>
            <value>
            La valeur de ce volume en onces liquides impériales
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.FluidOunce.Developpez#Dotnet#Measures#IVolume#ValueInCubeMeters">
            <summary>
            Obtient la valeur de cette volume en mètres cubes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.USFluidOunce">
            <summary>
            Représente un volume en onces liquides US
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.#ctor(System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Measures.USFluidOunce"/>.
            </summary>
            <param name="value">La valeur de ce volume en onces liquides US</param>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_Implicit(System.Double)~Developpez.Dotnet.Measures.USFluidOunce">
            <summary>
            Effectue une conversion implicite de <see cref="T:System.Double"/> vers <see cref="T:Developpez.Dotnet.Measures.USFluidOunce"/>.
            </summary>
            <param name="value">Valeur en onces liquides US.</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_Explicit(Developpez.Dotnet.Measures.USFluidOunce)~System.Double">
            <summary>
            Effectue une conversion explicite de <see cref="T:Developpez.Dotnet.Measures.USFluidOunce"/> vers <see cref="T:System.Double"/>.
            </summary>
            <param name="volume">Volume</param>
            <returns>
            Résultat de la conversion.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_Equality(Developpez.Dotnet.Measures.USFluidOunce,Developpez.Dotnet.Measures.USFluidOunce)">
            <summary>
            Teste l'égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont égaux, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_Inequality(Developpez.Dotnet.Measures.USFluidOunce,Developpez.Dotnet.Measures.USFluidOunce)">
            <summary>
            Teste la non-égalité de deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si les deux volumes sont différents, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_LessThan(Developpez.Dotnet.Measures.USFluidOunce,Developpez.Dotnet.Measures.USFluidOunce)">
            <summary>
            Teste si le premier volume est inférieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_GreaterThan(Developpez.Dotnet.Measures.USFluidOunce,Developpez.Dotnet.Measures.USFluidOunce)">
            <summary>
            Teste si le premier volume est supérieur au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_LessThanOrEqual(Developpez.Dotnet.Measures.USFluidOunce,Developpez.Dotnet.Measures.USFluidOunce)">
            <summary>
            Teste si le premier volume est inférieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est inférieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_GreaterThanOrEqual(Developpez.Dotnet.Measures.USFluidOunce,Developpez.Dotnet.Measures.USFluidOunce)">
            <summary>
            Teste si le premier volume est supérieur ou égal au deuxième.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            true si le premier volume est supérieur ou égal au deuxième, false sinon.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_Addition(Developpez.Dotnet.Measures.USFluidOunce,Developpez.Dotnet.Measures.USFluidOunce)">
            <summary>
            Additionne deux volumes.
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La somme des deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_Subtraction(Developpez.Dotnet.Measures.USFluidOunce,Developpez.Dotnet.Measures.USFluidOunce)">
            <summary>
            Soustrait le deuxième volume du premier
            </summary>
            <param name="a">Premier volume</param>
            <param name="b">Deuxième volume</param>
            <returns>
            La différence entre les deux volumes.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_Multiply(Developpez.Dotnet.Measures.USFluidOunce,System.Double)">
            <summary>
            Multiplie un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="multiplier">Multiplicateur</param>
            <returns>
            Le résultat de la multiplication.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.op_Division(Developpez.Dotnet.Measures.USFluidOunce,System.Double)">
            <summary>
            Divise un volume par un nombre.
            </summary>
            <param name="volume">volume</param>
            <param name="divisor">Diviseur</param>
            <returns>
            Le résultat de la division.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.CompareTo(Developpez.Dotnet.Measures.USFluidOunce)">
            <summary>
            Compare cette instance avec un objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>inférieur à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>supérieur à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.ToString(System.String)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.ToString(System.String,System.IFormatProvider)">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <param name="format">Le format à utiliser</param>
            <param name="formatProvider">Le fournisseur à utiliser pour formater la valeur</param>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.TryParse(System.String,Developpez.Dotnet.Measures.USFluidOunce@)">
            <summary>
            Essaye de parser le texte.
            </summary>
            <param name="text">Texte à parser.</param>
            <param name="volume">volume.</param>
            <returns>true, si le parsing est réussi; sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.Equals(Developpez.Dotnet.Measures.USFluidOunce)">
            <summary>
            Indique si l'instance courante de l'objet est égal à un autre objet du même type.
            </summary>
            <param name="other">Objet à comparer avec cette instance.</param>
            <returns>
            true si l'instance courante est égale au paramètre <paramref name="other"/> ; sinon, false.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.Equals(System.Object)">
            <summary>
            Determine si l'<see cref="T:System.Object"/> spécifié est égal à l'instance courante.
            </summary>
            <param name="obj">L' <see cref="T:System.Object"/> à comparer avec l'instance courante.</param>
            <returns>
              <c>true</c> si l'<see cref="T:System.Object"/> spécifié est égal à cette instance ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.USFluidOunce.GetHashCode">
            <summary>
            Retourne le hash code de cette instance
            </summary>
            <returns>
            Code de hashage de l'instance actuelle. 
            </returns>
        </member>
        <member name="P:Developpez.Dotnet.Measures.USFluidOunce.Value">
            <summary>
            Obtient la valeur de ce volume.
            </summary>
            <value>
            La valeur de ce volume en onces liquides US
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Measures.USFluidOunce.Developpez#Dotnet#Measures#IVolume#ValueInCubeMeters">
            <summary>
            Obtient la valeur de cette volume en mètres cubes
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Measures.VolumeExtensions">
            <summary>
            Fournit des méthodes d'extension pour les volumes
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Measures.VolumeExtensions.ToCubeMeter``1(``0)">
            <summary>
            Convertit un volume en mètres cubes
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="volume">volume à convertir</param>
            <returns>Valeur en mètres cubes</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.VolumeExtensions.ToLiter``1(``0)">
            <summary>
            Convertit un volume en litres
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="volume">volume à convertir</param>
            <returns>Valeur en litres</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.VolumeExtensions.ToPint``1(``0)">
            <summary>
            Convertit un volume en pintes
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="volume">volume à convertir</param>
            <returns>Valeur en pintes</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.VolumeExtensions.ToGallon``1(``0)">
            <summary>
            Convertit un volume en gallons impériaux
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="volume">volume à convertir</param>
            <returns>Valeur en gallons impériaux</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.VolumeExtensions.ToUSGallon``1(``0)">
            <summary>
            Convertit un volume en gallons US
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="volume">volume à convertir</param>
            <returns>Valeur en gallons US</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.VolumeExtensions.ToFluidOunce``1(``0)">
            <summary>
            Convertit un volume en onces liquides impériales
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="volume">volume à convertir</param>
            <returns>Valeur en onces liquides impériales</returns>
        </member>
        <member name="M:Developpez.Dotnet.Measures.VolumeExtensions.ToUSFluidOunce``1(``0)">
            <summary>
            Convertit un volume en onces liquides US
            </summary>
            <typeparam name="T">Le type de l'unité d'origine</typeparam>
            <param name="volume">volume à convertir</param>
            <returns>Valeur en onces liquides US</returns>
        </member>
        <member name="T:Developpez.Dotnet.NumberConverter">
            <summary>
            Fournit des méthodes de conversion d'un nombre en toutes lettres.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.GetSpeller(System.Globalization.CultureInfo)">
            <summary>
            Renvoie un convertisseur de nombre en toutes lettres pour la culture spécifiée
            </summary>
            <param name="culture">Culture pour laquelle obtenir un convertisseur</param>
            <returns>Un convertisseur de nombre en toutes lettres pour la culture spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.GetSpeller(System.String)">
            <summary>
            Renvoie un convertisseur de nombre en toutes lettres pour la culture spécifiée
            </summary>
            <param name="culture">Culture pour laquelle obtenir un convertisseur</param>
            <returns>Un convertisseur de nombre en toutes lettres pour la culture spécifiée</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.LoadSpellers(System.Reflection.Assembly)">
            <summary>
            Recherche tous les convertisseurs de nombre en lettres
            dans l'assembly spécifié. Utilisez cette méthode pour
            détecter un convertisseur personnalisé.
            </summary>
            <param name="assembly">L'assembly dans lequel les convertisseurs sont définis</param>
            <remarks>
            Les convertisseurs prédéfinis sont chargés automatiquement,
            il n'est donc pas nécessaire d'appeler LoadSpellers pour
            les utiliser.
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Int64)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Int64,Developpez.Dotnet.Language.Grammar.Gender)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Int64,Developpez.Dotnet.Language.Grammar.Gender,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.UInt64)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.UInt64,Developpez.Dotnet.Language.Grammar.Gender)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.UInt64,Developpez.Dotnet.Language.Grammar.Gender,Developpez.Dotnet.Language.Grammar.NumeralAdjective)">
            <summary>
            Convertit un nombre entier en toutes lettres.
            </summary>
            <param name="value">Nombre entier.</param>
            <param name="gender">Genre du nombre entier.</param>
            <param name="numeralAdjective">Nature de l'adjectif numéral.</param>
            <returns>Le nombre en toutes lettres.</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Double,System.Int32)">
            <summary>
            Convertit un nombre en virgule flottante en toutes lettres, avec le nombre de chiffres spécifié après la virgule.
            </summary>
            <param name="value">Nombre en virgule flottante</param>
            <param name="decimalPlaces">Nombre de chiffres après la virgule</param>
            <returns>Le nombre en toutes lettres</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.Spell(System.Decimal,System.Int32)">
            <summary>
            Convertit un nombre décimal en toutes lettres, avec le nombre de chiffres spécifié après la virgule.
            </summary>
            <param name="value">Nombre décimal</param>
            <param name="decimalPlaces">Nombre de chiffres après la virgule</param>
            <returns>Le nombre en toutes lettres</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.SpellAmount(System.Double,Developpez.Dotnet.Language.CurrencyDescriptor)">
            <summary>
            Convertit un montant en toutes lettres, avec la devise spécifiée.
            </summary>
            <param name="value">Montant en virgule flottante</param>
            <param name="currency">Devise utilisée</param>
            <returns>Le montant en toutes lettres</returns>
        </member>
        <member name="M:Developpez.Dotnet.NumberConverter.SpellAmount(System.Decimal,Developpez.Dotnet.Language.CurrencyDescriptor)">
            <summary>
            Convertit un montant en toutes lettres, avec la devise spécifiée.
            </summary>
            <param name="value">Montant décimal</param>
            <param name="currency">Devise utilisée</param>
            <returns>Le montant en toutes lettres</returns>
        </member>
        <member name="T:Developpez.Dotnet.Properties.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.AllStreamsMustBeWritable">
            <summary>
              Looks up a localized string similar to All streams must be writable..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.ArrayCapacityInsufficient">
            <summary>
              Looks up a localized string similar to Destination array was not long enough. Check destIndex and length, and the array&apos;s lower bounds..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.BadInputStringFormat">
            <summary>
              Looks up a localized string similar to Input string was not in a correct format..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.CollectionIsReadOnly">
            <summary>
              Looks up a localized string similar to Collection is read-only..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.DictionaryIsReadOnly">
            <summary>
              Looks up a localized string similar to Dictionary is read-only..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.ExpressionMustBeMethodCall">
            <summary>
              Looks up a localized string similar to Expression must be a method call..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.ExpressionMustBePropertyAccess">
            <summary>
              Looks up a localized string similar to Expression must be a property access..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.IniFileNameNotSet">
            <summary>
              Looks up a localized string similar to File name is not set..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.InputSequenceHasMoreThanOneElement">
            <summary>
              Looks up a localized string similar to Sequence contains more than one element..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.InvalidCastFromNullToValueType">
            <summary>
              Looks up a localized string similar to Can&apos;t cast null to a value type..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.InvalidCastFromTo">
            <summary>
              Looks up a localized string similar to Invalid cast from &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.InvalidRIBCharacter">
            <summary>
              Looks up a localized string similar to The character to convert must be a letter between A and Z..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.KnownCurrencies_NoProviderAvailable">
            <summary>
              Looks up a localized string similar to No currency provider available for culture &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.MajorMinorPatchIdentifiersAreMandatory">
            <summary>
              Looks up a localized string similar to Major, minor and patch identifiers are mandatory..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.MaxLengthCantBeLessThan">
            <summary>
              Looks up a localized string similar to maxLength can&apos;t be less than {0}..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.MaxLengthCantBeLessThanLengthOfEllipsisString">
            <summary>
              Looks up a localized string similar to maxLength can&apos;t be less than the length of ellipsisString..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.MaxThreadCountOutOfRange">
            <summary>
              Looks up a localized string similar to Maximum number of thread must be greater than or equal to 1..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.NegativeLifeTime">
            <summary>
              Looks up a localized string similar to Lifetime must be strictly positive..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.NoMatchFound">
            <summary>
              Looks up a localized string similar to No matching case found..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.NoMatchingItemInList">
            <summary>
              Looks up a localized string similar to List contains to matching item..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.NumberConverter_NoSpellerAvailable">
            <summary>
              Looks up a localized string similar to No speller available for culture &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.NumberMustBePositiveOrZero">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.NumberMustBeStrictlyPositive">
            <summary>
              Looks up a localized string similar to {0} must be greater than zero..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.OperationTimedOut">
            <summary>
              Looks up a localized string similar to The operation has timed out..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.PreReleasePartMustBeBeforeBuildPart">
            <summary>
              Looks up a localized string similar to Pre-release part must be before build part..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.RomanMaxValue">
            <summary>
              Looks up a localized string similar to A roman numeral can&apos;t be greater than {0}..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.RomanMinValue">
            <summary>
              Looks up a localized string similar to A roman numeral can&apos;t be less than {0}..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.SequenceContainsNoElements">
            <summary>
              Looks up a localized string similar to Sequence contains no elements..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.StringNotANumber">
            <summary>
              Looks up a localized string similar to String must represent a number..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.StringNullOrEmpty">
            <summary>
              Looks up a localized string similar to String can&apos;t be empty..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.StringWrongLength">
            <summary>
              Looks up a localized string similar to String must be {0} characters long..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.SubstringCountOutOfRange">
            <summary>
              Looks up a localized string similar to The number of characters must be greater than or equal to zero, and less than or equal to the length of the string..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.TemplateKeyNotFound">
            <summary>
              Looks up a localized string similar to No value found for key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.TimeoutOutOfRange">
            <summary>
              Looks up a localized string similar to Timeout must be greater than or equal to 1 millisecond..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.TypeDoesntImplementEvent">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; doesn&apos;t implement event &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.TypeIsNotEnum">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not an enumeration..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.TypeNotDecoratedWithFlags">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; doesn&apos;t have the System.FlagsAttribute attribute..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.UnknownConversionType">
            <summary>
              Looks up a localized string similar to Unknown conversion type..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.WrapperClosed">
            <summary>
              Looks up a localized string similar to The wrapper has been closed..
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.ExceptionMessages.ZeroHasNoOrdinal">
            <summary>
              Looks up a localized string similar to Zero has no ordinal spelling..
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.Resources.Byte">
            <summary>
              Looks up a localized string similar to byte.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.Resources.Bytes">
            <summary>
              Looks up a localized string similar to bytes.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Properties.Resources.ByteSymbol">
            <summary>
              Looks up a localized string similar to B.
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.RandomExtensions">
            <summary>
            Fournit des méthodes d'extension pour le type Random
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.RandomExtensions.Pick``1(System.Random,System.Collections.Generic.ICollection{``0})">
            <summary>
            Renvoie un élément choisi aléatoirement dans la collection spécifiée
            </summary>
            <typeparam name="T">Type des éléments de la collection</typeparam>
            <param name="random">Object Random à utiliser</param>
            <param name="items">Collection dans laquelle choisir un élément</param>
            <returns>Un élément choisi aléatoirement dans la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.RandomExtensions.Pick``1(System.Random,``0,``0,``0[])">
            <summary>
            Renvoie un objet choisi aléatoirement parmi les paramètres spécifiés
            </summary>
            <typeparam name="T">Type d'objet à choisir</typeparam>
            <param name="random">Objet Random à utiliser</param>
            <param name="first">Premier paramètre</param>
            <param name="second">Second paramètre</param>
            <param name="others">Autres paramètres</param>
            <returns>Un objet choisi aléatoirement parmi les paramètres spécifiés</returns>
        </member>
        <member name="T:Developpez.Dotnet.Roman">
            <summary>
            Un nombre en chiffres romains.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._Symbols">
            <summary>
            "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._Values">
            <summary>
            1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._StandardPattern">
            <summary>
            Expression régulière de validation d'un nombre romain.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._NullInnerValue">
            <summary>
            Représente un nombre romain nul.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._MinInnerValue">
            <summary>
            Représente le nombre romain le plus petit.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._MaxInnerValue">
            <summary>
            Représente le nombre romain le plus grand.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman._InnerValue">
            <summary>
            La valeur interne du nombre romain.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman.Null">
            <summary>
            Représente la valeur nulle 
            (cette valeur n'a aucun équivalent
            en chiffres romains).
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman.MinValue">
            <summary>
            Représente le nombre romain le plus petit.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.Roman.MaxValue">
            <summary>
            Représente le nombre romain le plus grand.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Roman.#ctor(System.Int32)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Roman"/>
            à partir d'un nombre entier.
            </summary>
            <param name="value">Entier.</param>
        </member>
        <member name="M:Developpez.Dotnet.Roman.#ctor(System.String)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Developpez.Dotnet.Roman"/>
            à partir d'une chaîne de caractères.
            </summary>
            <param name="value">Chaîne de caractères.</param>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CheckValue(System.Int32)">
            <summary>
            Vérifie si la valeur donnée respecte les spécifications d'un nombre romain.
            </summary>
            <param name="value">Valeur.</param>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CheckValue(System.Int32,System.Boolean)">
            <summary>
            Vérifie si la valeur donnée respecte les spécifications d'un nombre romain.
            </summary>
            <param name="value">Valeur.</param>
            <param name="raiseException">Indique si la méthode doit lever une exception ou pas.</param>
            <returns>Vrai si la valeur donnée respecte les spécifications d'un nombre romain, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CheckValue(System.String)">
            <summary>
            Vérifie si la valeur donnée respecte les spécifications d'un nombre romain.
            </summary>
            <param name="value">Valeur.</param>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CheckValue(System.String,System.Boolean)">
            <summary>
            Vérifie si la valeur donnée respecte les spécifications d'un nombre romain.
            </summary>
            <param name="value">Valeur.</param>
            <param name="raiseException">Indique si la méthode doit lever une exception ou pas.</param>
            <returns>Vrai si la valeur donnée respecte les spécifications d'un nombre romain, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.ToInt(System.String)">
            <summary>
            Retourne un entier à partir d'une chaîne de caractères donnée représentant un nombre romain.
            </summary>
            <param name="value">Valeur.</param>
            <returns>L'entier correspondant à la chaîne de caractères.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.ToString(System.Int32)">
            <summary>
            Retourne une chaîne de caractères représentant un nombre romain à partir d'un entier donné.
            </summary>
            <param name="value">Valeur.</param>
            <returns>La chaîne de caractères représentant un nombre romain.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.Parse(System.String)">
            <summary>
            Convertit la chaîne de caractères représentant un nombre romain en nombre romain.
            </summary>
            <param name="s">Chaîne de caractères représentant un nombre romain.</param>
            <returns>Le nombre romain correspondant à la chaîne de caractères.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.Parse(System.Int32)">
            <summary>
            Convertit l'entier représentant un nombre romain en nombre romain.
            </summary>
            <param name="i">Entier représentant un nombre romain.</param>
            <returns>Le nombre romain correspondant à l'entier.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.TryParse(System.String,Developpez.Dotnet.Roman@)">
            <summary>
            Indique si la chaîne de caractères représente un nombre romain.
            Une valeur de retour renvoie ce nombre romain.
            </summary>
            <param name="s">Chaîne de caractères représentant un nombre romain.</param>
            <param name="result">Le nombre romain correspondant à la chaîne de caractères.</param>
            <returns>Vrai si la chaîne de caractères représente un nombre romain, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.TryParse(System.Int32,Developpez.Dotnet.Roman@)">
            <summary>
            Indique si l'entier représente un nombre romain.
            Une valeur de retour renvoie ce nombre romain.
            </summary>
            <param name="i">Entier représentant un nombre romain.</param>
            <param name="result">Le nombre romain correspondant à l'entier.</param>
            <returns>Vrai si l'entier représente un nombre romain, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.ToInt">
            <summary>
            Retourne l'entier correspondant à l'instance de la structure <see cref="T:Developpez.Dotnet.Roman"/>.
            </summary>
            <returns>L'entier correspondant à l'instance de la structure <see cref="T:Developpez.Dotnet.Roman"/>.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.GetHashCode">
            <summary>
            Retourne le code de hachage de l'instance actuelle.
            </summary>
            <returns>le code de hachage de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.Equals(System.Object)">
            <summary>
            Détermine si l'objet spécifié a la même valeur que l'instance actuelle.
            </summary>
            <param name="obj">objet à comparer</param>
            <returns>true si l'objet spécifié est égal à l'instance actuelle, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.ToString">
            <summary>
            Retourne une représentation textuelle de l'instance actuelle
            </summary>
            <returns>une représentation textuelle de l'instance actuelle</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CompareTo(System.Object)">
            <summary>
            Compare cette instance à l'objet spécifié et retourne une indication de leurs valeurs relatives
            </summary>
            <param name="value">objet à comparer</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et value
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à value.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à value.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à value.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.GetTypeCode">
            <summary>
            Retourne le TypeCode  du type Roman. 
            </summary>
            <returns>le TypeCode  du type Roman</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>true si la valeur de ce Roman est différente de 0, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Byte</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Char</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en DateTime</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Decimal</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Double</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Int16</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Int32</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Int64</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en SByte</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en Single</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToString(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en String</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>
            </summary>
            <param name="conversionType">Type dans lequel convertir cette valeur Roman.</param>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie vers le type spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en UInt16</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en UInt32</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Pour obtenir une description de ce membre, consultez <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>
            </summary>
            <param name="provider">Implémentation de l'interface IFormatProvider  qui fournit des informations de mise en forme propres à la culture</param>
            <returns>Valeur de l'instance actuelle, convertie en UInt64</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.CompareTo(Developpez.Dotnet.Roman)">
            <summary>
            Compare cette instance au Roman spécifié et retourne une indication de leurs valeurs relatives
            </summary>
            <param name="other">objet à comparer</param>
            <returns>Nombre signé indiquant les valeurs relatives de cette instance et other
            <list type="table">
            <listheader>
            <term>Valeur de retour</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Inférieure à zéro </term>
            <description>Cette instance est inférieure à other.</description>
            </item>
            <item>
            <term>Zéro</term>
            <description>Cette instance est égale à other.</description>
            </item>
            <item>
            <term>Supérieure à zéro</term>
            <description>Cette instance est supérieure à other.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.Equals(Developpez.Dotnet.Roman)">
            <summary>
            Retourne une valeur indiquant si cette instance équivaut à une valeur Roman spécifiée.
            </summary>
            <param name="other">Valeur Int32  à comparer à cette instance.</param>
            <returns>true si other possède la même valeur que cette instance ; sinon, false. </returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Addition(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Additionne deux nombres romains.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Un nombre romain dont la valeur est la somme de r1 et r2.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Increment(Developpez.Dotnet.Roman)">
            <summary>
            Incrémente un nombre romain de un.
            </summary>
            <param name="r">Nombre romain.</param>
            <returns>Le nombre romain incrémenté de un.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Subtraction(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Soustrait un nombre romain d'un autre nombre romain
            pour donner un troisième nombre romain.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Un nombre romain dont la valeur est la différence de r1 par rapport à r2.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Decrement(Developpez.Dotnet.Roman)">
            <summary>
            Décrémente un nombre romain de un.
            </summary>
            <param name="r">Nombre romain.</param>
            <returns>Le nombre romain décrémenté de un.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Modulus(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Retourne le reste d'une division d'un nombre romain par un autre nombre romain.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Un nombre romain dont la valeur est le modulo de r1 par rapport à r2.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Multiply(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Multiplie deux nombres romains
            pour donner un troisième nombre romain.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Un nombre romain dont la valeur est le produit de r1 et r2.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Division(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Divise un nombre romain par un autre nombre romain
            pour donner un troisième nombre romain (partie entière du quotient).
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Un nombre romain dont la valeur est la partie entière du quotient de r1 par rapport à r2.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Equality(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si les deux nombre romains donnés sont égaux.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si les deux nombre romains donnés sont égaux, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_GreaterThan(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si r1 est strictement supérieur à r2.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si r1 est strictement supérieur à r2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_GreaterThanOrEqual(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si r1 est supérieur ou égal à r2.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si r1 est supérieur ou égal à r2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Inequality(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si r1 est différent de r2.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si r1 est différent de r2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_LessThan(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si r1 est strictement inférieur à r2.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si r1 est strictement inférieur à r2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_LessThanOrEqual(Developpez.Dotnet.Roman,Developpez.Dotnet.Roman)">
            <summary>
            Indique si r1 est inférieur ou égal à r2.
            </summary>
            <param name="r1">Nombre romain.</param>
            <param name="r2">Nombre romain.</param>
            <returns>Vrai si r1 est inférieur ou égal à r2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(Developpez.Dotnet.Roman)~System.Int32">
            <summary>
            Convertit un nombre romain en entier.
            </summary>
            <param name="r">Nombre romain.</param>
            <returns>L'entier correspondant au nombre romain.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(System.Int32)~Developpez.Dotnet.Roman">
            <summary>
            Convertit un entier en nombre romain.
            </summary>
            <param name="i">Entier.</param>
            <returns>Le nombre romain correspondant à l'entier.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(Developpez.Dotnet.Roman)~System.Int16">
            <summary>
            Convertit un nombre romain en entier 16 bits.
            </summary>
            <param name="r">Nombre romain.</param>
            <returns>L'entier 16 bits correspondant au nombre romain.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(System.Int16)~Developpez.Dotnet.Roman">
            <summary>
            Convertit un entier en nombre romain.
            </summary>
            <param name="i">Entier 16 bits.</param>
            <returns>Le nombre romain correspondant à l'entier 16 bits.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(Developpez.Dotnet.Roman)~System.Int64">
            <summary>
            Convertit un nombre romain en entier 64 bits.
            </summary>
            <param name="r">Nombre romain.</param>
            <returns>L'entier 64 bits correspondant au nombre romain.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Roman.op_Explicit(System.Int64)~Developpez.Dotnet.Roman">
            <summary>
            Convertit un entier 64 bits en nombre romain.
            </summary>
            <param name="i">Entier 64 bits.</param>
            <returns>Le nombre romain correspondant à l'entier 64 bits.</returns>
        </member>
        <member name="T:Developpez.Dotnet.ComponentModel.Singleton`1">
            <summary>
            Implémente un singleton avec intialisation tardive pour le type spécifié.
            </summary>
            <typeparam name="T">Type de l'objet pour lequel le singleton est implémenté</typeparam>
            <remarks>Cette implémentation est "lazy" (l'instance du singleton n'est créée que lors
            de sa première utilisation) et thread-safe. L'implémentation est inspirée de l'article
            <a href="http://csharpindepth.com/Articles/General/Singleton.aspx">Implementing the
            Singleton Pattern in C#</a> de Jon Skeet.</remarks>
        </member>
        <member name="P:Developpez.Dotnet.ComponentModel.Singleton`1.Instance">
            <summary>
            Retourne l'instance unique du type T
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.Siren">
            <summary>
            Vérification d'un numéro Siren.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Siren.Check(System.String)">
            <summary>
            Vérifie la validité d'un numéro SIREN.
            (Attention : cette méthode valide le numéro SIREN
            selon l'algorithme de Luhn, mais ne vérifie pas
            que le numéro soit attribué, ni à quelle entreprise).
            </summary>
            <param name="sirenToCheck">Numéro SIREN.</param>
            <returns>Vrai si le SIREN est valide, faux sinon.</returns>
            <remarks>Système d’Identification du Répertoire des ENtreprises.
            http://fr.wikipedia.org/wiki/SIREN
            </remarks>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.Siret">
            <summary>
            Vérification d'un numéro Siret.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Siret.Check(System.String)">
            <summary>
            Vérifie la validité d'un numéro SIRET (et de son numéro SIREN associé).
            (Attention : cette méthode valide le numéro SIRET
            selon l'algorithme de Luhn, mais ne vérifie pas
            que le numéro soit attribué ni à quel établissement).
            </summary>
            <param name="siretToCheck">Numéro SIRET.</param>
            <returns>Vrai si le SIRET, et son SIREN associé sont valides, faux sinon.</returns>
            <remarks>Système d’Identification du Répertoire des ETablissements.
            http://fr.wikipedia.org/wiki/SIRET
            </remarks>
        </member>
        <member name="T:Developpez.Dotnet.Security.DataProtectionProvider">
            <summary>
            Fournit des services de protection de données
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Security.DataProtectionProvider.#ctor">
            <summary>
            Crée une instance de DataProtectionProvider avec les paramètres par
            défaut.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Security.DataProtectionProvider.#ctor(System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Crée une instance de DataProtectionProvider avec la portée spécifiée.
            </summary>
            <param name="scope">Portée de la protection</param>
        </member>
        <member name="M:Developpez.Dotnet.Security.DataProtectionProvider.#ctor(System.Security.Cryptography.DataProtectionScope,System.Text.Encoding)">
            <summary>
            Crée une instance de DataProtectionProvider avec la portée et
            l'encodage spécifiés.
            </summary>
            <param name="scope">Portée de la protection</param>
            <param name="encoding">Encodage utilisé pour le texte</param>
        </member>
        <member name="M:Developpez.Dotnet.Security.DataProtectionProvider.#ctor(System.Security.Cryptography.DataProtectionScope,System.Text.Encoding,System.Byte[])">
            <summary>
            Crée une instance de DataProtectionProvider avec la portée,
            l'encodage et l'entropie spécifiés.
            </summary>
            <param name="scope">Portée de la protection</param>
            <param name="encoding">Encodage utilisé pour le texte</param>
            <param name="entropy">Entropie (optionnelle) pour augmenter la
            complexité du chiffrage</param>
        </member>
        <member name="M:Developpez.Dotnet.Security.DataProtectionProvider.ProtectString(System.String)">
            <summary>
            Protège une chaine de caractères.
            </summary>
            <param name="s">La chaine à protéger</param>
            <returns>La chaine protégée, encodée en base64</returns>
        </member>
        <member name="M:Developpez.Dotnet.Security.DataProtectionProvider.UnprotectString(System.String)">
            <summary>
            Déchiffre une chaine de caractères protégée.
            </summary>
            <param name="protectedString">La chaine protégée à déchiffrer</param>
            <returns>La chaine déchiffrée</returns>
        </member>
        <member name="M:Developpez.Dotnet.Security.DataProtectionProvider.ProtectBytes(System.Byte[])">
            <summary>
            Protège des données binaires.
            </summary>
            <param name="bytes">Les données à protéger</param>
            <returns>Les données protégées</returns>
        </member>
        <member name="M:Developpez.Dotnet.Security.DataProtectionProvider.UnprotectBytes(System.Byte[])">
            <summary>
            Déchiffre des données binaires protégées.
            </summary>
            <param name="protectedBytes">Les données protégées à déchiffrer</param>
            <returns>Les données déchiffrées</returns>
        </member>
        <member name="P:Developpez.Dotnet.Security.DataProtectionProvider.Scope">
            <summary>
            Portée de la protection
            </summary>
            <value>
            Une valeur de DataProtectionScope indiquant si les données sont 
            protégées pour l'utilisateur courant ou pour la machine locale. La
            valeur par défaut est <c>CurrentUser</c>.
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Security.DataProtectionProvider.Encoding">
            <summary>
            Encodage utilisé pour le texte
            </summary>
            <value>
            L'encodage utilisé pour le texte. La valeur par défaut est
            <c>Encoding.UTF8.</c>
            </value>
        </member>
        <member name="P:Developpez.Dotnet.Security.DataProtectionProvider.Entropy">
            <summary>
            Entropie du chiffrage
            </summary>
            <value>
            Un tableau d'octets qui sera combiné à la clé principale pour
            augmenter la complexité du chiffrage. La valeur par défaut est null.
            </value>
        </member>
        <member name="T:Developpez.Dotnet.StringExtensions">
            <summary>
            Fournit des méthodes d'extension pour les chaines de caractères
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indique si une chaine est nulle ou vide
            </summary>
            <param name="s">la chaine à tester</param>
            <returns>true si la chaine est nulle ou vide, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indique si une chaîne est nulle, vide ou composée uniquement d'espaces blancs.
            </summary>
            <param name="s">la chaine à tester</param>
            <returns>true si la chaine est nulle, vide ou composée uniquement d'espaces blancs, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formate la chaine avec les valeurs spécifiées, de la même façon que
            String.Format
            </summary>
            <param name="format">La chaine de format</param>
            <param name="args">les valeurs à utiliser</param>
            <returns>La chaine formatée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Reverse(System.String)">
            <summary>
            Inverse l'ordre des caractères d'une chaine
            </summary>
            <param name="s">La chaine à inverser</param>
            <returns>La chaine inversée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatène toutes les chaines de la liste en plaçant le séparateur
            spécifié entre chaque chaine
            </summary>
            <param name="list">La liste de chaines à concaténer</param>
            <param name="separator">Le séparateur à utiliser</param>
            <returns>La concaténation des chaines de la liste</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Renvoie une chaine construite à partir d'une séquence de caractères
            </summary>
            <param name="chars">La séquence de caractères à transformer en chaine</param>
            <returns>Une chaine constituée des caractères de la séquence</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.ReadLines(System.String)">
            <summary>
            Enumère les lignes d'une chaine de caractères
            </summary>
            <param name="s">La chaine à découper en lignes</param>
            <returns>La liste des lignes de cette chaine</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.GetMD5Digest(System.String)">
            <summary>
            Renvoie le hash MD5 de la chaîne sous forme d'une chaine hexadécimale, en
            se basant sur l'encodage UTF8
            </summary>
            <param name="s">la chaine dont on veut obtenir le hash MD5</param>
            <returns>le hash MD5 sous forme d'une chaine hexadécimale</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.GetMD5Digest(System.String,System.Text.Encoding)">
            <summary>
            Renvoie le hash MD5 de la chaîne sous forme d'une chaine hexadécimale, en
            se basant sur l'encodage spécifié
            </summary>
            <param name="s">la chaine dont on veut obtenir le hash MD5</param>
            <param name="encoding">L'encodage à utiliser</param>
            <returns>le hash MD5 sous forme d'une chaine hexadécimale</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.GetSHA1Digest(System.String)">
            <summary>
            Renvoie le hash SHA1 de la chaîne sous forme d'une chaîne hexadécimale, en se basant sur l'encodage UTF8
            </summary>
            <param name="s">la chaine dont on veut obtenir le hash SHA1</param>
            <returns>le hash SHA1 sous forme d'une chaine hexadécimale</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.GetSHA1Digest(System.String,System.Text.Encoding)">
            <summary>
            Renvoie le hash SHA1 de la chaîne sous forme d'une chaîne hexadécimale, en se basant sur l'encodage spécifié
            </summary>
            <param name="s">la chaine dont on veut obtenir le hash SHA1</param>
            <param name="encoding">L'encodage à utiliser</param>
            <returns>le hash SHA1 sous forme d'une chaine hexadécimale</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Enlève les caractères diacritiques (accents, cédilles...) d'une chaine en les remplaçant par le
            caractère de base.
            </summary>
            <param name="s">La chaine dont on veut enlever les diacritiques</param>
            <returns>La chaine sans les diacritiques</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Retourne une chaîne contenant un nombre spécifié de caractères en partant de la gauche d'une chaîne.
            </summary>
            <param name="s">chaine dont les caractères situés le plus à gauche sont retournés</param>
            <param name="count">Nombre de caractères à retourner</param>
            <returns>une chaîne contenant le nombre spécifié de caractères en partant de la gauche de s</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Retourne une chaîne contenant un nombre spécifié de caractères en partant de la droite d'une chaîne.
            </summary>
            <param name="s">chaine dont les caractères situés le plus à droite sont retournés</param>
            <param name="count">Nombre de caractères à retourner</param>
            <returns>une chaîne contenant le nombre spécifié de caractères en partant de la droite de s</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Retourne une chaine tronquée au nombre de caractères spécifié.
            </summary>
            <param name="s">chaine à tronquer</param>
            <param name="count">Nombre maximal de caractères à retourner</param>
            <returns>une chaîne tronquée au nombre de caractères spécifié</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Convertit la chaine spécifiée en initiales majuscules, selon les paramètres de la culture courante.
            </summary>
            <param name="s">La chaine à convertir en initiales majuscules</param>
            <returns>La chaine spécifiée convertie en initiales majuscules</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Convertit la chaine spécifiée en initiales majuscules, selon les paramètres de la culture spécifiée.
            </summary>
            <param name="s">La chaine à convertir en initiales majuscules</param>
            <param name="culture">La culture à utiliser</param>
            <returns>La chaine spécifiée convertie en initiales majuscules</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Capitalize(System.String)">
            <summary>
            Met en majuscule le premier caractère de la chaine spécifiée, selon les paramètres de la culture courante.
            </summary>
            <param name="s">La chaine dont le premier caractère est mis en majuscule</param>
            <returns>La chaine spécifiée avec le premier caractère en majuscule</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Capitalize(System.String,System.Globalization.CultureInfo)">
            <summary>
            Met en majuscule le premier caractère de la chaine spécifiée, selon les paramètres de la culture spécifiée.
            </summary>
            <param name="s">La chaine dont le premier caractère est mis en majuscule</param>
            <param name="culture">La culture à utiliser</param>
            <returns>La chaine spécifiée avec le premier caractère en majuscule</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.GetCharFrequencies(System.String)">
            <summary>
            Renvoie un dictionnaire contenant le nombre d'occurences de chaque caractère de la chaine
            </summary>
            <param name="s">La chaine pour laquelle on veut compter les caractères</param>
            <returns>Un dictionnaire contenant le nombre d'occurences de chaque caractère</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.CharAt(System.String,System.Int32)">
            <summary>
            Renvoie le caractère à la position spécifiée, ou le caractère nul (0)
            si la position spécifiée est la fin de la chaine.
            </summary>
            <param name="s">Chaine dont un caractère doit être renvoyé</param>
            <param name="index">Position du caractère à renvoyer</param>
            <returns>le caractère à la position spécifiée, ou le caractère nul (0)
            si la position spécifiée est la fin de la chaine.</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.MatchesWildcard(System.String,System.String)">
            <summary>
            Vérifie si une chaine correspond à un motif avec des caractères "joker" ('*' et '?')
            </summary>
            <param name="text">Chaine à vérifier</param>
            <param name="pattern">Motif avec lequel comparer la chaine</param>
            <returns>true si la chaine correspond au motif, false sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Ellipsis(System.String,System.Int32)">
            <summary>
            Tronque une chaine de caractères à la longueur spécifiée, en remplaçant les derniers
            caractères par des points de suspension le cas échéant.
            </summary>
            <param name="s">La chaine à tronquer</param>
            <param name="maxLength">La longueur maximale souhaitée</param>
            <returns>La chaine tronquée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Ellipsis(System.String,System.Int32,System.String)">
            <summary>
            Tronque une chaine de caractères à la longueur spécifiée, en remplaçant les derniers
            caractères par la chaine spécifiée le cas échéant.
            </summary>
            <param name="s">La chaine à tronquer</param>
            <param name="maxLength">La longueur maximale souhaitée</param>
            <param name="ellipsisString">La chaine à utiliser pour indiquer que la chaine est tronquée</param>
            <returns>La chaine tronquée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.From(System.String,System.Int32)">
            <summary>
            Renvoie une portion de chaine à partir de la position spécifiée
            </summary>
            <param name="s">Chaine dont on veut extraire une portion</param>
            <param name="start">Position de début de la portion</param>
            <returns>La portion de chaine demandée </returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.To(Developpez.Dotnet.StringExtensions.SubStringFrom,System.Int32)">
            <summary>
            Termine une portion de chaine à la position spécifiée
            </summary>
            <param name="subStringFrom">Portion de chaine à terminer</param>
            <param name="end">Position de fin</param>
            <returns>La portion de chaine demandée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Take(Developpez.Dotnet.StringExtensions.SubStringFrom,System.Int32)">
            <summary>
            Prend le nombre de caractères spécifié à partir du début de la portion
            </summary>
            <param name="subStringFrom">Portion de chaine à partir de laquelle prendre les caractères</param>
            <param name="count">Nombre de caractères à prendre</param>
            <returns>La portion de chaine demandée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.From(System.String,System.String)">
            <summary>
            Renvoie une portion de chaine à partir de la sous-chaine spécifiée, sans inclure cette dernière
            </summary>
            <param name="s">Chaine dont on veut extraire une portion</param>
            <param name="start">Sous-chaine de début de la portion</param>
            <returns>La portion de chaine demandée </returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.From(System.String,System.String,System.Boolean)">
            <summary>
            Renvoie une portion de chaine à partir de la sous-chaine spécifiée, en incluant éventuellement cette dernière
            </summary>
            <param name="s">Chaine dont on veut extraire une portion</param>
            <param name="start">Sous-chaine de début de la portion</param>
            <param name="includeBoundary">true pour inclure la chaine de début spécifiée dans le résultat, false sinon</param>
            <returns>La portion de chaine demandée </returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.To(Developpez.Dotnet.StringExtensions.SubStringFrom,System.String)">
            <summary>
            Termine une portion de chaine à la sous-chaine spécifiée, sans inclure cette dernière
            </summary>
            <param name="subStringFrom">Portion de chaine à terminer</param>
            <param name="end">Sous-chaine de fin</param>
            <returns>La portion de chaine demandée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.To(Developpez.Dotnet.StringExtensions.SubStringFrom,System.String,System.Boolean)">
            <summary>
            Termine une portion de chaine à la sous-chaine spécifiée, en incluant éventuellement cette dernière
            </summary>
            <param name="subStringFrom">Portion de chaine à terminer</param>
            <param name="end">Sous-chaine de fin</param>
            <param name="includeBoundary">true pour inclure la chaine de fin spécifiée, false sinon</param>
            <returns>La portion de chaine demandée</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.EnsureEndsWith(System.String,System.String)">
            <summary>
            Vérifie qu'une chaine se termine par le suffixe spécifié et l'ajoute si ce n'est pas le cas.
            </summary>
            <param name="s">Chaine originale</param>
            <param name="suffix">Suffixe à vérifier et éventuellement ajouter</param>
            <returns>La chaine originale si elle se termine par le le suffixe spécifié, sinon la chaine originale suivie du suffixe</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.EnsureStartsWith(System.String,System.String)">
            <summary>
            Vérifie qu'une chaine commence par le préfixe spécifié et l'ajoute si ce n'est pas le cas.
            </summary>
            <param name="s">Chaine originale</param>
            <param name="prefix">Préfixe à vérifier et éventuellement ajouter</param>
            <returns>La chaine originale si elle commence par le le préfixe spécifié, sinon la chaine originale précédée du préfixe</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.IsValidEmail(System.String)">
            <summary>
             Vérifie si une chaine de caractères est une adresse email valide
            </summary>
            <param name="email">La chaine à vérifier</param>
            <returns>true si la chaine est une adresse email valide, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.EqualsWithNullAsEmpty(System.String,System.String)">
            <summary>
            Détermine si deux objets String ont la même valeur. Null et string.Empty sont considérés comme égaux
            </summary>
            <param name="baseString">chaîne servant de base à la comparaison</param>
            <param name="comparedString">chaîne à comparer</param>
            <returns>booléen indiquant si les deux chaînes sont égales</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.EqualsWithNullAsEmpty(System.String,System.String,System.StringComparison)">
            <summary>
            Détermine si deux objets String ont la même valeur. Null et string.Empty sont considérés comme égaux
            </summary>
            <param name="baseString">chaîne servant de base à la comparaison</param>
            <param name="comparedString">chaîne à comparer</param>
            <param name="comparisonType">l'une des valeurs System.StringComparison</param>
            <returns>booléen indiquant si les deux chaînes sont égales</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
             Détermine si une chaine de caractères contient la sous-chaine spécifiée, en utilisant le type de comparison spécifié.
            </summary>
            <param name="s">chaine dans laquelle on recherche la sous-chaine</param>
            <param name="subString">sous-chaine recherchée</param>
            <param name="comparisonType">l'une des valeurs System.StringComparison</param>
            <returns>true si <c>s</c> contient <c>subString</c>, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.ReplaceAt(System.String,System.Int32,System.Char)">
            <summary>
            Remplace le caractère à la position spécifiée d'une chaine par le caractère spécifié.
            </summary>
            <param name="s">Chaine dans laquelle remplacer un caractère</param>
            <param name="index">Position à laquelle remplacer le caractère</param>
            <param name="newChar">Caractère de remplacement</param>
            <returns>La chaine modifiée.</returns>
            <remarks>Tout comme la méthode Replace, cette méthode ne modifie pas
            la chaine d'origine, mais renvoie une nouvelle chaine qui contient la
            modification.</remarks>
        </member>
        <member name="T:Developpez.Dotnet.StringExtensions.SubStringFrom">
            <summary>
            Représente une portion d'une chaine de caractères à partir d'une position donnée
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.SubStringFrom.op_Implicit(Developpez.Dotnet.StringExtensions.SubStringFrom)~System.String">
            <summary>
            Convertit implicitement un SubStringForm en String
            </summary>
            <param name="subStringFrom">SubStringForm à convertir</param>
            <returns>La chaine correspondante</returns>
        </member>
        <member name="M:Developpez.Dotnet.StringExtensions.SubStringFrom.ToString">
            <summary>
            Renvoie une chaine équivalente à la portion de chaine
            </summary>
            <returns>Une chaine équivalente à la portion de chaine</returns>
        </member>
        <member name="P:Developpez.Dotnet.StringExtensions.SubStringFrom.String">
            <summary>
            La chaine dont cet objet représente une portion
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.StringExtensions.SubStringFrom.Start">
            <summary>
            La position de départ de la portion de chaine
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.TemporaryString">
            <summary>
            Représente une chaîne de caractères à durée de vie limitée.
            Lorsque la durée de vie expire, la chaîne de caractères est vidée.
            La durée de vie est réinitialisée à chaque ajout de caractère.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.TemporaryString._DEFAULTLIFETIME">
            <summary>
            Durée de vie par défaut.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.TemporaryString._Timer">
            <summary>
            Instance du Timer.
            </summary>
        </member>
        <member name="F:Developpez.Dotnet.TemporaryString._Value">
            <summary>
            Chaîne de caractères.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.#ctor">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.TemporaryString"/> avec la durée de vie par défaut.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.#ctor(System.Double)">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.TemporaryString"/> avec la durée de vie donnée.
            </summary>
            <param name="lifeTime">Durée de vie (en millisecondes).</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.#ctor(System.String)">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.TemporaryString"/> avec la valeur initiale donnée.
            </summary>
            <param name="value">Valeur initiale.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.#ctor(System.Double,System.String)">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.TemporaryString"/> 
            avec la durée de vie et la valeur initiale données.
            </summary>
            <param name="lifeTime">Durée de vie.</param>
            <param name="value">Valeur initiale.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString._Timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Elapsed timer event.
            </summary>
            <param name="sender">Source object.</param>
            <param name="e">Elapsed event arguments.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.Append(System.Char)">
            <summary>
            Ajoute un caractère à la fin de la chaîne.
            </summary>
            <param name="value">Le caractère Unicode à ajouter.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.Append(System.Char[])">
            <summary>
            Ajoute un tableau de caractères à la fin de cette instance.
            </summary>
            <param name="value">Le tableau de caractères Unicode à ajouter.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.Append(System.String)">
            <summary>
            Ajoute une chaîne de caractères à la chaîne courante.
            </summary>
            <param name="value">Chaîne de caractères à ajouter à la chaîne courante.</param>
        </member>
        <member name="M:Developpez.Dotnet.TemporaryString.ToString">
            <summary>
            Retourne une chaîne de caractères représentant l'instance courante.
            </summary>
            <returns>Une chaîne de caractères représentant l'instance courante.</returns>
        </member>
        <member name="E:Developpez.Dotnet.TemporaryString.Reset">
            <summary>
            Evènement levé lorsque la durée de vie a expiré.
            <remarks>La chaîne de caractère est vidée.</remarks>
            </summary>
        </member>
        <member name="E:Developpez.Dotnet.TemporaryString.CharAdded">
            <summary>
            Evènement levé lorsqu'un caractère a été ajouté à l'instance.
            <remarks>La durée de vie est réinitialisée.</remarks>
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Algorithms.Levenshtein">
            <summary>
            Fournit des méthodes permettant d'évaluer la similarité entre 2 chaînes de caractères,
            selon l'algorithme de la distance de Levenshtein.
            </summary>
            <remarks>L'algorithme de la distance de Levenshtein est décrit ici :
            http://en.wikipedia.org/wiki/Levenshtein_distance.
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Levenshtein.ComputeDistance(System.String,System.String,System.Boolean)">
            <summary>
            Calcule la distance de Levenshtein entre 2 chaînes de caractères.
            </summary>
            <param name="a">Première chaîne à comparer.</param>
            <param name="b">Seconde chaîne à comparer.</param>
            <param name="caseSensitive">true pour tenir compte de la casse, false sinon.</param>
            <returns>La distance de Levenshtein entre les 2 chaînes.</returns>
            <remarks>
            <list type="bullet">
            <item>La distance de Levenshtein est toujours supérieure ou égale à la différence de longueur entre les 2 chaines</item>
            <item>La distance de Levenshtein est toujours inférieure ou égale à la longueur de la plus longue chaine</item>
            <item>La distance de Levenshtein entre 2 chaines identiques est 0</item>
            </list>
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Algorithms.Levenshtein.ComputeCorrelation(System.String,System.String,System.Boolean)">
            <summary>
            Calcule le coefficient de corrélation entre 2 chaînes, sur la base de la distance de Levenshtein
            </summary>
            <param name="a">Première chaîne à comparer</param>
            <param name="b">Seconde chaîne à comparer</param>
            <param name="caseSensitive">true pour tenir compte de la casse, false sinon</param>
            <returns>Le coefficient de corrélation entre les 2 chaînes. Cette valeur est comprise entre 0 (chaînes complètement différentes) et 1 (chaînes identiques)</returns>
            <remarks>Ce coefficient est calculé selon la formule suivante : <c>1 - d/L</c>, où <c>d</c> est la distance de Levenshtein entre les 2 chaînes, et <c>L</c> la longueur de la plus longue chaîne.</remarks>
        </member>
        <member name="T:Developpez.Dotnet.Text.EncodingExtensions">
            <summary>
            Fournit des méthodes d'extension pour travailler avec les encodages de texte
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Text.EncodingExtensions.TryGetString(System.Text.Encoding,System.Byte[],System.String@)">
            <summary>
            Tente de décoder une chaine de caractères à partir d'un tableau d'octets pour un encodage donné.
            </summary>
            <param name="encoding">Encodage à utiliser pour le décodage</param>
            <param name="bytes">Tableau d'octets contenant les données à décoder</param>
            <param name="result">Chaine décodée</param>
            <returns>True si le décodage réussit, false si <c>bytes</c> contient des donnés non valides</returns>
        </member>
        <member name="M:Developpez.Dotnet.Text.EncodingExtensions.TryGetString(System.Text.Encoding,System.Byte[],System.Int32,System.Int32,System.String@)">
            <summary>
            Tente de décoder une chaine de caractères à partir d'un tableau d'octets pour un encodage donné.
            </summary>
            <param name="encoding">Encodage à utiliser pour le décodage</param>
            <param name="bytes">Tableau d'octets contenant les données à décoder</param>
            <param name="result">Chaine décodée</param>
            <param name="index">Position à partir de laquelle on lit les données</param>
            <param name="count">Nombre d'octets à lire</param>
            <returns>True si le décodage réussit, false si <c>bytes</c> contient des donnés non valides</returns>
        </member>
        <member name="M:Developpez.Dotnet.Text.EncodingExtensions.IsValid(System.Text.Encoding,System.Byte[])">
            <summary>
            Vérifie si un tableau d'octets contient des données valides pour un encodage donné.
            </summary>
            <param name="encoding">Encodage pour lequel la validité des données est vérifiée</param>
            <param name="bytes">Tableau d'octets contenant les données à vérifier</param>
            <returns>True si les données sont valides, sinon false.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Text.EncodingExtensions.IsValid(System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Vérifie si un tableau d'octets contient des données valides pour un encodage donné.
            </summary>
            <param name="encoding">Encodage pour lequel la validité des données est vérifiée</param>
            <param name="bytes">Tableau d'octets contenant les données à vérifier</param>
            <param name="index">Position à partir de laquelle on vérifie les données</param>
            <param name="count">Nombre d'octets à vérifier</param>
            <returns>True si les données sont valides, sinon false.</returns>
        </member>
        <member name="T:Developpez.Dotnet.Text.StringTemplate">
            <summary>
            Représente un modèle de chaine de caractères, où on peut utiliser des noms plutôt que des index
            pour les valeurs à remplacer.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.#ctor(System.String)">
            <summary>
            Initialise une nouvelle instance de StringTemplate avec le template à utiliser
            </summary>
            <param name="template">Le template à utiliser. Le format est identique à celui accepté par String.Format,
            mais avec des noms à la place des index pour les valeurs à remplacer</param>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.op_Implicit(System.String)~Developpez.Dotnet.Text.StringTemplate">
            <summary>
            Convertit une chaine en StringTemplate
            </summary>
            <param name="s">La chaine à convertir</param>
            <returns>Un StringTemplate utilisant la chaine convertie comme template</returns>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.ToString">
            <summary>
            Renvoie une chaine représentant cette instance de StringTemplate.
            </summary>
            <returns>Le template utilisé par ce StringTemplate</returns>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Remplace les placeholders du template par les valeurs fournies dans le dictionnaire spécifié
            </summary>
            <param name="values">Le dictionnaire contenant les valeurs pour les placeholders</param>
            <returns>La chaine formatée</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Aucune valeur n'a été trouvée pour
            un placeholder du template</exception>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Remplace les placeholders du template par les valeurs fournies dans le dictionnaire spécifié
            </summary>
            <param name="values">Le dictionnaire contenant les valeurs pour les placeholders</param>
            <param name="throwOnMissingValue">Indique si une exception doit être levée quand aucune valeur
            n'est trouvée pour un placeholder du template. Si ce paramètre vaut false, le placeholder est laissé
            tel quel dans la chaine formatée.</param>
            <returns>La chaine formatée</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Le paramètre <c>throwOnMissingValue</c>
            vaut true et aucune valeur n'a été trouvée pour un placeholder du template</exception>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.Object)">
            <summary>
            Remplace les placeholders du template par les valeurs fournies dans l'objet spécifié
            </summary>
            <param name="values">L'objet contenant les valeurs pour les placeholders. Chaque propriété de
            l'objet correspond à un placeholder du template</param>
            <returns>La chaine formatée</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Aucune valeur n'a été trouvée pour
            un placeholder du template</exception>
            <remarks>Cette méthode s'utilise typiquement avec un objet de type anonyme, créé avec la syntaxe
            <c>new { nom1 = valeur1, nom2 = valeur2 }</c></remarks>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.Object,System.Boolean)">
            <summary>
            Remplace les placeholders du template par les valeurs fournies dans l'objet spécifié
            </summary>
            <param name="values">L'objet contenant les valeurs pour les placeholders. Chaque propriété de
            l'objet correspond à un placeholder du template</param>
            <param name="throwOnMissingValue">Indique si une exception doit être levée quand aucune valeur
            n'est trouvée pour un placeholder du template. Si ce paramètre vaut false, le placeholder est laissé
            tel quel dans la chaine formatée.</param>
            <returns>La chaine formatée</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Le paramètre <c>throwOnMissingValue</c>
            vaut true et aucune valeur n'a été trouvée pour un placeholder du template</exception>
            <remarks>Cette méthode s'utilise typiquement avec un objet de type anonyme, créé avec la syntaxe
            <c>new { nom1 = valeur1, nom2 = valeur2 }</c></remarks>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Remplace les placeholders du template spécifié par les valeurs fournies dans le dictionnaire spécifié
            </summary>
            <param name="template">Le template à utiliser</param>
            <param name="values">Le dictionnaire contenant les valeurs pour les placeholders</param>
            <returns>La chaine formatée</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Aucune valeur n'a été trouvée pour
            un placeholder du template</exception>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Remplace les placeholders du template spécifié par les valeurs fournies dans le dictionnaire spécifié
            </summary>
            <param name="template">Le template à utiliser</param>
            <param name="values">Le dictionnaire contenant les valeurs pour les placeholders</param>
            <param name="throwOnMissingValue">Indique si une exception doit être levée quand aucune valeur
            n'est trouvée pour un placeholder du template. Si ce paramètre vaut false, le placeholder est laissé
            tel quel dans la chaine formatée.</param>
            <returns>La chaine formatée</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Le paramètre <c>throwOnMissingValue</c>
            vaut true et aucune valeur n'a été trouvée pour un placeholder du template</exception>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.String,System.Object)">
            <summary>
            Remplace les placeholders du template par les valeurs fournies dans l'objet spécifié
            </summary>
            <param name="template">Le template à utiliser</param>
            <param name="values">L'objet contenant les valeurs pour les placeholders. Chaque placeholder du
            template est remplacé par la valeur de la propriété ou du champ de même nom</param>
            <returns>La chaine formatée</returns>
            <remarks>Cette méthode s'utilise typiquement avec un objet de type anonyme, créé avec la syntaxe
            <c>new { nom1 = valeur1, nom2 = valeur2 }</c></remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Aucune valeur n'a été trouvée pour
            un placeholder du template</exception>
        </member>
        <member name="M:Developpez.Dotnet.Text.StringTemplate.Format(System.String,System.Object,System.Boolean)">
            <summary>
            Remplace les placeholders du template par les valeurs fournies dans l'objet spécifié
            </summary>
            <param name="template">Le template à utiliser</param>
            <param name="values">L'objet contenant les valeurs pour les placeholders. Chaque placeholder du
            template est remplacé par la valeur de la propriété ou du champ de même nom</param>
            <param name="throwOnMissingValue">Indique si une exception doit être levée quand aucune valeur
            n'est trouvée pour un placeholder du template. Si ce paramètre vaut false, le placeholder est laissé
            tel quel dans la chaine formatée.</param>
            <returns>La chaine formatée</returns>
            <remarks>Cette méthode s'utilise typiquement avec un objet de type anonyme, créé avec la syntaxe
            <c>new { nom1 = valeur1, nom2 = valeur2 }</c></remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Le paramètre <c>throwOnMissingValue</c>
            vaut true et aucune valeur n'a été trouvée pour un placeholder du template</exception>
        </member>
        <member name="T:Developpez.Dotnet.Reflection.ReflectionExtensions">
            <summary>
            Fournit des méthodes d'extension pour faciliter l'utilisation de la réflexion
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.Is(System.Type,System.Type)">
            <summary>
            Détermine si un type hérite d'un autre type, ou implémente une interface
            </summary>
            <param name="type">Le type à vérifier</param>
            <param name="superType">Le type de base dont <c>type</c> doit hériter</param>
            <returns>true si <c>type</c> est <c>superType</c>, hérite de <c>superType</c>, ou implémente <c>superType</c>. Sinon, false</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.Is``1(System.Type)">
            <summary>
            Détermine si un type hérite d'un autre type, ou implémente une interface
            </summary>
            <typeparam name="T">Le type de base dont <c>type</c> doit hériter</typeparam>
            <param name="type">Le type à vérifier</param>
            <returns>true si <c>type</c> est <c>T</c>, hérite de <c>T</c>, ou implémente <c>T</c>. Sinon, false</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.IsImplicitlyConvertibleFrom(System.Type,System.Type)">
            <summary>
            Vérifie si <c>type</c> est implicitement convertible à partir de <c>sourceType</c>.
            </summary>
            <param name="type">Type cible</param>
            <param name="sourceType">Type source</param>
            <returns><c>true</c> s'il existe une conversion implicite de <c>sourceType</c> vers <c>type</c>, ou si aucune conversion n'est nécessaire ; sinon, <c>false</c>.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.IsImplicitlyConvertibleFrom``1(System.Type)">
            <summary>
            Vérifie si <c>type</c> est implicitement convertible à partir de <c>T</c>.
            </summary>
            <typeparam name="T">Type source</typeparam>
            <param name="type">Type cible</param>
            <returns><c>true</c> s'il existe une conversion implicite de <c>T</c> vers <c>type</c>, ou si aucune conversion n'est nécessaire ; sinon, <c>false</c>.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.IsConvertibleFrom(System.Type,System.Type)">
            <summary>
            Vérifie si <c>type</c> est convertible (implicitement ou explicitement) à partir de <c>sourceType</c>.
            </summary>
            <param name="type">Type cible</param>
            <param name="sourceType">Type source</param>
            <returns><c>true</c> s'il existe une conversion (implicite ou explicite) de <c>sourceType</c> vers <c>type</c>, ou si aucune conversion n'est nécessaire ; sinon, <c>false</c>.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.IsConvertibleFrom``1(System.Type)">
            <summary>
            Vérifie si <c>type</c> est convertible (implicitement ou explicitement) à partir de <c>T</c>.
            </summary>
            <typeparam name="T">Type source</typeparam>
            <param name="type">Type cible</param>
            <returns><c>true</c> s'il existe une conversion (implicite ou explicite) de <c>T</c> vers <c>type</c>, ou si aucune conversion n'est nécessaire ; sinon, <c>false</c>.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.IsImplicitlyConvertibleTo(System.Type,System.Type)">
            <summary>
            Vérifie si <c>type</c> est implicitement convertible en <c>targetType</c>.
            </summary>
            <param name="type">Type source</param>
            <param name="targetType">Type cible</param>
            <returns><c>true</c> s'il existe une conversion implicite de <c>type</c> vers <c>T</c>, ou si aucune conversion n'est nécessaire ; sinon, <c>false</c>.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.IsImplicitlyConvertibleTo``1(System.Type)">
            <summary>
            Vérifie si <c>type</c> est implicitement convertible en <c>T</c>.
            </summary>
            <typeparam name="T">Type cible</typeparam>
            <param name="type">Type source</param>
            <returns><c>true</c> s'il existe une conversion implicite de <c>type</c> vers <c>targetType</c>, ou si aucune conversion n'est nécessaire ; sinon, <c>false</c>.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.IsConvertibleTo(System.Type,System.Type)">
            <summary>
            Vérifie si <c>type</c> est convertible (implicitement ou explicitement) en <c>targetType</c>.
            </summary>
            <param name="type">Type source</param>
            <param name="targetType">Type cible</param>
            <returns><c>true</c> s'il existe une conversion (implicite ou explicite) de <c>type</c> vers <c>targetType</c>, ou si aucune conversion n'est nécessaire ; sinon, <c>false</c>.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.IsConvertibleTo``1(System.Type)">
            <summary>
            Vérifie si <c>type</c> est convertible (implicitement ou explicitement) en <c>T</c>.
            </summary>
            <typeparam name="T">Type cible</typeparam>
            <param name="type">Type source</param>
            <returns><c>true</c> s'il existe une conversion (implicite ou explicite) de <c>type</c> vers <c>targetType</c>, ou si aucune conversion n'est nécessaire ; sinon, <c>false</c>.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.IsNullable(System.Type)">
            <summary>
            Indique si un type est nullable.
            </summary>
            <param name="type">Type dont on veut vérifier s'il est nullable</param>
            <returns>true si <c>type</c> est un type référence ou un type générique Nullable&lt;T&gt;, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetDefaultValue(System.Type)">
            <summary>
            Renvoie la valeur par défaut du type spécifié
            </summary>
            <param name="type">Le type dont on veut récupérer la valeur par défaut</param>
            <returns>La valeur par défaut du type</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.IsStatic(System.Type)">
            <summary>
            Indique si un type est statique.
            </summary>
            <param name="type">Le type à tester</param>
            <returns>true si le type est statique, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.HasAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Détermine si un attribut est appliqué à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion à vérifier</param>
            <param name="attributeType">Le type de l'attribut à rechercher</param>
            <returns>true si l'attribut spécifié est appliqué à l'objet de réflexion, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.HasAttribute(System.Reflection.ICustomAttributeProvider,System.Type,System.Boolean)">
            <summary>
            Détermine si un attribut est appliqué à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion à vérifier</param>
            <param name="attributeType">Le type de l'attribut à rechercher</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>true si l'attribut spécifié est appliqué à l'objet de réflexion, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <returns>Une liste des attributs appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>Une liste des attributs du type demandé appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <param name="attributeType">Le type de l'attribut recherché</param>
            <returns>Une liste des attributs du type demandé appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Type,System.Boolean)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <param name="attributeType">Le type de l'attribut recherché</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>Une liste des attributs du type demandé appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Récupère un attribut appliqué à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer un attribut</param>
            <param name="attributeType">Le type de l'attribut recherché</param>
            <returns>L'attribut recherché s'il existe, null sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttribute(System.Reflection.ICustomAttributeProvider,System.Type,System.Boolean)">
            <summary>
            Récupère un attribut appliqué à un objet de réflexion.
            </summary>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer un attribut</param>
            <param name="attributeType">Le type de l'attribut recherché</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>L'attribut recherché s'il existe, null sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Détermine si un attribut est appliqué à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut à rechercher</typeparam>
            <param name="reflectionObject">L'objet de réflexion à vérifier</param>
            <returns>true si l'attribut spécifié est appliqué à l'objet de réflexion, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Détermine si un attribut est appliqué à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut à rechercher</typeparam>
            <param name="reflectionObject">L'objet de réflexion à vérifier</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>true si l'attribut spécifié est appliqué à l'objet de réflexion, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut recherché</typeparam>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <returns>Une liste des attributs du type demandé appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Récupère les attributs appliqués à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut recherché</typeparam>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer les attributs</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>Une liste des attributs du type demandé appliqués à l'objet de réflexion</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Récupère un attribut appliqué à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut recherché</typeparam>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer un attribut</param>
            <returns>L'attribut recherché s'il existe, null sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Récupère un attribut appliqué à un objet de réflexion.
            </summary>
            <typeparam name="T">Le type de l'attribut recherché</typeparam>
            <param name="reflectionObject">L'objet de réflexion dont on veut récupérer un attribut</param>
            <param name="inherit">true pour rechercher aussi dans les ancêtres, false sinon</param>
            <returns>L'attribut recherché s'il existe, null sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.SetValue``1(System.Reflection.PropertyInfo,``0@,System.Object)">
            <summary>
            Définit la valeur d'une propriété pour un objet. Equivalent à <c>PropertyInfo.GetValue</c>,
            mais fonctionne aussi pour les types valeur.
            </summary>
            <typeparam name="T">Type de l'objet</typeparam>
            <param name="propertyInfo">Descripteur de la propriété</param>
            <param name="instance">objet pour lequel on définit la valeur de la propriété</param>
            <param name="value">Nouvelle valeur de la propriété</param>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.SetValue``1(System.Reflection.PropertyInfo,``0@,System.Object,System.Object[])">
            <summary>
            Définit la valeur d'une propriété pour un objet. Equivalent à <c>PropertyInfo.GetValue</c>,
            mais fonctionne aussi pour les types valeur.
            </summary>
            <typeparam name="T">Type de l'objet</typeparam>
            <param name="propertyInfo">Descripteur de la propriété</param>
            <param name="instance">objet pour lequel on définit la valeur de la propriété</param>
            <param name="value">Nouvelle valeur de la propriété</param>
            <param name="index">Index pour la propriété indexée, ou null si la propriété n'est pas indexée</param>
        </member>
        <member name="M:Developpez.Dotnet.Reflection.ReflectionExtensions.SetValue``1(System.Reflection.FieldInfo,``0@,System.Object)">
            <summary>
            Définit la valeur d'un champ pour un objet. Equivalent à <c>FieldInfo.GetValue</c>,
            mais fonctionne aussi pour les types valeur.
            </summary>
            <typeparam name="T">Type de l'objet</typeparam>
            <param name="fieldInfo">Descripteur du champ</param>
            <param name="instance">objet pour lequel on définit la valeur du champ</param>
            <param name="value">Nouvelle valeur du champ</param>
        </member>
        <member name="T:Developpez.Dotnet.VersionNumber">
            <summary>
            Représente le numéro de version d'un composant.
            </summary>
            <remarks>Cette classe implémente les spécifications
            du versionnement sémantique (http://semver.org).
            Pour une version française des spécifications voir :
            https://github.com/DudePascalou/semver/blob/master/semver.fr.md </remarks>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.#ctor">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.VersionNumber"/>.
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.VersionNumber"/>.
            </summary>
            <param name="major">Version majeure.</param>
            <param name="minor">Version mineure.</param>
            <param name="patch">Version de patch.</param>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.VersionNumber"/>.
            </summary>
            <param name="major">Version majeure.</param>
            <param name="minor">Version mineure.</param>
            <param name="patch">Version de patch.</param>
            <param name="preRelease">Version de pré-publication.</param>
            <param name="build">Version de construction.</param>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.#ctor(System.String)">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:Developpez.Dotnet.VersionNumber"/>.
            </summary>
            <param name="versionNumber">Chaîne de caractères représentant une instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.GetHashCode">
            <summary>
            Retourne le code de hachage pour cette instance.
            </summary>
            <returns>Le code de hachage pour cette instance.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.Equals(System.Object)">
            <summary>
            Indique si l'instance de l'objet donné est identique à l'instance courante.
            </summary>
            <param name="obj">L'instance de l'objet à comparer avec l'instance courante.</param>
            <returns>Vrai, si l'instance de l'objet donné est identique à l'instance courante, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.Equals(Developpez.Dotnet.VersionNumber)">
            <summary>
            Indique si l'instance de <see cref="T:Developpez.Dotnet.VersionNumber"/> donnée est identique à l'instance courante.
            </summary>
            <param name="other">L'instance de <see cref="T:Developpez.Dotnet.VersionNumber"/> à comparer avec l'instance courante.</param>
            <returns>Vrai, si l'instance de <see cref="T:Developpez.Dotnet.VersionNumber"/> donnée est identique à l'instance courante, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.CompareTo(System.Object)">
            <summary>
            Retourne un entier indiquant l'ordre relatif de l'instance donnée par rapport à l'instance courante.
            </summary>
            <param name="obj">L'instance de l'objet à comparer avec l'instance courante.</param>
            <returns>Un entier inférieur à zéro si l'instance donnée précède l'instance courante,
            un entier égal à zéro si les instances ont la même position,
            un entier supérieur à zéro si l'instance donnée suit l'instance courante.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.CompareTo(Developpez.Dotnet.VersionNumber)">
            <summary>
            Retourne un entier indiquant l'ordre relatif de l'instance donnée par rapport à l'instance courante.
            </summary>
            <param name="other">L'instance <see cref="T:Developpez.Dotnet.VersionNumber"/> à comparer avec l'instance courante.</param>
            <returns>Un entier inférieur à zéro si l'instance <see cref="T:Developpez.Dotnet.VersionNumber"/> précède l'instance courante,
            un entier égal à zéro si les instances ont la même position,
            un entier supérieur à zéro si l'instance <see cref="T:Developpez.Dotnet.VersionNumber"/> suit l'instance courante.</returns>
            <remarks>SemVer.Spec.12 : La priorité DOIT être calculée en séparant les numéros de version en identifiants 
            majeur, mineur, patch, prépublication et de construction dans cet ordre.
            Les numéros de version majeur, mineur, et de patch sont toujours comparés numériquement.
            Pour les versions de prépublication et de construction, la priorité DOIT être déterminée 
            en comparant chaque identifiant séparé par un point comme suit : les identifiants composés 
            de chiffres seulement sont comparés numériquement et les identifiants composés de lettres ou 
            de tirets sont comparés dans l'ordre de tri ASCII.
            Les identifiants numériques ont toujours priorité inférieure par rapport aux identifiants non numériques.</remarks>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.ComparePreReleaseTo(System.String)">
            <summary>
            Retourne un entier indiquant l'ordre relatif de la version de pré-publication donnée 
            par rapport à la version de pré-publication de l'instance courante.
            </summary>
            <param name="preRelease">Version de pré-publication à comparer avec celle de l'instance courante.</param>
            <returns>Un entier inférieur à zéro si la version de pré-publication donnée précède celle de l'instance courante,
            un entier égal à zéro si les versions ont la même position,
            un entier supérieur à zéro si la version de pré-publication donnée suit celle de l'instance courante.</returns>
            <remarks>SemVer.Spec.10 : Des versions de prépublication sont utilisables 
            et précèdent la version normale associée (version de prépublication &lt; version normale).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.CompareBuildTo(System.String)">
            <summary>
            Retourne un entier indiquant l'ordre relatif de la version de construction donnée 
            par rapport à la version de construction de l'instance courante.
            </summary>
            <param name="build">Version de construction à comparer avec celle de l'instance courante.</param>
            <returns>Un entier inférieur à zéro si la version de construction donnée précède celle de l'instance courante,
            un entier égal à zéro si les versions ont la même position,
            un entier supérieur à zéro si la version de construction donnée suit celle de l'instance courante.</returns>
            <remarks>SemVer.Spec.11 : Les versions de construction sont utilisables 
            et suivent la version normale associée (version de construction &gt; version normale).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.CompareIdentifiers(System.String,System.String)">
            <summary>
            Retourne un entier indiquant l'ordre relatif des identifiants donnés.
            </summary>
            <param name="identifiers1">Identifiant 1.</param>
            <param name="identifiers2">Identifiant 2.</param>
            <returns>Un entier inférieur à zéro si l'identifiant 1 précède l'identifiant 2,
            un entier égal à zéro si les identifiants ont la même position,
            un entier supérieur à zéro si l'identifiant 1 suit l'identifiant 2.</returns>
            <remarks>SemVer.Spec.12 : Pour les versions de prépublication et de construction,
            la priorité DOIT être déterminée en comparant chaque identifiant séparé par un point comme suit :
            les identifiants composés de chiffres seulement sont comparés numériquement et les identifiants
            composés de lettres ou de tirets sont comparés dans l'ordre de tri ASCII.
            Les identifiants numériques précèdent les identifiants non numériques (identifiants numériques &lt; identifiants non-numériques).</remarks>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.System#ICloneable#Clone">
            <summary>
            Retourne une instance de <see cref="T:Developpez.Dotnet.VersionNumber"/> qui est la copie de l'instance courante.
            </summary>
            <returns>Une instance de <see cref="T:Developpez.Dotnet.VersionNumber"/> qui est la copie de l'instance courante.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.Clone">
            <summary>
            Retourne une instance de <see cref="T:Developpez.Dotnet.VersionNumber"/> qui est la copie de l'instance courante.
            </summary>
            <returns>Une instance de <see cref="T:Developpez.Dotnet.VersionNumber"/> qui est la copie de l'instance courante.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.ToString">
            <summary>
            Retourne une chaîne de caractères représentant l'instance courante.
            </summary>
            <returns>Une chaîne de caractères représentant l'instance courante.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.Parse(System.String)">
            <summary>
            Retourne une instance de <see cref="T:Developpez.Dotnet.VersionNumber"/> obtenue
            à partir de la chaîne de caractères données.
            </summary>
            <param name="versionNumber">Chaîne de caractères représentant une instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <returns>L'instance de <see cref="T:Developpez.Dotnet.VersionNumber"/> obtenue
            à partir de la chaîne de caractères.</returns>
            <exception cref="T:System.ArgumentNullException">versionNumber est null.</exception>
            <exception cref="T:System.FormatException">versionNumber n'est pas une représentation valide de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</exception>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.op_Equality(Developpez.Dotnet.VersionNumber,Developpez.Dotnet.VersionNumber)">
            <summary>
            Indique si les 2 instances de <see cref="T:Developpez.Dotnet.VersionNumber"/> données sont identiques.
            </summary>
            <param name="vn1">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <param name="vn2">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <returns>Vrai si les 2 instances de <see cref="T:Developpez.Dotnet.VersionNumber"/> données sont identiques, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.op_Inequality(Developpez.Dotnet.VersionNumber,Developpez.Dotnet.VersionNumber)">
            <summary>
            Indique si les 2 instances de <see cref="T:Developpez.Dotnet.VersionNumber"/> données sont différentes.
            </summary>
            <param name="vn1">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <param name="vn2">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <returns>Vrai si les 2 instances de <see cref="T:Developpez.Dotnet.VersionNumber"/> données sont différentes, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.op_GreaterThan(Developpez.Dotnet.VersionNumber,Developpez.Dotnet.VersionNumber)">
            <summary>
            Indique si vn1 est supérieur à vn2.
            </summary>
            <param name="vn1">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <param name="vn2">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <returns>Vrai, si vn1 est supérieur à vn2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.op_GreaterThanOrEqual(Developpez.Dotnet.VersionNumber,Developpez.Dotnet.VersionNumber)">
            <summary>
            Indique si vn1 est supérieur ou égal à vn2.
            </summary>
            <param name="vn1">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <param name="vn2">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <returns>Vrai, si vn1 est supérieur ou égal à vn2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.op_LessThan(Developpez.Dotnet.VersionNumber,Developpez.Dotnet.VersionNumber)">
            <summary>
            Indique si vn1 est inférieur à vn2.
            </summary>
            <param name="vn1">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <param name="vn2">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <returns>Vrai, si vn1 est inférieur à vn2, faux sinon.</returns>
        </member>
        <member name="M:Developpez.Dotnet.VersionNumber.op_LessThanOrEqual(Developpez.Dotnet.VersionNumber,Developpez.Dotnet.VersionNumber)">
            <summary>
            Indique si vn1 est inférieur ou égal à vn2.
            </summary>
            <param name="vn1">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <param name="vn2">Instance de <see cref="T:Developpez.Dotnet.VersionNumber"/>.</param>
            <returns>Vrai, si vn1 est inférieur ou égal à vn2, faux sinon.</returns>
        </member>
        <member name="P:Developpez.Dotnet.VersionNumber.Major">
            <summary>
            Version majeure.
            </summary>
            <remarks>SemVer.Spec.2 : Un numéro de version standard DOIT prendre la forme X.Y.Z où X, Y et Z sont des entiers non négatifs. 
            X est la version majeure, Y est la version mineure, et Z est la version de patch.</remarks>
        </member>
        <member name="P:Developpez.Dotnet.VersionNumber.Minor">
            <summary>
            Version mmineure.
            </summary>
            <remarks>SemVer.Spec.2 : Un numéro de version standard DOIT prendre la forme X.Y.Z où X, Y et Z sont des entiers non négatifs. 
            X est la version majeure, Y est la version mineure, et Z est la version de patch.</remarks>
        </member>
        <member name="P:Developpez.Dotnet.VersionNumber.Patch">
            <summary>
            Verison de patch.
            </summary>
            <remarks>SemVer.Spec.2 : Un numéro de version standard DOIT prendre la forme X.Y.Z où X, Y et Z sont des entiers non négatifs. 
            X est la version majeure, Y est la version mineure, et Z est la version de patch.</remarks>
        </member>
        <member name="P:Developpez.Dotnet.VersionNumber.PreRelease">
            <summary>
            Version de pré-publication.
            </summary>
            <remarks>SemVer.Spec.10 : Une version de prépublication PEUT être notée par l'ajout d'un tiret 
            et une série d'identifiants séparés par des points suivant immédiatement la version de patch. 
            Les identifiants DOIVENT être composés uniquement de caractères alphanumériques ASCII et de tirets [0-9A-Za-z-].</remarks>
        </member>
        <member name="P:Developpez.Dotnet.VersionNumber.Build">
            <summary>
            Version de construction.
            </summary>
            <remarks>SemVer.Spec.11 : Une version de construction PEUT être représentée par l'ajout d'un signe "plus" 
            et d'une série d'identifiants séparés par des points suivant immédiatement la version de patch ou de prépublication. 
            Les identifiants DOIVENT être composés uniquement de caractères alphanumériques ASCII et de tirets [0-9A-Za-z-].</remarks>
        </member>
        <member name="T:Developpez.Dotnet.WeakDelegate`1">
            <summary>
            Permet de référencer faiblement un delegate
            </summary>
            <typeparam name="TDelegate">Type de delegate</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.WeakDelegate`1.#ctor(System.Delegate)">
            <summary>
            Initialise une nouvelle instance de <c>WeakDelegate&lt;TDelegate&gt;</c> avec le delegate spécifier
            </summary>
            <param name="realDelegate">Le delegate pour lequel créer une référence faible</param>
        </member>
        <member name="M:Developpez.Dotnet.WeakDelegate`1.GetDelegate">
            <summary>
            Obtient le delegate englobé par cette référence faible
            </summary>
            <returns>Le delegate englobé par cette référence faible</returns>
        </member>
        <member name="M:Developpez.Dotnet.WeakDelegate`1.Equals(`0)">
            <summary>
            Indique si cette instance est équivalente au delegate spécifié
            </summary>
            <param name="other">Le delegate avec lequel comparer cette instance</param>
            <returns>true si cette instance est équivalente au delegate spécifié, sinon false</returns>
        </member>
        <member name="M:Developpez.Dotnet.WeakDelegate`1.Invoke(System.Object[])">
            <summary>
            Invoke le delegate avec les arguments spécifiés
            </summary>
            <param name="args">Arguments à passer au delegate</param>
            <returns>La valeur de retour du delegate</returns>
        </member>
        <member name="P:Developpez.Dotnet.WeakDelegate`1.IsAlive">
            <summary>
            Indique si le delegate est encore actif (true) ou s'il a été collecté (false)
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.WeakEvent`1">
            <summary>
            Implémente un évènement qui ne garde qu'une référence faible vers ses handlers,
            de façon à éviter les fuites mémoire.
            </summary>
            <typeparam name="TEventHandler">Type du delegate de l'évènement</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.WeakEvent`1.#ctor">
            <summary>
            Initialise une nouvelle instance de <c>WeakEvent&lt;TEventHandler&gt;</c>
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.WeakEvent`1.AddHandler(`0)">
            <summary>
            Ajoute un handler à l'évènement
            </summary>
            <param name="handler">Le handler à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.WeakEvent`1.RemoveHandler(`0)">
            <summary>
            Retire un handler de l'évènement
            </summary>
            <param name="handler">Le handler à retirer</param>
        </member>
        <member name="P:Developpez.Dotnet.WeakEvent`1.Raise">
            <summary>
            Renvoie un delegate qui déclenche l'évènement en appelant tous les handlers encore actifs
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.WeakReference`1">
            <summary>
            Représente une référence faible fortement typée
            </summary>
            <typeparam name="T">Type de l'objet référencé</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.WeakReference`1.#ctor(`0)">
            <summary>
            Initialise une nouvelle instance de WeakReference&lt;T&gt; qui
            référence l'objet cible spécifié
            </summary>
            <param name="target">Objet cible</param>
        </member>
        <member name="M:Developpez.Dotnet.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>
            Initialise une nouvelle instance de WeakReference&lt;T&gt; qui
            référence l'objet cible spécifié, en indiquant si l'objet doit
            continuer à être suivi après sa finalisation
            </summary>
            <param name="target">Objet cible</param>
            <param name="trackResurrection">true si l'objet doit être suivi
            après sa finalisation (référence faible "longue"), false sinon
            (référence faible "courte")</param>
        </member>
        <member name="M:Developpez.Dotnet.WeakReference`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialise une nouvelle instance de WeakReference&lt;T&gt; en utilisant
            les données désérialisées
            </summary>
            <param name="info">Objet contenant toutes les données nécessaires pour sérialiser ou désérialiser l'objet WeakReference actuel.</param>
            <param name="context">Décrit la source et la destination du flux sérialisé spécifié par info.</param>
        </member>
        <member name="P:Developpez.Dotnet.WeakReference`1.Target">
            <summary>
            Renvoie l'objet cible de la référence faible
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Threading.ThreadUtils">
            <summary>
            Utilitaires d'exécutions de méthodes via différents threads
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteBackground(System.Threading.ThreadStart)">
            <summary>
            Exécute le délégué spécifié en arrière plan dans un nouveau thread
            </summary>
            <param name="method">Délégué à exécuter en arrière plan</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteBackground(System.Threading.ThreadStart,System.String)">
            <summary>
            Exécute le délégué spécifié en arrière plan dans un nouveau thread
            </summary>
            <param name="method">Délégué à exécuter en arrière plan</param>
            <param name="description">Description du thread crée</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.Execute(System.Threading.ThreadStart,System.TimeSpan)">
            <summary>
            Exécute une méthode avec un temps maximal d'exécution. Si le temps d'exécution est dépassé
            et que le délégué ne s'est toujours pas terminé, le travail est arrêté via Thread.Abort
            et une exception TimeoutException est levée
            </summary>
            <param name="method">Délégué à exécuter</param>
            <param name="timeout">Temps maximal d'exécution du délégué</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.Execute(System.Threading.ThreadStart,System.String,System.TimeSpan)">
            <summary>
            Exécute une méthode avec un temps maximal d'exécution. Si le temps d'exécution est dépassé
            et que le délégué ne s'est toujours pas terminé, le travail est arrêté via Thread.Abort
            et une exception TimeoutException est levée
            </summary>
            <param name="method">Délégué à exécuter</param>
            <param name="description">Description du thread crée (si un thread est crée)</param>
            <param name="timeout">Temps maximal d'exécution du délégué</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteAsync(System.Threading.ThreadStart)">
            <summary>
            Exécute un délégué de manière asynchrone
            </summary>
            <param name="method">Délégué à exécuter</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteAsync(System.Threading.ThreadStart,System.String)">
            <summary>
            Exécute un délégué de manière asynchrone
            </summary>
            <param name="method">Délégué à exécuter</param>
            <param name="description">Si un thread est crée, description de celui ci</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteAsync(System.Threading.ThreadStart,System.EventHandler)">
            <summary>
            Exécute un délégué de manière asynchrone
            </summary>
            <param name="method">Délégué à exécuter</param>
            <param name="onFinish">Evènement à appeler lorsque l'opération est terminée</param>
            <remarks>
            onFinish peut être null cependant si onFinish est différent de null il est exécuté
            sur le thread ayant exécuté le travail, pas sur le thread appelant
            </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadUtils.ExecuteAsync(System.Threading.ThreadStart,System.String,System.EventHandler)">
            <summary>
            Exécute un délégué de manière asynchrone
            </summary>
            <param name="method">Délégué à exécuter</param>
            <param name="description">Description du thread crée (si un thread est crée)</param>
            <param name="onFinish">Evènement à appeler lorsque l'opération est terminée</param>
            <remarks>
            onFinish peut être null cependant si onFinish est différent de null il est exécuté
            sur le thread ayant exécuté le travail, pas sur le thread appelant
            </remarks>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadUtils.UseThreadPool">
            <summary>
            Indique si par défaut le ThreadPool doit être utilisé à la place
            de créer un nouveau thread pour les opérations compatibles
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Threading.ThreadedWorker`1">
            <summary>
            Classe permettant d'effectuer des actions de manière asynchrone et simultanée sur une série d'objets
            </summary>
            <typeparam name="T">Type des objets à traiter</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.StartWorkers">
            <summary>
            Démarre les threads de travaux
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.StartWorker">
            <summary>
            Initialise un nouveau thread de travaille et l'exécute
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkThreadMethod">
            <summary>
            Méthode appelée par les threads afin d'exécuter les tâches
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.#ctor">
            <summary>
            Initialise une nouvelle instance du gestionnaire de tâches asynchrones
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.#ctor(System.Int32)">
            <summary>
            Initialise une nouvelle instance du gestionnaire de tâches asynchrones
            </summary>
            <param name="maxThreadCount">Nombre maximum de threads dédiés à créer.<br/>
            Cette valeur ne peut pas être inférieure à 1</param>
        </member>
        <member name="F:Developpez.Dotnet.Threading.ThreadedWorker`1.sync">
            <summary>
            Object de synchronisation
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.ForEach(System.Collections.Generic.IEnumerable{`0},Developpez.Dotnet.Threading.ThreadedWorker{`0}.CallBackMethod,System.Boolean)">
            <summary>
            Appelle callback pour chaque object de objects de manière asynchrone, callback pouvant 
            être appellé en même temps sur plusieurs threads différents.
            Le nombre maximum de threads est définit par MaxThreadCounts.
            </summary>
            <param name="objects">Objets constituants le travail</param>
            <param name="callback">Méthode à appeller pour le travail</param>
            <param name="wait">Indique si ForEach doit être bloquant jusqu'à la fin de l'exécution
            du travail sur tous les éléments de objects, ou s'il doit retourner immédiatement</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.ExecuteSingleTask(`0,Developpez.Dotnet.Threading.ThreadedWorker{`0}.CallBackMethod,System.Boolean)">
            <summary>
            Exécute une tâche dans un des threads dédiés
            </summary>
            <param name="obj">Objet constituant le travail</param>
            <param name="callback">Méthode à appeller pour le travail</param>
            <param name="wait">Indique si ExecuteSingleTask doit être bloquant jusqu'à la fin de l'exécution
            du travail sur tous les éléments de objects, ou s'il doit retourner immédiatement</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.ExecuteWork(System.Collections.Generic.IEnumerable{`0},Developpez.Dotnet.Threading.ThreadedWorker{`0}.CallBackMethod)">
            <summary>
            Exécute le travail
            </summary>
            <param name="objects">Collection d'objets sur lesquels exécuter le travail</param>
            <param name="callback">Méthode de callback qui effectue le travail</param>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.Release">
            <summary>
            Met fin à tous les travaux et termine tout les thread (à la fin de ce qu'ils ont a faire, éventuellement)
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.Dispose">
            <summary>
            Libère les ressources associées à cette classe et libère les threads utilisés
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadedWorker`1.MaxThreadCount">
            <summary>
            Nombre de threads de travail.
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadedWorker`1.Items">
            <summary>
            Travaux globaux
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Threading.ThreadedWorker`1.CallBackMethod">
            <summary>
            Callback appelé pour effectuer les actions sur le type générique des arguments
            </summary>
            <param name="caller">Objet TreadWorker ayant effectué l'appel"/></param>
            <param name="currentObject">Objet de travail actuel</param>
        </member>
        <member name="T:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkItem">
            <summary>
            Tâche à effectuer
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkItem.#ctor(`0,Developpez.Dotnet.Threading.ThreadedWorker{`0}.CallBackMethod)">
            <summary>
            Initialise une nouvelle instance de tâche à effectuer
            </summary>
            <param name="item">Tâche</param>
            <param name="method">Méthode à appeler</param>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkItem.Item">
            <summary>
            Tâche
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkItem.Method">
            <summary>
            Méthode à appeler
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Threading.ThreadedWorker`1.WorkItem.Finished">
            <summary>
            Indique si la tâche a été exécutée ou non
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry`2">
            <summary>
            Représente une paire clé/valeur pour la sérialisation XML
            d'un dictionnaire
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="P:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry`2.Key">
            <summary>
            Clé de cette paire clé/valeur
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry`2.Value">
            <summary>
            Valeur de cette paire clé/valeur
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2">
            <summary>
            Une collection de paires clé/valeurs pour permettre la sérialisation XML d'un dictionnaire
            </summary>
            <typeparam name="TKey">Type de la clé</typeparam>
            <typeparam name="TValue">Type de la valeur</typeparam>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.#ctor">
            <summary>
            Initialise une nouvelle instance de XmlDictionaryEntryCollection
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initialise une nouvelle instance de XmlDictionaryEntryCollection pour le dictionnaire spécifié
            </summary>
            <param name="dictionary">Le dictionnaire pour lequel on veut obtenir la collection de paires clé/valeur</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Add(Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry{`0,`1})">
            <summary>
            Ajoute une paire clé/valeur à la collection
            </summary>
            <param name="item">Paire clé/valeur à ajouter</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Clear">
            <summary>
            Vide la collection
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Contains(Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry{`0,`1})">
            <summary>
            Teste si la collection contient la paire clé/valeur spécifiée
            </summary>
            <param name="item">La paire clé/valeur à rechercher</param>
            <returns>true si la collection contient la paire clé/valeur spécifiée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.CopyTo(Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry{`0,`1}[],System.Int32)">
            <summary>
            Copie les paires clé/valeur de la collection vers un tableau
            </summary>
            <param name="array">Le tableau vers lequel copier les données</param>
            <param name="arrayIndex">L'index dans array où la copie commence</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Remove(Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntry{`0,`1})">
            <summary>
            Supprime une paire clé/valeur de la collection
            </summary>
            <param name="item">La paire clé/valeur à supprimer</param>
            <returns>true si la paire clé/valeur a été supprimée, false sinon</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.GetEnumerator">
            <summary>
            Renvoie un objet qui énumére les éléments de la collectino
            </summary>
            <returns>Un énumérateur qui parcourt les éléments de la collection</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Renvoie un objet qui énumére les éléments de la collectino
            </summary>
            <returns>Un énumérateur qui parcourt les éléments de la collection</returns>
        </member>
        <member name="P:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Dictionary">
            <summary>
            Renvoie le dictionnaire correspondant à cette XmlDictionaryEntryCollection
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.Count">
            <summary>
            Renvoie le nombre d'éléments dans la collection
            </summary>
        </member>
        <member name="P:Developpez.Dotnet.Xml.Serialization.XmlDictionaryEntryCollection`2.IsReadOnly">
            <summary>
            Indique si la collection est en lecture seule
            </summary>
        </member>
        <member name="T:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions">
            <summary>
            Fournit des méthodes d'extension pour faciliter la sérialization XML
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ToXml``1(``0)">
            <summary>
            Renvoie une chaine de caractères contenant la représentation XML
            de l'objet
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <returns>La représentation XML de l'objet</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ToXml``1(``0,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Renvoie une chaine de caractères contenant la représentation XML
            de l'objet, en précisant les namespaces XML à utiliser
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="namespaces">Namespaces XML à utiliser</param>
            <returns>La représentation XML de l'objet</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ParseXml``1(System.String)">
            <summary>
            Crée un objet à partir de sa représentation XML
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="xml">Représentation XML de l'objet</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.String)">
            <summary>
            Sérialise un objet en XML dans le fichier spécifié
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="path">Chemin du fichier</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.String,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Sérialise un objet en XML dans le fichier spécifié, en utilisant les
            namespaces XML spécifiés
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="path">Chemin du fichier</param>
            <param name="namespaces">Namespaces XML à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.IO.Stream)">
            <summary>
            Sérialise un objet en XML dans le flux spécifié
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="stream">Flux dans lequel sérialiser l'objet</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.IO.Stream,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Sérialise un objet en XML dans le flux spécifié, en utilisant les
            namespaces XML spécifiés
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="stream">Flux dans lequel sérialiser l'objet</param>
            <param name="namespaces">Namespaces XML à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.IO.TextWriter)">
            <summary>
            Sérialise un objet en XML dans le TextWriter spécifié
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="writer">TextWriter dans lequel sérialiser l'objet</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.IO.TextWriter,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Sérialise un objet en XML dans le TextWriter spécifié, en utilisant les
            namespaces XML spécifiés
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="writer">TextWriter dans lequel sérialiser l'objet</param>
            <param name="namespaces">Namespaces XML à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.Xml.XmlWriter)">
            <summary>
            Sérialise un objet en XML dans le XmlWriter spécifié
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="writer">XmlWriter dans lequel sérialiser l'objet</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.WriteXml``1(``0,System.Xml.XmlWriter,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Sérialise un objet en XML dans le XmlWriter spécifié, en utilisant les
            namespaces XML spécifiés
            </summary>
            <typeparam name="T">Type de l'objet à sérialiser</typeparam>
            <param name="obj">Objet à sérialiser</param>
            <param name="writer">XmlWriter dans lequel sérialiser l'objet</param>
            <param name="namespaces">Namespaces XML à utiliser</param>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ReadXml``1(System.String)">
            <summary>
            Crée un objet à partir de sa représentation XML dans le fichier spécifié
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="path">Chemin du fichier</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ReadXml``1(System.IO.Stream)">
            <summary>
            Crée un objet à partir de sa représentation XML dans le flux spécifié
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="stream">Flux contenant la représentation XML de l'objet</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ReadXml``1(System.IO.TextReader)">
            <summary>
            Crée un objet à partir de sa représentation XML dans le TextReader spécifié
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="reader">TextReader contenant la représentation XML de l'objet</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ReadXml``1(System.Xml.XmlReader)">
            <summary>
            Crée un objet à partir de sa représentation XML dans le XmlReader spécifié
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="reader">XmlReader contenant la représentation XML de l'objet</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.ReadXml``1(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
            <summary>
            Crée un objet à partir de sa représentation XML dans le XmlReader spécifié, en utilisant
            les évènements de désérialisation spécifiés
            </summary>
            <typeparam name="T">Type de l'objet à désérialiser</typeparam>
            <param name="reader">XmlReader contenant la représentation XML de l'objet</param>
            <param name="events">Evènements de désérialisation à utiliser</param>
            <returns>L'objet correspondant à la représentation XML</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.Serialization.XmlSerializationExtensions.AsXmlSerializable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Renvoie un objet sérialisable en XML representant les données d'un dictionnaire
            </summary>
            <typeparam name="TKey">Type de clé</typeparam>
            <typeparam name="TValue">Type de valeur</typeparam>
            <param name="dictionary">Dictionnaire à sérialiser</param>
            <returns>Une collection de paires clé/valeur, équivalente au dictionnaire et sérialisable en XML</returns>
        </member>
        <member name="T:Developpez.Dotnet.Xml.XmlDumper">
            <summary>
             Fournit des méthodes pour convertir en XML n'importe quel objet, même anonyme
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlDumper.ToXml(System.Object,System.String)">
            <summary>
             Renvoie un élément XML avec le nom spécifié représentant l'objet passé en paramètre
            </summary>
            <param name="obj">L'objet à convertir en XML</param>
            <param name="elementName">Nom de l'élément XML racine</param>
            <returns>Un élément XML représentant l'objet passé en paramètre</returns>
             <remarks>Les propriétés de type primitif sont représentées par des attributs, celles de type complexe par des sous-éléments.
             Limitations:
             <list type="bullet">
             <item>
             <description>Seules les propriétés publiques sont prises en compte</description>
             </item>
             <item>
             <description>Les cycles ne sont pas détectés, donc si l'objet à convertir comporte des cycles, il se produira une StackOverflowException</description>
             </item>
             <item>
             <description>Les propriétés de type Delegate ne sont pas prises en compte</description>
             </item>
             </list>
             </remarks>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlDumper.ToXml(System.Object)">
            <summary>
             Renvoie un élément XML représentant l'objet passé en paramètre
            </summary>
            <param name="obj">L'objet à convertir en XML</param>
            <returns>Un élément XML représentant l'objet passé en paramètre</returns>
             <remarks>Les propriétés de type primitif sont représentées par des attributs, celles de type complexe par des sous-éléments.
             Limitations:
             <list type="bullet">
             <item>
             <description>Seules les propriétés publiques sont prises en compte</description>
             </item>
             <item>
             <description>Les cycles ne sont pas détectés, donc si l'objet à convertir comporte des cycles, il se produira une StackOverflowException</description>
             </item>
             <item>
             <description>Les propriétés de type Delegate ne sont pas prises en compte</description>
             </item>
             </list>
             </remarks>
        </member>
        <member name="T:Developpez.Dotnet.Xml.XmlExtensions">
            <summary>
            Fournit des méthodes d'extension pour la manipulation de documents XML
            </summary>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlExtensions.SafeValue(System.Xml.Linq.XElement)">
            <summary>
            Renvoie la valeur d'un élément XML s'il n'est pas null, ou null si l'élément est null.
            </summary>
            <param name="element">L'élément dont on veut obtenir la valeur</param>
            <returns>La valeur de l'élément s'il n'est pas null, ou null si l'élément est null.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlExtensions.SafeValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Renvoie la valeur d'un élément XML s'il n'est pas null, ou la valeur par défaut spécifiée si l'élément est null.
            </summary>
            <param name="element">L'élément dont on veut obtenir la valeur</param>
            <param name="defaultValue">La valeur à renvoyer si l'élément est null</param>
            <returns>La valeur de l'élément s'il n'est pas null, ou la valeur par défaut spécifiée si l'élément est null.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlExtensions.SafeValue(System.Xml.Linq.XAttribute)">
            <summary>
            Renvoie la valeur d'un attribut XML s'il n'est pas null, ou null si l'attribut est null.
            </summary>
            <param name="attribute">L'attribut dont on veut obtenir la valeur</param>
            <returns>La valeur de l'attribut s'il n'est pas null, ou null si l'attribut est null.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlExtensions.SafeValue(System.Xml.Linq.XAttribute,System.String)">
            <summary>
            Renvoie la valeur d'un attribut XML s'il n'est pas null, ou la valeur par défaut spécifiée si l'attribut est null.
            </summary>
            <param name="attribute">L'attribut dont on veut obtenir la valeur</param>
            <param name="defaultValue">La valeur à renvoyer si l'attribut est null</param>
            <returns>La valeur de l'attribut s'il n'est pas null, ou la valeur par défaut spécifiée si l'attribut est null.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlExtensions.SafeElement(System.Xml.Linq.XContainer,System.Xml.Linq.XName)">
            <summary>
            Renvoie le premier élément enfant du conteneur avec le XName spécifié, ou null si le conteneur est null.
            </summary>
            <param name="container">Le conteneur dans lequel chercher l'élément</param>
            <param name="name">Le nom de l'élément recherché</param>
            <returns>XElement qui correspond au XName spécifié, ou null si l'élément n'existe pas ou si le conteneur est null.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlExtensions.SafeElements(System.Xml.Linq.XContainer)">
            <summary>
            Renvoie une collection des éléments enfants de ce conteneur, ou une séquence vide si le conteneur est null.
            </summary>
            <param name="container">Le conteneur dont on veut obtenir les éléments enfants</param>
            <returns>Une séquence de XElement contenant les éléments enfants de ce conteneur, ou une séquence vide si le conteneur est null.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlExtensions.SafeElements(System.Xml.Linq.XContainer,System.Xml.Linq.XName)">
            <summary>
            Renvoie une collection des éléments enfants de ce conteneur avec le XName spécifié, ou une séquence vide si le conteneur est null.
            </summary>
            <param name="container">Le conteneur dont on veut obtenir les éléments enfants</param>
            <param name="name">Le nom des éléments recherchés</param>
            <returns>Une séquence de XElement contenant les éléments enfants de ce conteneur, avec le XName spécifié, ou une séquence vide si le conteneur est null.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlExtensions.SafeAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Renvoie l'attribut avec le XName spécifié, ou null si l'élement est null.
            </summary>
            <param name="element">L'élément pour lequel on veut obtenir l'attribut</param>
            <param name="name">Le nom de l'attribut recherché</param>
            <returns>XAttribute qui a le XName spécifié, ou null si l'attribut n'existe pas ou si l'élément est null.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlExtensions.SafeAttributes(System.Xml.Linq.XElement)">
            <summary>
            Renvoie une collection des attributs de cet élément, ou une séquence vide si l'élément est null.
            </summary>
            <param name="element">L'élément dont on veut obtenir les attributs</param>
            <returns>Une séquence de XAttribute contenant les attributs de cet élément, ou une séquence vide si l'élément est null.</returns>
        </member>
        <member name="M:Developpez.Dotnet.Xml.XmlExtensions.SafeAttributes(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Renvoie une des attributs avec le XName spécifié, ou une séquence vide si l'élément est null.
            </summary>
            <param name="element">L'élément dont on veut obtenir les attributs</param>
            <param name="name">L'élément dont on veut obtenir les attributs</param>
            <returns>Une séquence de XAttribute contenant les attributs avec le XName spécifié, ou une séquence vide si l'élément est null.</returns>
        </member>
    </members>
</doc>
